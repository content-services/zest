name: Update pulp binding if new release
on:
   push:
   schedule:
    - cron: "0 7 * * *"
jobs:
  CheckLatestVersionAndRun:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        with:
          fetch-depth: 0 # Needed for github-action-get-previous-tag
        uses: actions/checkout@v3

      - name: Get current build version
        id: repoRelease
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

      - name: Get current pulp version
        id: pulpRelease
        run: |
          echo "PULP_TAG=v`curl https://quay.io/v1/repositories/pulp/pulp-minimal/tags | jq --raw-output 'keys[]'   |  grep -v 'nightly\|latest\|stable' |sort --version-sort --field-separator=. |tail -n 1`" >> $GITHUB_OUTPUT
  
      # If check passes, latest build is up to date and the action stops
      - name: Update version
        # if: steps.pulpRelease.outputs.PULP_TAG != steps.repoRelease.outputs.tag
        run: |
          echp "${{steps.pulpRelease.outputs.PULP_TAG:0:2}}"
          echo "New pulp version available >> ${{ steps.pulpRelease.outputs.PULP_TAG }}! (Current build version ${{ steps.repoRelease.outputs.tag }})"

      # - name: Setup docker compose
      #   if: steps.pulpRelease.outputs.PULP_TAG != steps.repoRelease.outputs.tag
      #   uses: isbang/compose-action@v1.4.1
      #   with:
      #     compose-file: ./docker/docker-compose.yml
      #     down-flags: --volumes

      # - name: Remove old files
      #   if: steps.pulpRelease.outputs.PULP_TAG != steps.repoRelease.outputs.tag
      #   run: |
      #     rm -rf release/

      # - name: Wait for pulp
      #   if: steps.pulpRelease.outputs.PULP_TAG != steps.repoRelease.outputs.tag
      #   run: |
      #     docker run --network=host --rm -v ${PWD}:/local curlimages/curl  \
      #       curl --retry-all-errors --retry-delay 10 --retry 32 --retry-max-time 240 http://localhost:8080/pulp/api/v3/docs/api.json    

      # - name: Build binding
      #   if: steps.pulpRelease.outputs.PULP_TAG != steps.repoRelease.outputs.tag
      #   run: |
      #     curl http://localhost:8080/pulp/api/v3/docs/api.json > pulp_api.json
      #     patch -p0 < pulp_api.patch
      #     docker run --network=host --rm -v ${PWD}:/local openapitools/openapi-generator-cli generate \
      #     -i /local/pulp_api.json \
      #     -t /local/templates/ \
      #     -g go \
      #     -o /local/release --minimal-update --skip-validate-spec \
      #     --git-user-id=content-services --git-repo-id=zest/release \
      #     --package-name=zest -p enumClassPrefix=true  -p structPrefix=true \
      #     -p disallowAdditionalPropertiesIfNotPresent=true \
      #     -p packageVersion=${{ steps.pulpRelease.outputs.PULP_TAG }}

      # - name: Commit new client
      #   id: commit
      #   if: steps.pulpRelease.outputs.PULP_TAG != steps.repoRelease.outputs.tag
      #   run: |
      #     git config --global user.name ${{secrets.GIT_USER_NAME}}
      #     git config --global user.email ${{secrets.GIT_USER_EMAIL}}
      #     git add release/
      #     git commit -am "Update pulp bindings to ${{ steps.pulpRelease.outputs.PULP_TAG }}"
      #     git push
      #     echo "NEW_SHA=`git rev-parse HEAD`" >> $GITHUB_OUTPUT

      # # This pushes an update and release after build <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      # - name: Tag and Release version
      #   if: steps.pulpRelease.outputs.PULP_TAG != steps.repoRelease.outputs.tag
      #   uses: avakar/tag-and-release@v1
      #   with: 
      #     commit: ${{steps.commit.outputs.NEW_SHA}}
      #     tag_name: release/${{ steps.pulpRelease.outputs.PULP_TAG }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    