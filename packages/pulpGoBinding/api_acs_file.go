/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AcsFileApiService AcsFileApi service
type AcsFileApiService service

type AcsFileApiAcsFileFileAddRoleRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
	nestedRole *NestedRole
}

func (r AcsFileApiAcsFileFileAddRoleRequest) NestedRole(nestedRole NestedRole) AcsFileApiAcsFileFileAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r AcsFileApiAcsFileFileAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileAddRoleExecute(r)
}

/*
AcsFileFileAddRole Method for AcsFileFileAddRole

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFileAddRoleRequest
*/
func (a *AcsFileApiService) AcsFileFileAddRole(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFileAddRoleRequest {
	return AcsFileApiAcsFileFileAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *AcsFileApiService) AcsFileFileAddRoleExecute(r AcsFileApiAcsFileFileAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileCreateRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSource *FileFileAlternateContentSource
}

func (r AcsFileApiAcsFileFileCreateRequest) FileFileAlternateContentSource(fileFileAlternateContentSource FileFileAlternateContentSource) AcsFileApiAcsFileFileCreateRequest {
	r.fileFileAlternateContentSource = &fileFileAlternateContentSource
	return r
}

func (r AcsFileApiAcsFileFileCreateRequest) Execute() (*FileFileAlternateContentSourceResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileCreateExecute(r)
}

/*
AcsFileFileCreate Create a file alternate content source

Alternate Content Source ViewSet for File

ACS support is provided as a tech preview in pulp_file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AcsFileApiAcsFileFileCreateRequest
*/
func (a *AcsFileApiService) AcsFileFileCreate(ctx context.Context) AcsFileApiAcsFileFileCreateRequest {
	return AcsFileApiAcsFileFileCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FileFileAlternateContentSourceResponse
func (a *AcsFileApiService) AcsFileFileCreateExecute(r AcsFileApiAcsFileFileCreateRequest) (*FileFileAlternateContentSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FileFileAlternateContentSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/acs/file/file/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fileFileAlternateContentSource == nil {
		return localVarReturnValue, nil, reportError("fileFileAlternateContentSource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fileFileAlternateContentSource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileDeleteRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
}

func (r AcsFileApiAcsFileFileDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileDeleteExecute(r)
}

/*
AcsFileFileDelete Delete a file alternate content source

Trigger an asynchronous delete ACS task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFileDeleteRequest
*/
func (a *AcsFileApiService) AcsFileFileDelete(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFileDeleteRequest {
	return AcsFileApiAcsFileFileDeleteRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *AcsFileApiService) AcsFileFileDeleteExecute(r AcsFileApiAcsFileFileDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileListRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r AcsFileApiAcsFileFileListRequest) Limit(limit int32) AcsFileApiAcsFileFileListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r AcsFileApiAcsFileFileListRequest) Name(name string) AcsFileApiAcsFileFileListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r AcsFileApiAcsFileFileListRequest) NameContains(nameContains string) AcsFileApiAcsFileFileListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r AcsFileApiAcsFileFileListRequest) NameIcontains(nameIcontains string) AcsFileApiAcsFileFileListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r AcsFileApiAcsFileFileListRequest) NameIn(nameIn []string) AcsFileApiAcsFileFileListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name starts with value
func (r AcsFileApiAcsFileFileListRequest) NameStartswith(nameStartswith string) AcsFileApiAcsFileFileListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r AcsFileApiAcsFileFileListRequest) Offset(offset int32) AcsFileApiAcsFileFileListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r AcsFileApiAcsFileFileListRequest) Ordering(ordering []string) AcsFileApiAcsFileFileListRequest {
	r.ordering = &ordering
	return r
}

// A list of fields to include in the response.
func (r AcsFileApiAcsFileFileListRequest) Fields(fields []string) AcsFileApiAcsFileFileListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r AcsFileApiAcsFileFileListRequest) ExcludeFields(excludeFields []string) AcsFileApiAcsFileFileListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r AcsFileApiAcsFileFileListRequest) Execute() (*PaginatedfileFileAlternateContentSourceResponseList, *http.Response, error) {
	return r.ApiService.AcsFileFileListExecute(r)
}

/*
AcsFileFileList List file alternate content sources

Alternate Content Source ViewSet for File

ACS support is provided as a tech preview in pulp_file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AcsFileApiAcsFileFileListRequest
*/
func (a *AcsFileApiService) AcsFileFileList(ctx context.Context) AcsFileApiAcsFileFileListRequest {
	return AcsFileApiAcsFileFileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedfileFileAlternateContentSourceResponseList
func (a *AcsFileApiService) AcsFileFileListExecute(r AcsFileApiAcsFileFileListRequest) (*PaginatedfileFileAlternateContentSourceResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedfileFileAlternateContentSourceResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/acs/file/file/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileListRolesRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r AcsFileApiAcsFileFileListRolesRequest) Fields(fields []string) AcsFileApiAcsFileFileListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r AcsFileApiAcsFileFileListRolesRequest) ExcludeFields(excludeFields []string) AcsFileApiAcsFileFileListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r AcsFileApiAcsFileFileListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileListRolesExecute(r)
}

/*
AcsFileFileListRoles Method for AcsFileFileListRoles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFileListRolesRequest
*/
func (a *AcsFileApiService) AcsFileFileListRoles(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFileListRolesRequest {
	return AcsFileApiAcsFileFileListRolesRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *AcsFileApiService) AcsFileFileListRolesExecute(r AcsFileApiAcsFileFileListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileMyPermissionsRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r AcsFileApiAcsFileFileMyPermissionsRequest) Fields(fields []string) AcsFileApiAcsFileFileMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r AcsFileApiAcsFileFileMyPermissionsRequest) ExcludeFields(excludeFields []string) AcsFileApiAcsFileFileMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r AcsFileApiAcsFileFileMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileMyPermissionsExecute(r)
}

/*
AcsFileFileMyPermissions Method for AcsFileFileMyPermissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFileMyPermissionsRequest
*/
func (a *AcsFileApiService) AcsFileFileMyPermissions(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFileMyPermissionsRequest {
	return AcsFileApiAcsFileFileMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *AcsFileApiService) AcsFileFileMyPermissionsExecute(r AcsFileApiAcsFileFileMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFilePartialUpdateRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
	patchedfileFileAlternateContentSource *PatchedfileFileAlternateContentSource
}

func (r AcsFileApiAcsFileFilePartialUpdateRequest) PatchedfileFileAlternateContentSource(patchedfileFileAlternateContentSource PatchedfileFileAlternateContentSource) AcsFileApiAcsFileFilePartialUpdateRequest {
	r.patchedfileFileAlternateContentSource = &patchedfileFileAlternateContentSource
	return r
}

func (r AcsFileApiAcsFileFilePartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.AcsFileFilePartialUpdateExecute(r)
}

/*
AcsFileFilePartialUpdate Update a file alternate content source

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFilePartialUpdateRequest
*/
func (a *AcsFileApiService) AcsFileFilePartialUpdate(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFilePartialUpdateRequest {
	return AcsFileApiAcsFileFilePartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *AcsFileApiService) AcsFileFilePartialUpdateExecute(r AcsFileApiAcsFileFilePartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFilePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedfileFileAlternateContentSource == nil {
		return localVarReturnValue, nil, reportError("patchedfileFileAlternateContentSource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedfileFileAlternateContentSource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileReadRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r AcsFileApiAcsFileFileReadRequest) Fields(fields []string) AcsFileApiAcsFileFileReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r AcsFileApiAcsFileFileReadRequest) ExcludeFields(excludeFields []string) AcsFileApiAcsFileFileReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r AcsFileApiAcsFileFileReadRequest) Execute() (*FileFileAlternateContentSourceResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileReadExecute(r)
}

/*
AcsFileFileRead Inspect a file alternate content source

Alternate Content Source ViewSet for File

ACS support is provided as a tech preview in pulp_file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFileReadRequest
*/
func (a *AcsFileApiService) AcsFileFileRead(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFileReadRequest {
	return AcsFileApiAcsFileFileReadRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return FileFileAlternateContentSourceResponse
func (a *AcsFileApiService) AcsFileFileReadExecute(r AcsFileApiAcsFileFileReadRequest) (*FileFileAlternateContentSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FileFileAlternateContentSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileRefreshRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
}

func (r AcsFileApiAcsFileFileRefreshRequest) Execute() (*TaskGroupOperationResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileRefreshExecute(r)
}

/*
AcsFileFileRefresh Refresh metadata

Trigger an asynchronous task to create Alternate Content Source content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFileRefreshRequest
*/
func (a *AcsFileApiService) AcsFileFileRefresh(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFileRefreshRequest {
	return AcsFileApiAcsFileFileRefreshRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return TaskGroupOperationResponse
func (a *AcsFileApiService) AcsFileFileRefreshExecute(r AcsFileApiAcsFileFileRefreshRequest) (*TaskGroupOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroupOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileRefresh")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}refresh/"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileRemoveRoleRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
	nestedRole *NestedRole
}

func (r AcsFileApiAcsFileFileRemoveRoleRequest) NestedRole(nestedRole NestedRole) AcsFileApiAcsFileFileRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r AcsFileApiAcsFileFileRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileRemoveRoleExecute(r)
}

/*
AcsFileFileRemoveRole Method for AcsFileFileRemoveRole

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFileRemoveRoleRequest
*/
func (a *AcsFileApiService) AcsFileFileRemoveRole(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFileRemoveRoleRequest {
	return AcsFileApiAcsFileFileRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *AcsFileApiService) AcsFileFileRemoveRoleExecute(r AcsFileApiAcsFileFileRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsFileApiAcsFileFileUpdateRequest struct {
	ctx context.Context
	ApiService *AcsFileApiService
	fileFileAlternateContentSourceHref string
	fileFileAlternateContentSource *FileFileAlternateContentSource
}

func (r AcsFileApiAcsFileFileUpdateRequest) FileFileAlternateContentSource(fileFileAlternateContentSource FileFileAlternateContentSource) AcsFileApiAcsFileFileUpdateRequest {
	r.fileFileAlternateContentSource = &fileFileAlternateContentSource
	return r
}

func (r AcsFileApiAcsFileFileUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.AcsFileFileUpdateExecute(r)
}

/*
AcsFileFileUpdate Update a file alternate content source

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileFileAlternateContentSourceHref
 @return AcsFileApiAcsFileFileUpdateRequest
*/
func (a *AcsFileApiService) AcsFileFileUpdate(ctx context.Context, fileFileAlternateContentSourceHref string) AcsFileApiAcsFileFileUpdateRequest {
	return AcsFileApiAcsFileFileUpdateRequest{
		ApiService: a,
		ctx: ctx,
		fileFileAlternateContentSourceHref: fileFileAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *AcsFileApiService) AcsFileFileUpdateExecute(r AcsFileApiAcsFileFileUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsFileApiService.AcsFileFileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{file_file_alternate_content_source_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_file_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.fileFileAlternateContentSourceHref, "fileFileAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fileFileAlternateContentSource == nil {
		return localVarReturnValue, nil, reportError("fileFileAlternateContentSource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fileFileAlternateContentSource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
