/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpGoBinding

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentManifestsApiService ContentManifestsApi service
type ContentManifestsApiService service

type ContentManifestsApiContentContainerManifestsListRequest struct {
	ctx context.Context
	ApiService *ContentManifestsApiService
	digest *string
	digestIn *[]string
	limit *int32
	mediaType *[]string
	offset *int32
	ordering *[]string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where digest matches value
func (r ContentManifestsApiContentContainerManifestsListRequest) Digest(digest string) ContentManifestsApiContentContainerManifestsListRequest {
	r.digest = &digest
	return r
}

// Filter results where digest is in a comma-separated list of values
func (r ContentManifestsApiContentContainerManifestsListRequest) DigestIn(digestIn []string) ContentManifestsApiContentContainerManifestsListRequest {
	r.digestIn = &digestIn
	return r
}

// Number of results to return per page.
func (r ContentManifestsApiContentContainerManifestsListRequest) Limit(limit int32) ContentManifestsApiContentContainerManifestsListRequest {
	r.limit = &limit
	return r
}

func (r ContentManifestsApiContentContainerManifestsListRequest) MediaType(mediaType []string) ContentManifestsApiContentContainerManifestsListRequest {
	r.mediaType = &mediaType
	return r
}

// The initial index from which to return the results.
func (r ContentManifestsApiContentContainerManifestsListRequest) Offset(offset int32) ContentManifestsApiContentContainerManifestsListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ContentManifestsApiContentContainerManifestsListRequest) Ordering(ordering []string) ContentManifestsApiContentContainerManifestsListRequest {
	r.ordering = &ordering
	return r
}

// Repository Version referenced by HREF
func (r ContentManifestsApiContentContainerManifestsListRequest) RepositoryVersion(repositoryVersion string) ContentManifestsApiContentContainerManifestsListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF
func (r ContentManifestsApiContentContainerManifestsListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentManifestsApiContentContainerManifestsListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF
func (r ContentManifestsApiContentContainerManifestsListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentManifestsApiContentContainerManifestsListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// A list of fields to include in the response.
func (r ContentManifestsApiContentContainerManifestsListRequest) Fields(fields []string) ContentManifestsApiContentContainerManifestsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentManifestsApiContentContainerManifestsListRequest) ExcludeFields(excludeFields []string) ContentManifestsApiContentContainerManifestsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentManifestsApiContentContainerManifestsListRequest) Execute() (*PaginatedcontainerManifestResponseList, *http.Response, error) {
	return r.ApiService.ContentContainerManifestsListExecute(r)
}

/*
ContentContainerManifestsList List manifests

ViewSet for Manifest.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentManifestsApiContentContainerManifestsListRequest
*/
func (a *ContentManifestsApiService) ContentContainerManifestsList(ctx context.Context) ContentManifestsApiContentContainerManifestsListRequest {
	return ContentManifestsApiContentContainerManifestsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedcontainerManifestResponseList
func (a *ContentManifestsApiService) ContentContainerManifestsListExecute(r ContentManifestsApiContentContainerManifestsListRequest) (*PaginatedcontainerManifestResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedcontainerManifestResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentManifestsApiService.ContentContainerManifestsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/container/manifests/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.digest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digest", r.digest, "")
	}
	if r.digestIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digest__in", r.digestIn, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.mediaType != nil {
		t := *r.mediaType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "media_type", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "media_type", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentManifestsApiContentContainerManifestsReadRequest struct {
	ctx context.Context
	ApiService *ContentManifestsApiService
	containerManifestHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentManifestsApiContentContainerManifestsReadRequest) Fields(fields []string) ContentManifestsApiContentContainerManifestsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentManifestsApiContentContainerManifestsReadRequest) ExcludeFields(excludeFields []string) ContentManifestsApiContentContainerManifestsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentManifestsApiContentContainerManifestsReadRequest) Execute() (*ContainerManifestResponse, *http.Response, error) {
	return r.ApiService.ContentContainerManifestsReadExecute(r)
}

/*
ContentContainerManifestsRead Inspect a manifest

ViewSet for Manifest.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerManifestHref
 @return ContentManifestsApiContentContainerManifestsReadRequest
*/
func (a *ContentManifestsApiService) ContentContainerManifestsRead(ctx context.Context, containerManifestHref string) ContentManifestsApiContentContainerManifestsReadRequest {
	return ContentManifestsApiContentContainerManifestsReadRequest{
		ApiService: a,
		ctx: ctx,
		containerManifestHref: containerManifestHref,
	}
}

// Execute executes the request
//  @return ContainerManifestResponse
func (a *ContentManifestsApiService) ContentContainerManifestsReadExecute(r ContentManifestsApiContentContainerManifestsReadRequest) (*ContainerManifestResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContainerManifestResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentManifestsApiService.ContentContainerManifestsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_manifest_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_manifest_href"+"}", url.PathEscape(parameterValueToString(r.containerManifestHref, "containerManifestHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
