/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpGoBinding

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"reflect"
)


// RepositoriesContainerPushVersionsApiService RepositoriesContainerPushVersionsApi service
type RepositoriesContainerPushVersionsApiService service

type RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsDeleteRequest struct {
	ctx context.Context
	ApiService *RepositoriesContainerPushVersionsApiService
	containerContainerPushRepositoryVersionHref string
}

func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesContainerContainerPushVersionsDeleteExecute(r)
}

/*
RepositoriesContainerContainerPushVersionsDelete Delete a repository version

Trigger an asynchronous task to delete a repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPushRepositoryVersionHref
 @return RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsDeleteRequest
*/
func (a *RepositoriesContainerPushVersionsApiService) RepositoriesContainerContainerPushVersionsDelete(ctx context.Context, containerContainerPushRepositoryVersionHref string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsDeleteRequest {
	return RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPushRepositoryVersionHref: containerContainerPushRepositoryVersionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesContainerPushVersionsApiService) RepositoriesContainerContainerPushVersionsDeleteExecute(r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesContainerPushVersionsApiService.RepositoriesContainerContainerPushVersionsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_push_repository_version_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_push_repository_version_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPushRepositoryVersionHref, "containerContainerPushRepositoryVersionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest struct {
	ctx context.Context
	ApiService *RepositoriesContainerPushVersionsApiService
	containerContainerPushRepositoryHref string
	content *string
	contentIn *string
	limit *int32
	number *int32
	numberGt *int32
	numberGte *int32
	numberLt *int32
	numberLte *int32
	numberRange *[]int32
	offset *int32
	ordering *[]string
	pulpCreated *time.Time
	pulpCreatedGt *time.Time
	pulpCreatedGte *time.Time
	pulpCreatedLt *time.Time
	pulpCreatedLte *time.Time
	pulpCreatedRange *[]time.Time
	fields *[]string
	excludeFields *[]string
}

// Content Unit referenced by HREF
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) Content(content string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.content = &content
	return r
}

// Content Unit referenced by HREF
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) ContentIn(contentIn string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.contentIn = &contentIn
	return r
}

// Number of results to return per page.
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) Limit(limit int32) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.limit = &limit
	return r
}

// Filter results where number matches value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) Number(number int32) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.number = &number
	return r
}

// Filter results where number is greater than value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) NumberGt(numberGt int32) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.numberGt = &numberGt
	return r
}

// Filter results where number is greater than or equal to value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) NumberGte(numberGte int32) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.numberGte = &numberGte
	return r
}

// Filter results where number is less than value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) NumberLt(numberLt int32) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.numberLt = &numberLt
	return r
}

// Filter results where number is less than or equal to value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) NumberLte(numberLte int32) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.numberLte = &numberLte
	return r
}

// Filter results where number is between two comma separated values
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) NumberRange(numberRange []int32) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.numberRange = &numberRange
	return r
}

// The initial index from which to return the results.
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) Offset(offset int32) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) Ordering(ordering []string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.ordering = &ordering
	return r
}

// Filter results where pulp_created matches value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) PulpCreated(pulpCreated time.Time) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.pulpCreated = &pulpCreated
	return r
}

// Filter results where pulp_created is greater than value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) PulpCreatedGt(pulpCreatedGt time.Time) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.pulpCreatedGt = &pulpCreatedGt
	return r
}

// Filter results where pulp_created is greater than or equal to value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) PulpCreatedGte(pulpCreatedGte time.Time) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.pulpCreatedGte = &pulpCreatedGte
	return r
}

// Filter results where pulp_created is less than value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) PulpCreatedLt(pulpCreatedLt time.Time) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.pulpCreatedLt = &pulpCreatedLt
	return r
}

// Filter results where pulp_created is less than or equal to value
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) PulpCreatedLte(pulpCreatedLte time.Time) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.pulpCreatedLte = &pulpCreatedLte
	return r
}

// Filter results where pulp_created is between two comma separated values
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) PulpCreatedRange(pulpCreatedRange []time.Time) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.pulpCreatedRange = &pulpCreatedRange
	return r
}

// A list of fields to include in the response.
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) Fields(fields []string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) ExcludeFields(excludeFields []string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) Execute() (*PaginatedRepositoryVersionResponseList, *http.Response, error) {
	return r.ApiService.RepositoriesContainerContainerPushVersionsListExecute(r)
}

/*
RepositoriesContainerContainerPushVersionsList List repository versions

ContainerPushRepositoryVersion represents a single container push repository version.

Repository versions of a push repository are not allowed to be deleted. Versioning of such
repositories, as well as creation/removal, happens automatically without explicit user actions.
Users could make a repository not functional by accident if allowed to delete repository
versions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPushRepositoryHref
 @return RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest
*/
func (a *RepositoriesContainerPushVersionsApiService) RepositoriesContainerContainerPushVersionsList(ctx context.Context, containerContainerPushRepositoryHref string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest {
	return RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPushRepositoryHref: containerContainerPushRepositoryHref,
	}
}

// Execute executes the request
//  @return PaginatedRepositoryVersionResponseList
func (a *RepositoriesContainerPushVersionsApiService) RepositoriesContainerContainerPushVersionsListExecute(r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsListRequest) (*PaginatedRepositoryVersionResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRepositoryVersionResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesContainerPushVersionsApiService.RepositoriesContainerContainerPushVersionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_push_repository_href}versions/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_push_repository_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPushRepositoryHref, "containerContainerPushRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.content != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content", r.content, "")
	}
	if r.contentIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content__in", r.contentIn, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	if r.numberGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number__gt", r.numberGt, "")
	}
	if r.numberGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number__gte", r.numberGte, "")
	}
	if r.numberLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number__lt", r.numberLt, "")
	}
	if r.numberLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number__lte", r.numberLte, "")
	}
	if r.numberRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number__range", r.numberRange, "csv")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.pulpCreated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_created", r.pulpCreated, "")
	}
	if r.pulpCreatedGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_created__gt", r.pulpCreatedGt, "")
	}
	if r.pulpCreatedGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_created__gte", r.pulpCreatedGte, "")
	}
	if r.pulpCreatedLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_created__lt", r.pulpCreatedLt, "")
	}
	if r.pulpCreatedLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_created__lte", r.pulpCreatedLte, "")
	}
	if r.pulpCreatedRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_created__range", r.pulpCreatedRange, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest struct {
	ctx context.Context
	ApiService *RepositoriesContainerPushVersionsApiService
	containerContainerPushRepositoryVersionHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest) Fields(fields []string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest) ExcludeFields(excludeFields []string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest) Execute() (*RepositoryVersionResponse, *http.Response, error) {
	return r.ApiService.RepositoriesContainerContainerPushVersionsReadExecute(r)
}

/*
RepositoriesContainerContainerPushVersionsRead Inspect a repository version

ContainerPushRepositoryVersion represents a single container push repository version.

Repository versions of a push repository are not allowed to be deleted. Versioning of such
repositories, as well as creation/removal, happens automatically without explicit user actions.
Users could make a repository not functional by accident if allowed to delete repository
versions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPushRepositoryVersionHref
 @return RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest
*/
func (a *RepositoriesContainerPushVersionsApiService) RepositoriesContainerContainerPushVersionsRead(ctx context.Context, containerContainerPushRepositoryVersionHref string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest {
	return RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPushRepositoryVersionHref: containerContainerPushRepositoryVersionHref,
	}
}

// Execute executes the request
//  @return RepositoryVersionResponse
func (a *RepositoriesContainerPushVersionsApiService) RepositoriesContainerContainerPushVersionsReadExecute(r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsReadRequest) (*RepositoryVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepositoryVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesContainerPushVersionsApiService.RepositoriesContainerContainerPushVersionsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_push_repository_version_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_push_repository_version_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPushRepositoryVersionHref, "containerContainerPushRepositoryVersionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsRepairRequest struct {
	ctx context.Context
	ApiService *RepositoriesContainerPushVersionsApiService
	containerContainerPushRepositoryVersionHref string
	repair *Repair
}

func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsRepairRequest) Repair(repair Repair) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsRepairRequest {
	r.repair = &repair
	return r
}

func (r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsRepairRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesContainerContainerPushVersionsRepairExecute(r)
}

/*
RepositoriesContainerContainerPushVersionsRepair Method for RepositoriesContainerContainerPushVersionsRepair

Trigger an asynchronous task to repair a repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPushRepositoryVersionHref
 @return RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsRepairRequest
*/
func (a *RepositoriesContainerPushVersionsApiService) RepositoriesContainerContainerPushVersionsRepair(ctx context.Context, containerContainerPushRepositoryVersionHref string) RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsRepairRequest {
	return RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsRepairRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPushRepositoryVersionHref: containerContainerPushRepositoryVersionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesContainerPushVersionsApiService) RepositoriesContainerContainerPushVersionsRepairExecute(r RepositoriesContainerPushVersionsApiRepositoriesContainerContainerPushVersionsRepairRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesContainerPushVersionsApiService.RepositoriesContainerContainerPushVersionsRepair")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_push_repository_version_href}repair/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_push_repository_version_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPushRepositoryVersionHref, "containerContainerPushRepositoryVersionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repair == nil {
		return localVarReturnValue, nil, reportError("repair is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.repair
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
