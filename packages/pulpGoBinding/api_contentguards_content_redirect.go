/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpGoBinding

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentguardsContentRedirectApiService ContentguardsContentRedirectApi service
type ContentguardsContentRedirectApiService service

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectAddRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectAddRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsContentRedirectApiContentguardsCoreContentRedirectAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectAddRoleExecute(r)
}

/*
ContentguardsCoreContentRedirectAddRole Method for ContentguardsCoreContentRedirectAddRole

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentRedirectContentGuardHref
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectAddRoleRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectAddRole(ctx context.Context, contentRedirectContentGuardHref string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectAddRoleRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		contentRedirectContentGuardHref: contentRedirectContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectAddRoleExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{content_redirect_content_guard_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"content_redirect_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.contentRedirectContentGuardHref, "contentRedirectContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectCreateRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuard *ContentRedirectContentGuard
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectCreateRequest) ContentRedirectContentGuard(contentRedirectContentGuard ContentRedirectContentGuard) ContentguardsContentRedirectApiContentguardsCoreContentRedirectCreateRequest {
	r.contentRedirectContentGuard = &contentRedirectContentGuard
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectCreateRequest) Execute() (*ContentRedirectContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectCreateExecute(r)
}

/*
ContentguardsCoreContentRedirectCreate Create a content redirect content guard

Content guard to protect preauthenticated redirects to the content app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectCreateRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectCreate(ctx context.Context) ContentguardsContentRedirectApiContentguardsCoreContentRedirectCreateRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ContentRedirectContentGuardResponse
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectCreateExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectCreateRequest) (*ContentRedirectContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentRedirectContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentRedirectContentGuard == nil {
		return localVarReturnValue, nil, reportError("contentRedirectContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentRedirectContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectDeleteRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuardHref string
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectDeleteExecute(r)
}

/*
ContentguardsCoreContentRedirectDelete Delete a content redirect content guard

Content guard to protect preauthenticated redirects to the content app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentRedirectContentGuardHref
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectDeleteRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectDelete(ctx context.Context, contentRedirectContentGuardHref string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectDeleteRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectDeleteRequest{
		ApiService: a,
		ctx: ctx,
		contentRedirectContentGuardHref: contentRedirectContentGuardHref,
	}
}

// Execute executes the request
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectDeleteExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{content_redirect_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"content_redirect_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.contentRedirectContentGuardHref, "contentRedirectContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) Limit(limit int32) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) Name(name string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) NameContains(nameContains string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) NameIcontains(nameIcontains string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) NameIn(nameIn []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name starts with value
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) NameStartswith(nameStartswith string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) Offset(offset int32) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) Ordering(ordering []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.ordering = &ordering
	return r
}

// A list of fields to include in the response.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) Fields(fields []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) ExcludeFields(excludeFields []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) Execute() (*PaginatedContentRedirectContentGuardResponseList, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectListExecute(r)
}

/*
ContentguardsCoreContentRedirectList List content redirect content guards

Content guard to protect preauthenticated redirects to the content app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectList(ctx context.Context) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedContentRedirectContentGuardResponseList
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectListExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRequest) (*PaginatedContentRedirectContentGuardResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedContentRedirectContentGuardResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/content_redirect/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest) Fields(fields []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest) ExcludeFields(excludeFields []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectListRolesExecute(r)
}

/*
ContentguardsCoreContentRedirectListRoles Method for ContentguardsCoreContentRedirectListRoles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentRedirectContentGuardHref
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectListRoles(ctx context.Context, contentRedirectContentGuardHref string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest{
		ApiService: a,
		ctx: ctx,
		contentRedirectContentGuardHref: contentRedirectContentGuardHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectListRolesExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{content_redirect_content_guard_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"content_redirect_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.contentRedirectContentGuardHref, "contentRedirectContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest) Fields(fields []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest) ExcludeFields(excludeFields []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectMyPermissionsExecute(r)
}

/*
ContentguardsCoreContentRedirectMyPermissions Method for ContentguardsCoreContentRedirectMyPermissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentRedirectContentGuardHref
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectMyPermissions(ctx context.Context, contentRedirectContentGuardHref string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		contentRedirectContentGuardHref: contentRedirectContentGuardHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectMyPermissionsExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{content_redirect_content_guard_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"content_redirect_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.contentRedirectContentGuardHref, "contentRedirectContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuardHref string
	patchedContentRedirectContentGuard *PatchedContentRedirectContentGuard
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectPartialUpdateRequest) PatchedContentRedirectContentGuard(patchedContentRedirectContentGuard PatchedContentRedirectContentGuard) ContentguardsContentRedirectApiContentguardsCoreContentRedirectPartialUpdateRequest {
	r.patchedContentRedirectContentGuard = &patchedContentRedirectContentGuard
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectPartialUpdateRequest) Execute() (*ContentRedirectContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectPartialUpdateExecute(r)
}

/*
ContentguardsCoreContentRedirectPartialUpdate Update a content redirect content guard

Content guard to protect preauthenticated redirects to the content app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentRedirectContentGuardHref
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectPartialUpdateRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectPartialUpdate(ctx context.Context, contentRedirectContentGuardHref string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectPartialUpdateRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		contentRedirectContentGuardHref: contentRedirectContentGuardHref,
	}
}

// Execute executes the request
//  @return ContentRedirectContentGuardResponse
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectPartialUpdateExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectPartialUpdateRequest) (*ContentRedirectContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentRedirectContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{content_redirect_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"content_redirect_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.contentRedirectContentGuardHref, "contentRedirectContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedContentRedirectContentGuard == nil {
		return localVarReturnValue, nil, reportError("patchedContentRedirectContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedContentRedirectContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest) Fields(fields []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest) ExcludeFields(excludeFields []string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest) Execute() (*ContentRedirectContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectReadExecute(r)
}

/*
ContentguardsCoreContentRedirectRead Inspect a content redirect content guard

Content guard to protect preauthenticated redirects to the content app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentRedirectContentGuardHref
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectRead(ctx context.Context, contentRedirectContentGuardHref string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest{
		ApiService: a,
		ctx: ctx,
		contentRedirectContentGuardHref: contentRedirectContentGuardHref,
	}
}

// Execute executes the request
//  @return ContentRedirectContentGuardResponse
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectReadExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectReadRequest) (*ContentRedirectContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentRedirectContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{content_redirect_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"content_redirect_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.contentRedirectContentGuardHref, "contentRedirectContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectRemoveRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectRemoveRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsContentRedirectApiContentguardsCoreContentRedirectRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectRemoveRoleExecute(r)
}

/*
ContentguardsCoreContentRedirectRemoveRole Method for ContentguardsCoreContentRedirectRemoveRole

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentRedirectContentGuardHref
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectRemoveRoleRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectRemoveRole(ctx context.Context, contentRedirectContentGuardHref string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectRemoveRoleRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		contentRedirectContentGuardHref: contentRedirectContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectRemoveRoleExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{content_redirect_content_guard_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"content_redirect_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.contentRedirectContentGuardHref, "contentRedirectContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsContentRedirectApiContentguardsCoreContentRedirectUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsContentRedirectApiService
	contentRedirectContentGuardHref string
	contentRedirectContentGuard *ContentRedirectContentGuard
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectUpdateRequest) ContentRedirectContentGuard(contentRedirectContentGuard ContentRedirectContentGuard) ContentguardsContentRedirectApiContentguardsCoreContentRedirectUpdateRequest {
	r.contentRedirectContentGuard = &contentRedirectContentGuard
	return r
}

func (r ContentguardsContentRedirectApiContentguardsCoreContentRedirectUpdateRequest) Execute() (*ContentRedirectContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreContentRedirectUpdateExecute(r)
}

/*
ContentguardsCoreContentRedirectUpdate Update a content redirect content guard

Content guard to protect preauthenticated redirects to the content app.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contentRedirectContentGuardHref
 @return ContentguardsContentRedirectApiContentguardsCoreContentRedirectUpdateRequest
*/
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectUpdate(ctx context.Context, contentRedirectContentGuardHref string) ContentguardsContentRedirectApiContentguardsCoreContentRedirectUpdateRequest {
	return ContentguardsContentRedirectApiContentguardsCoreContentRedirectUpdateRequest{
		ApiService: a,
		ctx: ctx,
		contentRedirectContentGuardHref: contentRedirectContentGuardHref,
	}
}

// Execute executes the request
//  @return ContentRedirectContentGuardResponse
func (a *ContentguardsContentRedirectApiService) ContentguardsCoreContentRedirectUpdateExecute(r ContentguardsContentRedirectApiContentguardsCoreContentRedirectUpdateRequest) (*ContentRedirectContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentRedirectContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsContentRedirectApiService.ContentguardsCoreContentRedirectUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{content_redirect_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"content_redirect_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.contentRedirectContentGuardHref, "contentRedirectContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentRedirectContentGuard == nil {
		return localVarReturnValue, nil, reportError("contentRedirectContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentRedirectContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
