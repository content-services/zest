/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentguardsRbacApiService ContentguardsRbacApi service
type ContentguardsRbacApiService service

type ContentguardsRbacApiContentguardsCoreRbacAddRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsRbacApiContentguardsCoreRbacAddRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsRbacApiContentguardsCoreRbacAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacAddRoleExecute(r)
}

/*
ContentguardsCoreRbacAddRole Method for ContentguardsCoreRbacAddRole

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rBACContentGuardHref
 @return ContentguardsRbacApiContentguardsCoreRbacAddRoleRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacAddRole(ctx context.Context, rBACContentGuardHref string) ContentguardsRbacApiContentguardsCoreRbacAddRoleRequest {
	return ContentguardsRbacApiContentguardsCoreRbacAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		rBACContentGuardHref: rBACContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacAddRoleExecute(r ContentguardsRbacApiContentguardsCoreRbacAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{r_b_a_c_content_guard_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"r_b_a_c_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.rBACContentGuardHref, "rBACContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacCreateRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuard *RBACContentGuard
}

func (r ContentguardsRbacApiContentguardsCoreRbacCreateRequest) RBACContentGuard(rBACContentGuard RBACContentGuard) ContentguardsRbacApiContentguardsCoreRbacCreateRequest {
	r.rBACContentGuard = &rBACContentGuard
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacCreateRequest) Execute() (*RBACContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacCreateExecute(r)
}

/*
ContentguardsCoreRbacCreate Create a rbac content guard

Viewset for creating contentguards that use RBAC to protect content.
Has add and remove actions for managing permission for users and groups to download content
protected by this guard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentguardsRbacApiContentguardsCoreRbacCreateRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacCreate(ctx context.Context) ContentguardsRbacApiContentguardsCoreRbacCreateRequest {
	return ContentguardsRbacApiContentguardsCoreRbacCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RBACContentGuardResponse
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacCreateExecute(r ContentguardsRbacApiContentguardsCoreRbacCreateRequest) (*RBACContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RBACContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/rbac/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rBACContentGuard == nil {
		return localVarReturnValue, nil, reportError("rBACContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rBACContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacDeleteRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuardHref string
}

func (r ContentguardsRbacApiContentguardsCoreRbacDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacDeleteExecute(r)
}

/*
ContentguardsCoreRbacDelete Delete a rbac content guard

Viewset for creating contentguards that use RBAC to protect content.
Has add and remove actions for managing permission for users and groups to download content
protected by this guard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rBACContentGuardHref
 @return ContentguardsRbacApiContentguardsCoreRbacDeleteRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacDelete(ctx context.Context, rBACContentGuardHref string) ContentguardsRbacApiContentguardsCoreRbacDeleteRequest {
	return ContentguardsRbacApiContentguardsCoreRbacDeleteRequest{
		ApiService: a,
		ctx: ctx,
		rBACContentGuardHref: rBACContentGuardHref,
	}
}

// Execute executes the request
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacDeleteExecute(r ContentguardsRbacApiContentguardsCoreRbacDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{r_b_a_c_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"r_b_a_c_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.rBACContentGuardHref, "rBACContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacListRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) Limit(limit int32) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) Name(name string) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) NameContains(nameContains string) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) NameIcontains(nameIcontains string) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) NameIn(nameIn []string) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name starts with value
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) NameStartswith(nameStartswith string) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) Offset(offset int32) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) Ordering(ordering []string) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.ordering = &ordering
	return r
}

// A list of fields to include in the response.
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) Fields(fields []string) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) ExcludeFields(excludeFields []string) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacListRequest) Execute() (*PaginatedRBACContentGuardResponseList, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacListExecute(r)
}

/*
ContentguardsCoreRbacList List rbac content guards

Viewset for creating contentguards that use RBAC to protect content.
Has add and remove actions for managing permission for users and groups to download content
protected by this guard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentguardsRbacApiContentguardsCoreRbacListRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacList(ctx context.Context) ContentguardsRbacApiContentguardsCoreRbacListRequest {
	return ContentguardsRbacApiContentguardsCoreRbacListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRBACContentGuardResponseList
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacListExecute(r ContentguardsRbacApiContentguardsCoreRbacListRequest) (*PaginatedRBACContentGuardResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRBACContentGuardResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/contentguards/core/rbac/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacListRolesRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsRbacApiContentguardsCoreRbacListRolesRequest) Fields(fields []string) ContentguardsRbacApiContentguardsCoreRbacListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsRbacApiContentguardsCoreRbacListRolesRequest) ExcludeFields(excludeFields []string) ContentguardsRbacApiContentguardsCoreRbacListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacListRolesExecute(r)
}

/*
ContentguardsCoreRbacListRoles Method for ContentguardsCoreRbacListRoles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rBACContentGuardHref
 @return ContentguardsRbacApiContentguardsCoreRbacListRolesRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacListRoles(ctx context.Context, rBACContentGuardHref string) ContentguardsRbacApiContentguardsCoreRbacListRolesRequest {
	return ContentguardsRbacApiContentguardsCoreRbacListRolesRequest{
		ApiService: a,
		ctx: ctx,
		rBACContentGuardHref: rBACContentGuardHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacListRolesExecute(r ContentguardsRbacApiContentguardsCoreRbacListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{r_b_a_c_content_guard_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"r_b_a_c_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.rBACContentGuardHref, "rBACContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest) Fields(fields []string) ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest) ExcludeFields(excludeFields []string) ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacMyPermissionsExecute(r)
}

/*
ContentguardsCoreRbacMyPermissions Method for ContentguardsCoreRbacMyPermissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rBACContentGuardHref
 @return ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacMyPermissions(ctx context.Context, rBACContentGuardHref string) ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest {
	return ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		rBACContentGuardHref: rBACContentGuardHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacMyPermissionsExecute(r ContentguardsRbacApiContentguardsCoreRbacMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{r_b_a_c_content_guard_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"r_b_a_c_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.rBACContentGuardHref, "rBACContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuardHref string
	patchedRBACContentGuard *PatchedRBACContentGuard
}

func (r ContentguardsRbacApiContentguardsCoreRbacPartialUpdateRequest) PatchedRBACContentGuard(patchedRBACContentGuard PatchedRBACContentGuard) ContentguardsRbacApiContentguardsCoreRbacPartialUpdateRequest {
	r.patchedRBACContentGuard = &patchedRBACContentGuard
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacPartialUpdateRequest) Execute() (*RBACContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacPartialUpdateExecute(r)
}

/*
ContentguardsCoreRbacPartialUpdate Update a rbac content guard

Viewset for creating contentguards that use RBAC to protect content.
Has add and remove actions for managing permission for users and groups to download content
protected by this guard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rBACContentGuardHref
 @return ContentguardsRbacApiContentguardsCoreRbacPartialUpdateRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacPartialUpdate(ctx context.Context, rBACContentGuardHref string) ContentguardsRbacApiContentguardsCoreRbacPartialUpdateRequest {
	return ContentguardsRbacApiContentguardsCoreRbacPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		rBACContentGuardHref: rBACContentGuardHref,
	}
}

// Execute executes the request
//  @return RBACContentGuardResponse
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacPartialUpdateExecute(r ContentguardsRbacApiContentguardsCoreRbacPartialUpdateRequest) (*RBACContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RBACContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{r_b_a_c_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"r_b_a_c_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.rBACContentGuardHref, "rBACContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedRBACContentGuard == nil {
		return localVarReturnValue, nil, reportError("patchedRBACContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRBACContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacReadRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsRbacApiContentguardsCoreRbacReadRequest) Fields(fields []string) ContentguardsRbacApiContentguardsCoreRbacReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsRbacApiContentguardsCoreRbacReadRequest) ExcludeFields(excludeFields []string) ContentguardsRbacApiContentguardsCoreRbacReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacReadRequest) Execute() (*RBACContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacReadExecute(r)
}

/*
ContentguardsCoreRbacRead Inspect a rbac content guard

Viewset for creating contentguards that use RBAC to protect content.
Has add and remove actions for managing permission for users and groups to download content
protected by this guard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rBACContentGuardHref
 @return ContentguardsRbacApiContentguardsCoreRbacReadRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacRead(ctx context.Context, rBACContentGuardHref string) ContentguardsRbacApiContentguardsCoreRbacReadRequest {
	return ContentguardsRbacApiContentguardsCoreRbacReadRequest{
		ApiService: a,
		ctx: ctx,
		rBACContentGuardHref: rBACContentGuardHref,
	}
}

// Execute executes the request
//  @return RBACContentGuardResponse
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacReadExecute(r ContentguardsRbacApiContentguardsCoreRbacReadRequest) (*RBACContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RBACContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{r_b_a_c_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"r_b_a_c_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.rBACContentGuardHref, "rBACContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacRemoveRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsRbacApiContentguardsCoreRbacRemoveRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsRbacApiContentguardsCoreRbacRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacRemoveRoleExecute(r)
}

/*
ContentguardsCoreRbacRemoveRole Method for ContentguardsCoreRbacRemoveRole

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rBACContentGuardHref
 @return ContentguardsRbacApiContentguardsCoreRbacRemoveRoleRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacRemoveRole(ctx context.Context, rBACContentGuardHref string) ContentguardsRbacApiContentguardsCoreRbacRemoveRoleRequest {
	return ContentguardsRbacApiContentguardsCoreRbacRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		rBACContentGuardHref: rBACContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacRemoveRoleExecute(r ContentguardsRbacApiContentguardsCoreRbacRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{r_b_a_c_content_guard_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"r_b_a_c_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.rBACContentGuardHref, "rBACContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsRbacApiContentguardsCoreRbacUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsRbacApiService
	rBACContentGuardHref string
	rBACContentGuard *RBACContentGuard
}

func (r ContentguardsRbacApiContentguardsCoreRbacUpdateRequest) RBACContentGuard(rBACContentGuard RBACContentGuard) ContentguardsRbacApiContentguardsCoreRbacUpdateRequest {
	r.rBACContentGuard = &rBACContentGuard
	return r
}

func (r ContentguardsRbacApiContentguardsCoreRbacUpdateRequest) Execute() (*RBACContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreRbacUpdateExecute(r)
}

/*
ContentguardsCoreRbacUpdate Update a rbac content guard

Viewset for creating contentguards that use RBAC to protect content.
Has add and remove actions for managing permission for users and groups to download content
protected by this guard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rBACContentGuardHref
 @return ContentguardsRbacApiContentguardsCoreRbacUpdateRequest
*/
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacUpdate(ctx context.Context, rBACContentGuardHref string) ContentguardsRbacApiContentguardsCoreRbacUpdateRequest {
	return ContentguardsRbacApiContentguardsCoreRbacUpdateRequest{
		ApiService: a,
		ctx: ctx,
		rBACContentGuardHref: rBACContentGuardHref,
	}
}

// Execute executes the request
//  @return RBACContentGuardResponse
func (a *ContentguardsRbacApiService) ContentguardsCoreRbacUpdateExecute(r ContentguardsRbacApiContentguardsCoreRbacUpdateRequest) (*RBACContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RBACContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsRbacApiService.ContentguardsCoreRbacUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{r_b_a_c_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"r_b_a_c_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.rBACContentGuardHref, "rBACContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rBACContentGuard == nil {
		return localVarReturnValue, nil, reportError("rBACContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rBACContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
