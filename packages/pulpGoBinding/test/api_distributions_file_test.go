/*
Pulp 3 API

Testing DistributionsFileApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pulpGoBinding

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/pulpGoBinding/packages/pulpGoBinding"
)

func Test_pulpGoBinding_DistributionsFileApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DistributionsFileApiService DistributionsFileFileAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileDistributionHref string

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileAddRole(context.Background(), fileFileDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFileCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFileDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileDistributionHref string

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileDelete(context.Background(), fileFileDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFileList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFileListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileDistributionHref string

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileListRoles(context.Background(), fileFileDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFileMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileDistributionHref string

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileMyPermissions(context.Background(), fileFileDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFilePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileDistributionHref string

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFilePartialUpdate(context.Background(), fileFileDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFileRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileDistributionHref string

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileRead(context.Background(), fileFileDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFileRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileDistributionHref string

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileRemoveRole(context.Background(), fileFileDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsFileApiService DistributionsFileFileUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileFileDistributionHref string

		resp, httpRes, err := apiClient.DistributionsFileApi.DistributionsFileFileUpdate(context.Background(), fileFileDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
