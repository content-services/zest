/*
Pulp 3 API

Testing UploadsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/packages/pulpGoBinding"
)

func Test_zest_UploadsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UploadsApiService UploadsAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadHref string

		resp, httpRes, err := apiClient.UploadsApi.UploadsAddRole(context.Background(), uploadHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsCommit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadHref string

		resp, httpRes, err := apiClient.UploadsApi.UploadsCommit(context.Background(), uploadHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UploadsApi.UploadsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadHref string

		httpRes, err := apiClient.UploadsApi.UploadsDelete(context.Background(), uploadHref).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UploadsApi.UploadsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadHref string

		resp, httpRes, err := apiClient.UploadsApi.UploadsListRoles(context.Background(), uploadHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadHref string

		resp, httpRes, err := apiClient.UploadsApi.UploadsMyPermissions(context.Background(), uploadHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadHref string

		resp, httpRes, err := apiClient.UploadsApi.UploadsRead(context.Background(), uploadHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadHref string

		resp, httpRes, err := apiClient.UploadsApi.UploadsRemoveRole(context.Background(), uploadHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UploadsApiService UploadsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadHref string

		resp, httpRes, err := apiClient.UploadsApi.UploadsUpdate(context.Background(), uploadHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
