/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpGoBinding

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentReleasesApiService ContentReleasesApi service
type ContentReleasesApiService service

type ContentReleasesApiContentDebReleasesCreateRequest struct {
	ctx context.Context
	ApiService *ContentReleasesApiService
	debRelease *DebRelease
}

func (r ContentReleasesApiContentDebReleasesCreateRequest) DebRelease(debRelease DebRelease) ContentReleasesApiContentDebReleasesCreateRequest {
	r.debRelease = &debRelease
	return r
}

func (r ContentReleasesApiContentDebReleasesCreateRequest) Execute() (*DebReleaseResponse, *http.Response, error) {
	return r.ApiService.ContentDebReleasesCreateExecute(r)
}

/*
ContentDebReleasesCreate Create a release

A Release represents a single APT release/distribution.

Associated artifacts: None; contains only metadata.

Note that in the context of the "Release content", the terms "distribution" and "release"
are synonyms. An "APT repository release/distribution" is associated with a single 'Release'
file below the 'dists/' folder. The "distribution" refers to the path between 'dists/' and the
'Release' file. The "distribution" could be considered the name of the "release". It is often
(but not always) equal to the "codename" or "suite".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentReleasesApiContentDebReleasesCreateRequest
*/
func (a *ContentReleasesApiService) ContentDebReleasesCreate(ctx context.Context) ContentReleasesApiContentDebReleasesCreateRequest {
	return ContentReleasesApiContentDebReleasesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DebReleaseResponse
func (a *ContentReleasesApiService) ContentDebReleasesCreateExecute(r ContentReleasesApiContentDebReleasesCreateRequest) (*DebReleaseResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebReleaseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleasesApiService.ContentDebReleasesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/releases/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.debRelease == nil {
		return localVarReturnValue, nil, reportError("debRelease is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.debRelease
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentReleasesApiContentDebReleasesListRequest struct {
	ctx context.Context
	ApiService *ContentReleasesApiService
	codename *string
	distribution *string
	limit *int32
	offset *int32
	ordering *[]string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	suite *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where codename matches value
func (r ContentReleasesApiContentDebReleasesListRequest) Codename(codename string) ContentReleasesApiContentDebReleasesListRequest {
	r.codename = &codename
	return r
}

// Filter results where distribution matches value
func (r ContentReleasesApiContentDebReleasesListRequest) Distribution(distribution string) ContentReleasesApiContentDebReleasesListRequest {
	r.distribution = &distribution
	return r
}

// Number of results to return per page.
func (r ContentReleasesApiContentDebReleasesListRequest) Limit(limit int32) ContentReleasesApiContentDebReleasesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ContentReleasesApiContentDebReleasesListRequest) Offset(offset int32) ContentReleasesApiContentDebReleasesListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ContentReleasesApiContentDebReleasesListRequest) Ordering(ordering []string) ContentReleasesApiContentDebReleasesListRequest {
	r.ordering = &ordering
	return r
}

// Repository Version referenced by HREF
func (r ContentReleasesApiContentDebReleasesListRequest) RepositoryVersion(repositoryVersion string) ContentReleasesApiContentDebReleasesListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF
func (r ContentReleasesApiContentDebReleasesListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentReleasesApiContentDebReleasesListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF
func (r ContentReleasesApiContentDebReleasesListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentReleasesApiContentDebReleasesListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// Filter results where suite matches value
func (r ContentReleasesApiContentDebReleasesListRequest) Suite(suite string) ContentReleasesApiContentDebReleasesListRequest {
	r.suite = &suite
	return r
}

// A list of fields to include in the response.
func (r ContentReleasesApiContentDebReleasesListRequest) Fields(fields []string) ContentReleasesApiContentDebReleasesListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentReleasesApiContentDebReleasesListRequest) ExcludeFields(excludeFields []string) ContentReleasesApiContentDebReleasesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentReleasesApiContentDebReleasesListRequest) Execute() (*PaginateddebReleaseResponseList, *http.Response, error) {
	return r.ApiService.ContentDebReleasesListExecute(r)
}

/*
ContentDebReleasesList List releases

A Release represents a single APT release/distribution.

Associated artifacts: None; contains only metadata.

Note that in the context of the "Release content", the terms "distribution" and "release"
are synonyms. An "APT repository release/distribution" is associated with a single 'Release'
file below the 'dists/' folder. The "distribution" refers to the path between 'dists/' and the
'Release' file. The "distribution" could be considered the name of the "release". It is often
(but not always) equal to the "codename" or "suite".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentReleasesApiContentDebReleasesListRequest
*/
func (a *ContentReleasesApiService) ContentDebReleasesList(ctx context.Context) ContentReleasesApiContentDebReleasesListRequest {
	return ContentReleasesApiContentDebReleasesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginateddebReleaseResponseList
func (a *ContentReleasesApiService) ContentDebReleasesListExecute(r ContentReleasesApiContentDebReleasesListRequest) (*PaginateddebReleaseResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginateddebReleaseResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleasesApiService.ContentDebReleasesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/releases/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.codename != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "codename", r.codename, "")
	}
	if r.distribution != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distribution", r.distribution, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "")
	}
	if r.suite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suite", r.suite, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentReleasesApiContentDebReleasesReadRequest struct {
	ctx context.Context
	ApiService *ContentReleasesApiService
	debReleaseHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentReleasesApiContentDebReleasesReadRequest) Fields(fields []string) ContentReleasesApiContentDebReleasesReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentReleasesApiContentDebReleasesReadRequest) ExcludeFields(excludeFields []string) ContentReleasesApiContentDebReleasesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentReleasesApiContentDebReleasesReadRequest) Execute() (*DebReleaseResponse, *http.Response, error) {
	return r.ApiService.ContentDebReleasesReadExecute(r)
}

/*
ContentDebReleasesRead Inspect a release

A Release represents a single APT release/distribution.

Associated artifacts: None; contains only metadata.

Note that in the context of the "Release content", the terms "distribution" and "release"
are synonyms. An "APT repository release/distribution" is associated with a single 'Release'
file below the 'dists/' folder. The "distribution" refers to the path between 'dists/' and the
'Release' file. The "distribution" could be considered the name of the "release". It is often
(but not always) equal to the "codename" or "suite".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param debReleaseHref
 @return ContentReleasesApiContentDebReleasesReadRequest
*/
func (a *ContentReleasesApiService) ContentDebReleasesRead(ctx context.Context, debReleaseHref string) ContentReleasesApiContentDebReleasesReadRequest {
	return ContentReleasesApiContentDebReleasesReadRequest{
		ApiService: a,
		ctx: ctx,
		debReleaseHref: debReleaseHref,
	}
}

// Execute executes the request
//  @return DebReleaseResponse
func (a *ContentReleasesApiService) ContentDebReleasesReadExecute(r ContentReleasesApiContentDebReleasesReadRequest) (*DebReleaseResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebReleaseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleasesApiService.ContentDebReleasesRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{deb_release_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"deb_release_href"+"}", url.PathEscape(parameterValueToString(r.debReleaseHref, "debReleaseHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
