/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpGoBinding

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentReleaseComponentsApiService ContentReleaseComponentsApi service
type ContentReleaseComponentsApiService service

type ContentReleaseComponentsApiContentDebReleaseComponentsCreateRequest struct {
	ctx context.Context
	ApiService *ContentReleaseComponentsApiService
	debReleaseComponent *DebReleaseComponent
}

func (r ContentReleaseComponentsApiContentDebReleaseComponentsCreateRequest) DebReleaseComponent(debReleaseComponent DebReleaseComponent) ContentReleaseComponentsApiContentDebReleaseComponentsCreateRequest {
	r.debReleaseComponent = &debReleaseComponent
	return r
}

func (r ContentReleaseComponentsApiContentDebReleaseComponentsCreateRequest) Execute() (*DebReleaseComponentResponse, *http.Response, error) {
	return r.ApiService.ContentDebReleaseComponentsCreateExecute(r)
}

/*
ContentDebReleaseComponentsCreate Create a release component

A ReleaseComponent represents a single APT repository component.

Associated artifacts: None; contains only metadata.

Every ReleaseComponent is always associated with exactly one Release. This indicates that the
release/distribution in question contains this component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentReleaseComponentsApiContentDebReleaseComponentsCreateRequest
*/
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsCreate(ctx context.Context) ContentReleaseComponentsApiContentDebReleaseComponentsCreateRequest {
	return ContentReleaseComponentsApiContentDebReleaseComponentsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DebReleaseComponentResponse
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsCreateExecute(r ContentReleaseComponentsApiContentDebReleaseComponentsCreateRequest) (*DebReleaseComponentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebReleaseComponentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseComponentsApiService.ContentDebReleaseComponentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/release_components/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.debReleaseComponent == nil {
		return localVarReturnValue, nil, reportError("debReleaseComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.debReleaseComponent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentReleaseComponentsApiContentDebReleaseComponentsListRequest struct {
	ctx context.Context
	ApiService *ContentReleaseComponentsApiService
	component *string
	limit *int32
	offset *int32
	ordering *[]string
	release *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where component matches value
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) Component(component string) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.component = &component
	return r
}

// Number of results to return per page.
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) Limit(limit int32) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) Offset(offset int32) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) Ordering(ordering []string) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.ordering = &ordering
	return r
}

// Filter results where release matches value
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) Release(release string) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.release = &release
	return r
}

// Repository Version referenced by HREF
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) RepositoryVersion(repositoryVersion string) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// A list of fields to include in the response.
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) Fields(fields []string) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) ExcludeFields(excludeFields []string) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) Execute() (*PaginateddebReleaseComponentResponseList, *http.Response, error) {
	return r.ApiService.ContentDebReleaseComponentsListExecute(r)
}

/*
ContentDebReleaseComponentsList List release components

A ReleaseComponent represents a single APT repository component.

Associated artifacts: None; contains only metadata.

Every ReleaseComponent is always associated with exactly one Release. This indicates that the
release/distribution in question contains this component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentReleaseComponentsApiContentDebReleaseComponentsListRequest
*/
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsList(ctx context.Context) ContentReleaseComponentsApiContentDebReleaseComponentsListRequest {
	return ContentReleaseComponentsApiContentDebReleaseComponentsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginateddebReleaseComponentResponseList
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsListExecute(r ContentReleaseComponentsApiContentDebReleaseComponentsListRequest) (*PaginateddebReleaseComponentResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginateddebReleaseComponentResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseComponentsApiService.ContentDebReleaseComponentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/release_components/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.component != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component", r.component, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.release != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "release", r.release, "")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest struct {
	ctx context.Context
	ApiService *ContentReleaseComponentsApiService
	debReleaseComponentHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest) Fields(fields []string) ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest) ExcludeFields(excludeFields []string) ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest) Execute() (*DebReleaseComponentResponse, *http.Response, error) {
	return r.ApiService.ContentDebReleaseComponentsReadExecute(r)
}

/*
ContentDebReleaseComponentsRead Inspect a release component

A ReleaseComponent represents a single APT repository component.

Associated artifacts: None; contains only metadata.

Every ReleaseComponent is always associated with exactly one Release. This indicates that the
release/distribution in question contains this component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param debReleaseComponentHref
 @return ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest
*/
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsRead(ctx context.Context, debReleaseComponentHref string) ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest {
	return ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest{
		ApiService: a,
		ctx: ctx,
		debReleaseComponentHref: debReleaseComponentHref,
	}
}

// Execute executes the request
//  @return DebReleaseComponentResponse
func (a *ContentReleaseComponentsApiService) ContentDebReleaseComponentsReadExecute(r ContentReleaseComponentsApiContentDebReleaseComponentsReadRequest) (*DebReleaseComponentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebReleaseComponentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseComponentsApiService.ContentDebReleaseComponentsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{deb_release_component_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"deb_release_component_href"+"}", url.PathEscape(parameterValueToString(r.debReleaseComponentHref, "debReleaseComponentHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
