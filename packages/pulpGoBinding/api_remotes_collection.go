/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"reflect"
)


// RemotesCollectionApiService RemotesCollectionApi service
type RemotesCollectionApiService service

type RemotesCollectionApiRemotesAnsibleCollectionCreateRequest struct {
	ctx context.Context
	ApiService *RemotesCollectionApiService
	ansibleCollectionRemote *AnsibleCollectionRemote
}

func (r RemotesCollectionApiRemotesAnsibleCollectionCreateRequest) AnsibleCollectionRemote(ansibleCollectionRemote AnsibleCollectionRemote) RemotesCollectionApiRemotesAnsibleCollectionCreateRequest {
	r.ansibleCollectionRemote = &ansibleCollectionRemote
	return r
}

func (r RemotesCollectionApiRemotesAnsibleCollectionCreateRequest) Execute() (*AnsibleCollectionRemoteResponse, *http.Response, error) {
	return r.ApiService.RemotesAnsibleCollectionCreateExecute(r)
}

/*
RemotesAnsibleCollectionCreate Create a collection remote

ViewSet for Collection Remotes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RemotesCollectionApiRemotesAnsibleCollectionCreateRequest
*/
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionCreate(ctx context.Context) RemotesCollectionApiRemotesAnsibleCollectionCreateRequest {
	return RemotesCollectionApiRemotesAnsibleCollectionCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnsibleCollectionRemoteResponse
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionCreateExecute(r RemotesCollectionApiRemotesAnsibleCollectionCreateRequest) (*AnsibleCollectionRemoteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnsibleCollectionRemoteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemotesCollectionApiService.RemotesAnsibleCollectionCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/remotes/ansible/collection/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleCollectionRemote == nil {
		return localVarReturnValue, nil, reportError("ansibleCollectionRemote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleCollectionRemote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemotesCollectionApiRemotesAnsibleCollectionDeleteRequest struct {
	ctx context.Context
	ApiService *RemotesCollectionApiService
	ansibleCollectionRemoteHref string
}

func (r RemotesCollectionApiRemotesAnsibleCollectionDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RemotesAnsibleCollectionDeleteExecute(r)
}

/*
RemotesAnsibleCollectionDelete Delete a collection remote

Trigger an asynchronous delete task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleCollectionRemoteHref
 @return RemotesCollectionApiRemotesAnsibleCollectionDeleteRequest
*/
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionDelete(ctx context.Context, ansibleCollectionRemoteHref string) RemotesCollectionApiRemotesAnsibleCollectionDeleteRequest {
	return RemotesCollectionApiRemotesAnsibleCollectionDeleteRequest{
		ApiService: a,
		ctx: ctx,
		ansibleCollectionRemoteHref: ansibleCollectionRemoteHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionDeleteExecute(r RemotesCollectionApiRemotesAnsibleCollectionDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemotesCollectionApiService.RemotesAnsibleCollectionDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_collection_remote_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_collection_remote_href"+"}", url.PathEscape(parameterValueToString(r.ansibleCollectionRemoteHref, "ansibleCollectionRemoteHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemotesCollectionApiRemotesAnsibleCollectionListRequest struct {
	ctx context.Context
	ApiService *RemotesCollectionApiService
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	pulpLabelSelect *string
	pulpLastUpdated *time.Time
	pulpLastUpdatedGt *time.Time
	pulpLastUpdatedGte *time.Time
	pulpLastUpdatedLt *time.Time
	pulpLastUpdatedLte *time.Time
	pulpLastUpdatedRange *[]time.Time
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) Limit(limit int32) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) Name(name string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) NameContains(nameContains string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) NameIcontains(nameIcontains string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) NameIn(nameIn []string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name starts with value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) NameStartswith(nameStartswith string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) Offset(offset int32) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) Ordering(ordering []string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.ordering = &ordering
	return r
}

// Filter labels by search string
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) PulpLabelSelect(pulpLabelSelect string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results where pulp_last_updated matches value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) PulpLastUpdated(pulpLastUpdated time.Time) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.pulpLastUpdated = &pulpLastUpdated
	return r
}

// Filter results where pulp_last_updated is greater than value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) PulpLastUpdatedGt(pulpLastUpdatedGt time.Time) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.pulpLastUpdatedGt = &pulpLastUpdatedGt
	return r
}

// Filter results where pulp_last_updated is greater than or equal to value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) PulpLastUpdatedGte(pulpLastUpdatedGte time.Time) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.pulpLastUpdatedGte = &pulpLastUpdatedGte
	return r
}

// Filter results where pulp_last_updated is less than value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) PulpLastUpdatedLt(pulpLastUpdatedLt time.Time) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.pulpLastUpdatedLt = &pulpLastUpdatedLt
	return r
}

// Filter results where pulp_last_updated is less than or equal to value
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) PulpLastUpdatedLte(pulpLastUpdatedLte time.Time) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.pulpLastUpdatedLte = &pulpLastUpdatedLte
	return r
}

// Filter results where pulp_last_updated is between two comma separated values
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) PulpLastUpdatedRange(pulpLastUpdatedRange []time.Time) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.pulpLastUpdatedRange = &pulpLastUpdatedRange
	return r
}

// A list of fields to include in the response.
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) Fields(fields []string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) ExcludeFields(excludeFields []string) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RemotesCollectionApiRemotesAnsibleCollectionListRequest) Execute() (*PaginatedansibleCollectionRemoteResponseList, *http.Response, error) {
	return r.ApiService.RemotesAnsibleCollectionListExecute(r)
}

/*
RemotesAnsibleCollectionList List collection remotes

ViewSet for Collection Remotes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RemotesCollectionApiRemotesAnsibleCollectionListRequest
*/
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionList(ctx context.Context) RemotesCollectionApiRemotesAnsibleCollectionListRequest {
	return RemotesCollectionApiRemotesAnsibleCollectionListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedansibleCollectionRemoteResponseList
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionListExecute(r RemotesCollectionApiRemotesAnsibleCollectionListRequest) (*PaginatedansibleCollectionRemoteResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedansibleCollectionRemoteResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemotesCollectionApiService.RemotesAnsibleCollectionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/remotes/ansible/collection/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "")
	}
	if r.pulpLastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_last_updated", r.pulpLastUpdated, "")
	}
	if r.pulpLastUpdatedGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_last_updated__gt", r.pulpLastUpdatedGt, "")
	}
	if r.pulpLastUpdatedGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_last_updated__gte", r.pulpLastUpdatedGte, "")
	}
	if r.pulpLastUpdatedLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_last_updated__lt", r.pulpLastUpdatedLt, "")
	}
	if r.pulpLastUpdatedLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_last_updated__lte", r.pulpLastUpdatedLte, "")
	}
	if r.pulpLastUpdatedRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_last_updated__range", r.pulpLastUpdatedRange, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemotesCollectionApiRemotesAnsibleCollectionPartialUpdateRequest struct {
	ctx context.Context
	ApiService *RemotesCollectionApiService
	ansibleCollectionRemoteHref string
	patchedansibleCollectionRemote *PatchedansibleCollectionRemote
}

func (r RemotesCollectionApiRemotesAnsibleCollectionPartialUpdateRequest) PatchedansibleCollectionRemote(patchedansibleCollectionRemote PatchedansibleCollectionRemote) RemotesCollectionApiRemotesAnsibleCollectionPartialUpdateRequest {
	r.patchedansibleCollectionRemote = &patchedansibleCollectionRemote
	return r
}

func (r RemotesCollectionApiRemotesAnsibleCollectionPartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RemotesAnsibleCollectionPartialUpdateExecute(r)
}

/*
RemotesAnsibleCollectionPartialUpdate Update a collection remote

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleCollectionRemoteHref
 @return RemotesCollectionApiRemotesAnsibleCollectionPartialUpdateRequest
*/
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionPartialUpdate(ctx context.Context, ansibleCollectionRemoteHref string) RemotesCollectionApiRemotesAnsibleCollectionPartialUpdateRequest {
	return RemotesCollectionApiRemotesAnsibleCollectionPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		ansibleCollectionRemoteHref: ansibleCollectionRemoteHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionPartialUpdateExecute(r RemotesCollectionApiRemotesAnsibleCollectionPartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemotesCollectionApiService.RemotesAnsibleCollectionPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_collection_remote_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_collection_remote_href"+"}", url.PathEscape(parameterValueToString(r.ansibleCollectionRemoteHref, "ansibleCollectionRemoteHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedansibleCollectionRemote == nil {
		return localVarReturnValue, nil, reportError("patchedansibleCollectionRemote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedansibleCollectionRemote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemotesCollectionApiRemotesAnsibleCollectionReadRequest struct {
	ctx context.Context
	ApiService *RemotesCollectionApiService
	ansibleCollectionRemoteHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RemotesCollectionApiRemotesAnsibleCollectionReadRequest) Fields(fields []string) RemotesCollectionApiRemotesAnsibleCollectionReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RemotesCollectionApiRemotesAnsibleCollectionReadRequest) ExcludeFields(excludeFields []string) RemotesCollectionApiRemotesAnsibleCollectionReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RemotesCollectionApiRemotesAnsibleCollectionReadRequest) Execute() (*AnsibleCollectionRemoteResponse, *http.Response, error) {
	return r.ApiService.RemotesAnsibleCollectionReadExecute(r)
}

/*
RemotesAnsibleCollectionRead Inspect a collection remote

ViewSet for Collection Remotes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleCollectionRemoteHref
 @return RemotesCollectionApiRemotesAnsibleCollectionReadRequest
*/
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionRead(ctx context.Context, ansibleCollectionRemoteHref string) RemotesCollectionApiRemotesAnsibleCollectionReadRequest {
	return RemotesCollectionApiRemotesAnsibleCollectionReadRequest{
		ApiService: a,
		ctx: ctx,
		ansibleCollectionRemoteHref: ansibleCollectionRemoteHref,
	}
}

// Execute executes the request
//  @return AnsibleCollectionRemoteResponse
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionReadExecute(r RemotesCollectionApiRemotesAnsibleCollectionReadRequest) (*AnsibleCollectionRemoteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnsibleCollectionRemoteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemotesCollectionApiService.RemotesAnsibleCollectionRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_collection_remote_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_collection_remote_href"+"}", url.PathEscape(parameterValueToString(r.ansibleCollectionRemoteHref, "ansibleCollectionRemoteHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemotesCollectionApiRemotesAnsibleCollectionUpdateRequest struct {
	ctx context.Context
	ApiService *RemotesCollectionApiService
	ansibleCollectionRemoteHref string
	ansibleCollectionRemote *AnsibleCollectionRemote
}

func (r RemotesCollectionApiRemotesAnsibleCollectionUpdateRequest) AnsibleCollectionRemote(ansibleCollectionRemote AnsibleCollectionRemote) RemotesCollectionApiRemotesAnsibleCollectionUpdateRequest {
	r.ansibleCollectionRemote = &ansibleCollectionRemote
	return r
}

func (r RemotesCollectionApiRemotesAnsibleCollectionUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RemotesAnsibleCollectionUpdateExecute(r)
}

/*
RemotesAnsibleCollectionUpdate Update a collection remote

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleCollectionRemoteHref
 @return RemotesCollectionApiRemotesAnsibleCollectionUpdateRequest
*/
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionUpdate(ctx context.Context, ansibleCollectionRemoteHref string) RemotesCollectionApiRemotesAnsibleCollectionUpdateRequest {
	return RemotesCollectionApiRemotesAnsibleCollectionUpdateRequest{
		ApiService: a,
		ctx: ctx,
		ansibleCollectionRemoteHref: ansibleCollectionRemoteHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RemotesCollectionApiService) RemotesAnsibleCollectionUpdateExecute(r RemotesCollectionApiRemotesAnsibleCollectionUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemotesCollectionApiService.RemotesAnsibleCollectionUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_collection_remote_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_collection_remote_href"+"}", url.PathEscape(parameterValueToString(r.ansibleCollectionRemoteHref, "ansibleCollectionRemoteHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleCollectionRemote == nil {
		return localVarReturnValue, nil, reportError("ansibleCollectionRemote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleCollectionRemote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
