/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentguardsHeaderAPIService ContentguardsHeaderAPI service
type ContentguardsHeaderAPIService service

type ContentguardsHeaderAPIContentguardsCoreHeaderAddRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	headerContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderAddRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsHeaderAPIContentguardsCoreHeaderAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderAddRoleExecute(r)
}

/*
ContentguardsCoreHeaderAddRole Add a role

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param headerContentGuardHref
 @return ContentguardsHeaderAPIContentguardsCoreHeaderAddRoleRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderAddRole(ctx context.Context, headerContentGuardHref string) ContentguardsHeaderAPIContentguardsCoreHeaderAddRoleRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		headerContentGuardHref: headerContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderAddRoleExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{header_content_guard_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"header_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.headerContentGuardHref, "headerContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderCreateRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	pulpDomain string
	headerContentGuard *HeaderContentGuard
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderCreateRequest) HeaderContentGuard(headerContentGuard HeaderContentGuard) ContentguardsHeaderAPIContentguardsCoreHeaderCreateRequest {
	r.headerContentGuard = &headerContentGuard
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderCreateRequest) Execute() (*HeaderContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderCreateExecute(r)
}

/*
ContentguardsCoreHeaderCreate Create a header content guard

Content guard to protect the content app using a specific header.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentguardsHeaderAPIContentguardsCoreHeaderCreateRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderCreate(ctx context.Context, pulpDomain string) ContentguardsHeaderAPIContentguardsCoreHeaderCreateRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return HeaderContentGuardResponse
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderCreateExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderCreateRequest) (*HeaderContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HeaderContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/contentguards/core/header/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.headerContentGuard == nil {
		return localVarReturnValue, nil, reportError("headerContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.headerContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderDeleteRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	headerContentGuardHref string
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderDeleteExecute(r)
}

/*
ContentguardsCoreHeaderDelete Delete a header content guard

Content guard to protect the content app using a specific header.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param headerContentGuardHref
 @return ContentguardsHeaderAPIContentguardsCoreHeaderDeleteRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderDelete(ctx context.Context, headerContentGuardHref string) ContentguardsHeaderAPIContentguardsCoreHeaderDeleteRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderDeleteRequest{
		ApiService: a,
		ctx: ctx,
		headerContentGuardHref: headerContentGuardHref,
	}
}

// Execute executes the request
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderDeleteExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{header_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"header_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.headerContentGuardHref, "headerContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderListRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	pulpDomain string
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIexact *string
	nameIn *[]string
	nameIregex *string
	nameIstartswith *string
	nameRegex *string
	nameStartswith *string
	offset *int32
	ordering *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	q *string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) Limit(limit int32) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) Name(name string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) NameContains(nameContains string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) NameIcontains(nameIcontains string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name matches value
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) NameIexact(nameIexact string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.nameIexact = &nameIexact
	return r
}

// Filter results where name is in a comma-separated list of values
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) NameIn(nameIn []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name matches regex value
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) NameIregex(nameIregex string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.nameIregex = &nameIregex
	return r
}

// Filter results where name starts with value
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) NameIstartswith(nameIstartswith string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.nameIstartswith = &nameIstartswith
	return r
}

// Filter results where name matches regex value
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) NameRegex(nameRegex string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.nameRegex = &nameRegex
	return r
}

// Filter results where name starts with value
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) NameStartswith(nameStartswith string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) Offset(offset int32) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;description&#x60; - Description* &#x60;-description&#x60; - Description (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) Ordering(ordering []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) PrnIn(prnIn []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) PulpHrefIn(pulpHrefIn []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) PulpIdIn(pulpIdIn []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) Q(q string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.q = &q
	return r
}

// A list of fields to include in the response.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) Fields(fields []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) ExcludeFields(excludeFields []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) Execute() (*PaginatedHeaderContentGuardResponseList, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderListExecute(r)
}

/*
ContentguardsCoreHeaderList List header content guards

Content guard to protect the content app using a specific header.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentguardsHeaderAPIContentguardsCoreHeaderListRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderList(ctx context.Context, pulpDomain string) ContentguardsHeaderAPIContentguardsCoreHeaderListRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedHeaderContentGuardResponseList
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderListExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderListRequest) (*PaginatedHeaderContentGuardResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedHeaderContentGuardResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/contentguards/core/header/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "form", "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "form", "")
	}
	if r.nameIexact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iexact", r.nameIexact, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.nameIregex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iregex", r.nameIregex, "form", "")
	}
	if r.nameIstartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__istartswith", r.nameIstartswith, "form", "")
	}
	if r.nameRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__regex", r.nameRegex, "form", "")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	headerContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest) Fields(fields []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest) ExcludeFields(excludeFields []string) ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderListRolesExecute(r)
}

/*
ContentguardsCoreHeaderListRoles List roles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param headerContentGuardHref
 @return ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderListRoles(ctx context.Context, headerContentGuardHref string) ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest{
		ApiService: a,
		ctx: ctx,
		headerContentGuardHref: headerContentGuardHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderListRolesExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{header_content_guard_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"header_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.headerContentGuardHref, "headerContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	headerContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest) Fields(fields []string) ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest) ExcludeFields(excludeFields []string) ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderMyPermissionsExecute(r)
}

/*
ContentguardsCoreHeaderMyPermissions List user permissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param headerContentGuardHref
 @return ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderMyPermissions(ctx context.Context, headerContentGuardHref string) ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		headerContentGuardHref: headerContentGuardHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderMyPermissionsExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{header_content_guard_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"header_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.headerContentGuardHref, "headerContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	headerContentGuardHref string
	patchedHeaderContentGuard *PatchedHeaderContentGuard
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderPartialUpdateRequest) PatchedHeaderContentGuard(patchedHeaderContentGuard PatchedHeaderContentGuard) ContentguardsHeaderAPIContentguardsCoreHeaderPartialUpdateRequest {
	r.patchedHeaderContentGuard = &patchedHeaderContentGuard
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderPartialUpdateRequest) Execute() (*HeaderContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderPartialUpdateExecute(r)
}

/*
ContentguardsCoreHeaderPartialUpdate Update a header content guard

Content guard to protect the content app using a specific header.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param headerContentGuardHref
 @return ContentguardsHeaderAPIContentguardsCoreHeaderPartialUpdateRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderPartialUpdate(ctx context.Context, headerContentGuardHref string) ContentguardsHeaderAPIContentguardsCoreHeaderPartialUpdateRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		headerContentGuardHref: headerContentGuardHref,
	}
}

// Execute executes the request
//  @return HeaderContentGuardResponse
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderPartialUpdateExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderPartialUpdateRequest) (*HeaderContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HeaderContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{header_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"header_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.headerContentGuardHref, "headerContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedHeaderContentGuard == nil {
		return localVarReturnValue, nil, reportError("patchedHeaderContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedHeaderContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	headerContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest) Fields(fields []string) ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest) ExcludeFields(excludeFields []string) ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest) Execute() (*HeaderContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderReadExecute(r)
}

/*
ContentguardsCoreHeaderRead Inspect a header content guard

Content guard to protect the content app using a specific header.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param headerContentGuardHref
 @return ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderRead(ctx context.Context, headerContentGuardHref string) ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest{
		ApiService: a,
		ctx: ctx,
		headerContentGuardHref: headerContentGuardHref,
	}
}

// Execute executes the request
//  @return HeaderContentGuardResponse
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderReadExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderReadRequest) (*HeaderContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HeaderContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{header_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"header_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.headerContentGuardHref, "headerContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderRemoveRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	headerContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderRemoveRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsHeaderAPIContentguardsCoreHeaderRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderRemoveRoleExecute(r)
}

/*
ContentguardsCoreHeaderRemoveRole Remove a role

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param headerContentGuardHref
 @return ContentguardsHeaderAPIContentguardsCoreHeaderRemoveRoleRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderRemoveRole(ctx context.Context, headerContentGuardHref string) ContentguardsHeaderAPIContentguardsCoreHeaderRemoveRoleRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		headerContentGuardHref: headerContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderRemoveRoleExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{header_content_guard_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"header_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.headerContentGuardHref, "headerContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsHeaderAPIContentguardsCoreHeaderUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsHeaderAPIService
	headerContentGuardHref string
	headerContentGuard *HeaderContentGuard
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderUpdateRequest) HeaderContentGuard(headerContentGuard HeaderContentGuard) ContentguardsHeaderAPIContentguardsCoreHeaderUpdateRequest {
	r.headerContentGuard = &headerContentGuard
	return r
}

func (r ContentguardsHeaderAPIContentguardsCoreHeaderUpdateRequest) Execute() (*HeaderContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreHeaderUpdateExecute(r)
}

/*
ContentguardsCoreHeaderUpdate Update a header content guard

Content guard to protect the content app using a specific header.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param headerContentGuardHref
 @return ContentguardsHeaderAPIContentguardsCoreHeaderUpdateRequest
*/
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderUpdate(ctx context.Context, headerContentGuardHref string) ContentguardsHeaderAPIContentguardsCoreHeaderUpdateRequest {
	return ContentguardsHeaderAPIContentguardsCoreHeaderUpdateRequest{
		ApiService: a,
		ctx: ctx,
		headerContentGuardHref: headerContentGuardHref,
	}
}

// Execute executes the request
//  @return HeaderContentGuardResponse
func (a *ContentguardsHeaderAPIService) ContentguardsCoreHeaderUpdateExecute(r ContentguardsHeaderAPIContentguardsCoreHeaderUpdateRequest) (*HeaderContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HeaderContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsHeaderAPIService.ContentguardsCoreHeaderUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{header_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"header_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.headerContentGuardHref, "headerContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.headerContentGuard == nil {
		return localVarReturnValue, nil, reportError("headerContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.headerContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
