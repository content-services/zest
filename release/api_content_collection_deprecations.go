/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentCollectionDeprecationsApiService ContentCollectionDeprecationsApi service
type ContentCollectionDeprecationsApiService service

type ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsCreateRequest struct {
	ctx context.Context
	ApiService *ContentCollectionDeprecationsApiService
	ansibleCollection *AnsibleCollection
}

func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsCreateRequest) AnsibleCollection(ansibleCollection AnsibleCollection) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsCreateRequest {
	r.ansibleCollection = &ansibleCollection
	return r
}

func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsCreateRequest) Execute() (*AnsibleCollectionResponse, *http.Response, error) {
	return r.ApiService.ContentAnsibleCollectionDeprecationsCreateExecute(r)
}

/*
ContentAnsibleCollectionDeprecationsCreate Create an ansible collection deprecated

ViewSet for AnsibleCollectionDeprecated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsCreateRequest
*/
func (a *ContentCollectionDeprecationsApiService) ContentAnsibleCollectionDeprecationsCreate(ctx context.Context) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsCreateRequest {
	return ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnsibleCollectionResponse
func (a *ContentCollectionDeprecationsApiService) ContentAnsibleCollectionDeprecationsCreateExecute(r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsCreateRequest) (*AnsibleCollectionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnsibleCollectionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentCollectionDeprecationsApiService.ContentAnsibleCollectionDeprecationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/ansible/collection_deprecations/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleCollection == nil {
		return localVarReturnValue, nil, reportError("ansibleCollection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleCollection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest struct {
	ctx context.Context
	ApiService *ContentCollectionDeprecationsApiService
	limit *int32
	offset *int32
	ordering *[]string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) Limit(limit int32) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) Offset(offset int32) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) Ordering(ordering []string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	r.ordering = &ordering
	return r
}

// Repository Version referenced by HREF
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) RepositoryVersion(repositoryVersion string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// A list of fields to include in the response.
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) Fields(fields []string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) ExcludeFields(excludeFields []string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) Execute() (*PaginatedansibleCollectionResponseList, *http.Response, error) {
	return r.ApiService.ContentAnsibleCollectionDeprecationsListExecute(r)
}

/*
ContentAnsibleCollectionDeprecationsList List ansible collection deprecateds

ViewSet for AnsibleCollectionDeprecated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest
*/
func (a *ContentCollectionDeprecationsApiService) ContentAnsibleCollectionDeprecationsList(ctx context.Context) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest {
	return ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedansibleCollectionResponseList
func (a *ContentCollectionDeprecationsApiService) ContentAnsibleCollectionDeprecationsListExecute(r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsListRequest) (*PaginatedansibleCollectionResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedansibleCollectionResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentCollectionDeprecationsApiService.ContentAnsibleCollectionDeprecationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/ansible/collection_deprecations/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest struct {
	ctx context.Context
	ApiService *ContentCollectionDeprecationsApiService
	ansibleAnsibleCollectionDeprecatedHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest) Fields(fields []string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest) ExcludeFields(excludeFields []string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest) Execute() (*AnsibleCollectionResponse, *http.Response, error) {
	return r.ApiService.ContentAnsibleCollectionDeprecationsReadExecute(r)
}

/*
ContentAnsibleCollectionDeprecationsRead Inspect an ansible collection deprecated

ViewSet for AnsibleCollectionDeprecated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleCollectionDeprecatedHref
 @return ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest
*/
func (a *ContentCollectionDeprecationsApiService) ContentAnsibleCollectionDeprecationsRead(ctx context.Context, ansibleAnsibleCollectionDeprecatedHref string) ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest {
	return ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleCollectionDeprecatedHref: ansibleAnsibleCollectionDeprecatedHref,
	}
}

// Execute executes the request
//  @return AnsibleCollectionResponse
func (a *ContentCollectionDeprecationsApiService) ContentAnsibleCollectionDeprecationsReadExecute(r ContentCollectionDeprecationsApiContentAnsibleCollectionDeprecationsReadRequest) (*AnsibleCollectionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnsibleCollectionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentCollectionDeprecationsApiService.ContentAnsibleCollectionDeprecationsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_collection_deprecated_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_collection_deprecated_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleCollectionDeprecatedHref, "ansibleAnsibleCollectionDeprecatedHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
