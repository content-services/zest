/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DistributionsPullThroughAPIService DistributionsPullThroughAPI service
type DistributionsPullThroughAPIService service

type DistributionsPullThroughAPIDistributionsContainerPullThroughAddRoleRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	nestedRole *NestedRole
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughAddRoleRequest) NestedRole(nestedRole NestedRole) DistributionsPullThroughAPIDistributionsContainerPullThroughAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughAddRoleExecute(r)
}

/*
DistributionsContainerPullThroughAddRole Add a role

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughAddRoleRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughAddRole(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughAddRoleRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughAddRoleExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughCreateRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	pulpDomain string
	containerContainerPullThroughDistribution *ContainerContainerPullThroughDistribution
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughCreateRequest) ContainerContainerPullThroughDistribution(containerContainerPullThroughDistribution ContainerContainerPullThroughDistribution) DistributionsPullThroughAPIDistributionsContainerPullThroughCreateRequest {
	r.containerContainerPullThroughDistribution = &containerContainerPullThroughDistribution
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughCreateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughCreateExecute(r)
}

/*
DistributionsContainerPullThroughCreate Create a container pull through distribution

Trigger an asynchronous create task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughCreateRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughCreate(ctx context.Context, pulpDomain string) DistributionsPullThroughAPIDistributionsContainerPullThroughCreateRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughCreateExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughCreateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/distributions/container/pull-through/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.containerContainerPullThroughDistribution == nil {
		return localVarReturnValue, nil, reportError("containerContainerPullThroughDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.containerContainerPullThroughDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughDeleteRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughDeleteExecute(r)
}

/*
DistributionsContainerPullThroughDelete Delete a container pull through distribution

Trigger an asynchronous delete task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughDeleteRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughDelete(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughDeleteRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughDeleteRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughDeleteExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	pulpDomain string
	basePath *string
	basePathContains *string
	basePathIcontains *string
	basePathIn *[]string
	checkpoint *bool
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIexact *string
	nameIn *[]string
	nameIregex *string
	nameIstartswith *string
	nameRegex *string
	nameStartswith *string
	offset *int32
	ordering *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	repository *string
	repositoryIn *[]string
	withContent *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where base_path matches value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) BasePath(basePath string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.basePath = &basePath
	return r
}

// Filter results where base_path contains value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) BasePathContains(basePathContains string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.basePathContains = &basePathContains
	return r
}

// Filter results where base_path contains value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) BasePathIcontains(basePathIcontains string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.basePathIcontains = &basePathIcontains
	return r
}

// Filter results where base_path is in a comma-separated list of values
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) BasePathIn(basePathIn []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.basePathIn = &basePathIn
	return r
}

// Filter results where checkpoint matches value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Checkpoint(checkpoint bool) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.checkpoint = &checkpoint
	return r
}

// Number of results to return per page.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Limit(limit int32) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Name(name string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) NameContains(nameContains string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) NameIcontains(nameIcontains string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name matches value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) NameIexact(nameIexact string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.nameIexact = &nameIexact
	return r
}

// Filter results where name is in a comma-separated list of values
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) NameIn(nameIn []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name matches regex value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) NameIregex(nameIregex string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.nameIregex = &nameIregex
	return r
}

// Filter results where name starts with value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) NameIstartswith(nameIstartswith string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.nameIstartswith = &nameIstartswith
	return r
}

// Filter results where name matches regex value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) NameRegex(nameRegex string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.nameRegex = &nameRegex
	return r
}

// Filter results where name starts with value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) NameStartswith(nameStartswith string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Offset(offset int32) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;pulp_labels&#x60; - Pulp labels* &#x60;-pulp_labels&#x60; - Pulp labels (descending)* &#x60;base_path&#x60; - Base path* &#x60;-base_path&#x60; - Base path (descending)* &#x60;hidden&#x60; - Hidden* &#x60;-hidden&#x60; - Hidden (descending)* &#x60;checkpoint&#x60; - Checkpoint* &#x60;-checkpoint&#x60; - Checkpoint (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Ordering(ordering []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) PrnIn(prnIn []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) PulpHrefIn(pulpHrefIn []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) PulpIdIn(pulpIdIn []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) PulpLabelSelect(pulpLabelSelect string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Q(q string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.q = &q
	return r
}

// Filter results where repository matches value
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Repository(repository string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.repository = &repository
	return r
}

// Filter results where repository is in a comma-separated list of values
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) RepositoryIn(repositoryIn []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.repositoryIn = &repositoryIn
	return r
}

// Filter distributions based on the content served by them
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) WithContent(withContent string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.withContent = &withContent
	return r
}

// A list of fields to include in the response.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Fields(fields []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) ExcludeFields(excludeFields []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) Execute() (*PaginatedcontainerContainerPullThroughDistributionResponseList, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughListExecute(r)
}

/*
DistributionsContainerPullThroughList List container pull through distributions

A special pull-through Container Distribution that will reference distributions serving content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughList(ctx context.Context, pulpDomain string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedcontainerContainerPullThroughDistributionResponseList
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughListExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughListRequest) (*PaginatedcontainerContainerPullThroughDistributionResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedcontainerContainerPullThroughDistributionResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/distributions/container/pull-through/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.basePath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_path", r.basePath, "form", "")
	}
	if r.basePathContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_path__contains", r.basePathContains, "form", "")
	}
	if r.basePathIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_path__icontains", r.basePathIcontains, "form", "")
	}
	if r.basePathIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_path__in", r.basePathIn, "form", "csv")
	}
	if r.checkpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checkpoint", r.checkpoint, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "form", "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "form", "")
	}
	if r.nameIexact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iexact", r.nameIexact, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.nameIregex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iregex", r.nameIregex, "form", "")
	}
	if r.nameIstartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__istartswith", r.nameIstartswith, "form", "")
	}
	if r.nameRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__regex", r.nameRegex, "form", "")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository", r.repository, "form", "")
	}
	if r.repositoryIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository__in", r.repositoryIn, "form", "csv")
	}
	if r.withContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_content", r.withContent, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest) Fields(fields []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest) ExcludeFields(excludeFields []string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughListRolesExecute(r)
}

/*
DistributionsContainerPullThroughListRoles List roles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughListRoles(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughListRolesExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest) Fields(fields []string) DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest) ExcludeFields(excludeFields []string) DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughMyPermissionsExecute(r)
}

/*
DistributionsContainerPullThroughMyPermissions List user permissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughMyPermissions(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughMyPermissionsExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	patchedcontainerContainerPullThroughDistribution *PatchedcontainerContainerPullThroughDistribution
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughPartialUpdateRequest) PatchedcontainerContainerPullThroughDistribution(patchedcontainerContainerPullThroughDistribution PatchedcontainerContainerPullThroughDistribution) DistributionsPullThroughAPIDistributionsContainerPullThroughPartialUpdateRequest {
	r.patchedcontainerContainerPullThroughDistribution = &patchedcontainerContainerPullThroughDistribution
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughPartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughPartialUpdateExecute(r)
}

/*
DistributionsContainerPullThroughPartialUpdate Update a container pull through distribution

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughPartialUpdateRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughPartialUpdate(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughPartialUpdateRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughPartialUpdateExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughPartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedcontainerContainerPullThroughDistribution == nil {
		return localVarReturnValue, nil, reportError("patchedcontainerContainerPullThroughDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedcontainerContainerPullThroughDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest) Fields(fields []string) DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest) ExcludeFields(excludeFields []string) DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest) Execute() (*ContainerContainerPullThroughDistributionResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughReadExecute(r)
}

/*
DistributionsContainerPullThroughRead Inspect a container pull through distribution

A special pull-through Container Distribution that will reference distributions serving content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughRead(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return ContainerContainerPullThroughDistributionResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughReadExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughReadRequest) (*ContainerContainerPullThroughDistributionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContainerContainerPullThroughDistributionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughRemoveRoleRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	nestedRole *NestedRole
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughRemoveRoleRequest) NestedRole(nestedRole NestedRole) DistributionsPullThroughAPIDistributionsContainerPullThroughRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughRemoveRoleExecute(r)
}

/*
DistributionsContainerPullThroughRemoveRole Remove a role

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughRemoveRoleRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughRemoveRole(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughRemoveRoleRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughRemoveRoleExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughSetLabelRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	setLabel *SetLabel
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughSetLabelRequest) SetLabel(setLabel SetLabel) DistributionsPullThroughAPIDistributionsContainerPullThroughSetLabelRequest {
	r.setLabel = &setLabel
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughSetLabelRequest) Execute() (*SetLabelResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughSetLabelExecute(r)
}

/*
DistributionsContainerPullThroughSetLabel Set a label

Set a single pulp_label on the object to a specific value or null.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughSetLabelRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughSetLabel(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughSetLabelRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughSetLabelRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return SetLabelResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughSetLabelExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughSetLabelRequest) (*SetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughSetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}set_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setLabel == nil {
		return localVarReturnValue, nil, reportError("setLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughUnsetLabelRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	unsetLabel *UnsetLabel
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughUnsetLabelRequest) UnsetLabel(unsetLabel UnsetLabel) DistributionsPullThroughAPIDistributionsContainerPullThroughUnsetLabelRequest {
	r.unsetLabel = &unsetLabel
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughUnsetLabelRequest) Execute() (*UnsetLabelResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughUnsetLabelExecute(r)
}

/*
DistributionsContainerPullThroughUnsetLabel Unset a label

Unset a single pulp_label on the object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughUnsetLabelRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughUnsetLabel(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughUnsetLabelRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughUnsetLabelRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return UnsetLabelResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughUnsetLabelExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughUnsetLabelRequest) (*UnsetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughUnsetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}unset_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsetLabel == nil {
		return localVarReturnValue, nil, reportError("unsetLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsetLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsPullThroughAPIDistributionsContainerPullThroughUpdateRequest struct {
	ctx context.Context
	ApiService *DistributionsPullThroughAPIService
	containerContainerPullThroughDistributionHref string
	containerContainerPullThroughDistribution *ContainerContainerPullThroughDistribution
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughUpdateRequest) ContainerContainerPullThroughDistribution(containerContainerPullThroughDistribution ContainerContainerPullThroughDistribution) DistributionsPullThroughAPIDistributionsContainerPullThroughUpdateRequest {
	r.containerContainerPullThroughDistribution = &containerContainerPullThroughDistribution
	return r
}

func (r DistributionsPullThroughAPIDistributionsContainerPullThroughUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsContainerPullThroughUpdateExecute(r)
}

/*
DistributionsContainerPullThroughUpdate Update a container pull through distribution

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerContainerPullThroughDistributionHref
 @return DistributionsPullThroughAPIDistributionsContainerPullThroughUpdateRequest
*/
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughUpdate(ctx context.Context, containerContainerPullThroughDistributionHref string) DistributionsPullThroughAPIDistributionsContainerPullThroughUpdateRequest {
	return DistributionsPullThroughAPIDistributionsContainerPullThroughUpdateRequest{
		ApiService: a,
		ctx: ctx,
		containerContainerPullThroughDistributionHref: containerContainerPullThroughDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsPullThroughAPIService) DistributionsContainerPullThroughUpdateExecute(r DistributionsPullThroughAPIDistributionsContainerPullThroughUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsPullThroughAPIService.DistributionsContainerPullThroughUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_container_pull_through_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_container_pull_through_distribution_href"+"}", url.PathEscape(parameterValueToString(r.containerContainerPullThroughDistributionHref, "containerContainerPullThroughDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.containerContainerPullThroughDistribution == nil {
		return localVarReturnValue, nil, reportError("containerContainerPullThroughDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.containerContainerPullThroughDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
