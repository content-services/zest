/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// RepositoriesAnsibleApiService RepositoriesAnsibleApi service
type RepositoriesAnsibleApiService service

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleAddRoleRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	nestedRole *NestedRole
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleAddRoleRequest) NestedRole(nestedRole NestedRole) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleAddRoleExecute(r)
}

/*
RepositoriesAnsibleAnsibleAddRole Method for RepositoriesAnsibleAnsibleAddRole

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleAddRoleRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleAddRole(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleAddRoleRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleAddRoleExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCopyCollectionVersionRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	collectionVersionCopyMove *CollectionVersionCopyMove
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCopyCollectionVersionRequest) CollectionVersionCopyMove(collectionVersionCopyMove CollectionVersionCopyMove) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCopyCollectionVersionRequest {
	r.collectionVersionCopyMove = &collectionVersionCopyMove
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCopyCollectionVersionRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleCopyCollectionVersionExecute(r)
}

/*
RepositoriesAnsibleAnsibleCopyCollectionVersion Method for RepositoriesAnsibleAnsibleCopyCollectionVersion

Trigger an asynchronous task to copy collection versions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCopyCollectionVersionRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleCopyCollectionVersion(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCopyCollectionVersionRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCopyCollectionVersionRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleCopyCollectionVersionExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCopyCollectionVersionRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleCopyCollectionVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}copy_collection_version/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.collectionVersionCopyMove == nil {
		return localVarReturnValue, nil, reportError("collectionVersionCopyMove is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.collectionVersionCopyMove
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCreateRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepository *AnsibleAnsibleRepository
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCreateRequest) AnsibleAnsibleRepository(ansibleAnsibleRepository AnsibleAnsibleRepository) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCreateRequest {
	r.ansibleAnsibleRepository = &ansibleAnsibleRepository
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCreateRequest) Execute() (*AnsibleAnsibleRepositoryResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleCreateExecute(r)
}

/*
RepositoriesAnsibleAnsibleCreate Create an ansible repository

ViewSet for Ansible Repositories.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCreateRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleCreate(ctx context.Context) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCreateRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnsibleAnsibleRepositoryResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleCreateExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleCreateRequest) (*AnsibleAnsibleRepositoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnsibleAnsibleRepositoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/repositories/ansible/ansible/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleAnsibleRepository == nil {
		return localVarReturnValue, nil, reportError("ansibleAnsibleRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleAnsibleRepository
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleDeleteRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleDeleteExecute(r)
}

/*
RepositoriesAnsibleAnsibleDelete Delete an ansible repository

Trigger an asynchronous delete task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleDeleteRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleDelete(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleDeleteRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleDeleteRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleDeleteExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	remote *string
	retainRepoVersions *int32
	retainRepoVersionsGt *int32
	retainRepoVersionsGte *int32
	retainRepoVersionsIsnull *bool
	retainRepoVersionsLt *int32
	retainRepoVersionsLte *int32
	retainRepoVersionsNe *int32
	retainRepoVersionsRange *[]int32
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) Limit(limit int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) Name(name string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) NameContains(nameContains string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) NameIcontains(nameIcontains string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) NameIn(nameIn []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name starts with value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) NameStartswith(nameStartswith string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) Offset(offset int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.offset = &offset
	return r
}

// Ordering  * &#x60;pulp_id&#x60; - Pulp id * &#x60;-pulp_id&#x60; - Pulp id (descending) * &#x60;pulp_created&#x60; - Pulp created * &#x60;-pulp_created&#x60; - Pulp created (descending) * &#x60;pulp_last_updated&#x60; - Pulp last updated * &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending) * &#x60;pulp_type&#x60; - Pulp type * &#x60;-pulp_type&#x60; - Pulp type (descending) * &#x60;name&#x60; - Name * &#x60;-name&#x60; - Name (descending) * &#x60;pulp_labels&#x60; - Pulp labels * &#x60;-pulp_labels&#x60; - Pulp labels (descending) * &#x60;description&#x60; - Description * &#x60;-description&#x60; - Description (descending) * &#x60;next_version&#x60; - Next version * &#x60;-next_version&#x60; - Next version (descending) * &#x60;retain_repo_versions&#x60; - Retain repo versions * &#x60;-retain_repo_versions&#x60; - Retain repo versions (descending) * &#x60;user_hidden&#x60; - User hidden * &#x60;-user_hidden&#x60; - User hidden (descending) * &#x60;pk&#x60; - Pk * &#x60;-pk&#x60; - Pk (descending)
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) Ordering(ordering []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) PulpHrefIn(pulpHrefIn []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) PulpIdIn(pulpIdIn []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) PulpLabelSelect(pulpLabelSelect string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Foreign Key referenced by HREF
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) Remote(remote string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.remote = &remote
	return r
}

// Filter results where retain_repo_versions matches value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) RetainRepoVersions(retainRepoVersions int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.retainRepoVersions = &retainRepoVersions
	return r
}

// Filter results where retain_repo_versions is greater than value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) RetainRepoVersionsGt(retainRepoVersionsGt int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.retainRepoVersionsGt = &retainRepoVersionsGt
	return r
}

// Filter results where retain_repo_versions is greater than or equal to value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) RetainRepoVersionsGte(retainRepoVersionsGte int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.retainRepoVersionsGte = &retainRepoVersionsGte
	return r
}

// Filter results where retain_repo_versions has a null value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) RetainRepoVersionsIsnull(retainRepoVersionsIsnull bool) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.retainRepoVersionsIsnull = &retainRepoVersionsIsnull
	return r
}

// Filter results where retain_repo_versions is less than value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) RetainRepoVersionsLt(retainRepoVersionsLt int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.retainRepoVersionsLt = &retainRepoVersionsLt
	return r
}

// Filter results where retain_repo_versions is less than or equal to value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) RetainRepoVersionsLte(retainRepoVersionsLte int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.retainRepoVersionsLte = &retainRepoVersionsLte
	return r
}

// Filter results where retain_repo_versions not equal to value
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) RetainRepoVersionsNe(retainRepoVersionsNe int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.retainRepoVersionsNe = &retainRepoVersionsNe
	return r
}

// Filter results where retain_repo_versions is between two comma separated values
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) RetainRepoVersionsRange(retainRepoVersionsRange []int32) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.retainRepoVersionsRange = &retainRepoVersionsRange
	return r
}

// A list of fields to include in the response.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) Fields(fields []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) ExcludeFields(excludeFields []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) Execute() (*PaginatedansibleAnsibleRepositoryResponseList, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleListExecute(r)
}

/*
RepositoriesAnsibleAnsibleList List ansible repositorys

ViewSet for Ansible Repositories.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleList(ctx context.Context) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedansibleAnsibleRepositoryResponseList
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleListExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRequest) (*PaginatedansibleAnsibleRepositoryResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedansibleAnsibleRepositoryResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/repositories/ansible/ansible/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "")
	}
	if r.remote != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote", r.remote, "")
	}
	if r.retainRepoVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions", r.retainRepoVersions, "")
	}
	if r.retainRepoVersionsGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__gt", r.retainRepoVersionsGt, "")
	}
	if r.retainRepoVersionsGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__gte", r.retainRepoVersionsGte, "")
	}
	if r.retainRepoVersionsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__isnull", r.retainRepoVersionsIsnull, "")
	}
	if r.retainRepoVersionsLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__lt", r.retainRepoVersionsLt, "")
	}
	if r.retainRepoVersionsLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__lte", r.retainRepoVersionsLte, "")
	}
	if r.retainRepoVersionsNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__ne", r.retainRepoVersionsNe, "")
	}
	if r.retainRepoVersionsRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__range", r.retainRepoVersionsRange, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest) Fields(fields []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest) ExcludeFields(excludeFields []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleListRolesExecute(r)
}

/*
RepositoriesAnsibleAnsibleListRoles Method for RepositoriesAnsibleAnsibleListRoles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleListRoles(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleListRolesExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMarkRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	ansibleRepositoryMark *AnsibleRepositoryMark
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMarkRequest) AnsibleRepositoryMark(ansibleRepositoryMark AnsibleRepositoryMark) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMarkRequest {
	r.ansibleRepositoryMark = &ansibleRepositoryMark
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMarkRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleMarkExecute(r)
}

/*
RepositoriesAnsibleAnsibleMark Method for RepositoriesAnsibleAnsibleMark

Trigger an asynchronous task to mark Ansible content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMarkRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleMark(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMarkRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMarkRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleMarkExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMarkRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleMark")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}mark/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleRepositoryMark == nil {
		return localVarReturnValue, nil, reportError("ansibleRepositoryMark is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleRepositoryMark
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleModifyRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	repositoryAddRemoveContent *RepositoryAddRemoveContent
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleModifyRequest) RepositoryAddRemoveContent(repositoryAddRemoveContent RepositoryAddRemoveContent) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleModifyRequest {
	r.repositoryAddRemoveContent = &repositoryAddRemoveContent
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleModifyRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleModifyExecute(r)
}

/*
RepositoriesAnsibleAnsibleModify Modify Repository Content

Trigger an asynchronous task to create a new repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleModifyRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleModify(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleModifyRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleModifyRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleModifyExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleModifyRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleModify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}modify/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repositoryAddRemoveContent == nil {
		return localVarReturnValue, nil, reportError("repositoryAddRemoveContent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.repositoryAddRemoveContent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMoveCollectionVersionRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	collectionVersionCopyMove *CollectionVersionCopyMove
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMoveCollectionVersionRequest) CollectionVersionCopyMove(collectionVersionCopyMove CollectionVersionCopyMove) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMoveCollectionVersionRequest {
	r.collectionVersionCopyMove = &collectionVersionCopyMove
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMoveCollectionVersionRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleMoveCollectionVersionExecute(r)
}

/*
RepositoriesAnsibleAnsibleMoveCollectionVersion Method for RepositoriesAnsibleAnsibleMoveCollectionVersion

Trigger an asynchronous task to move collection versions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMoveCollectionVersionRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleMoveCollectionVersion(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMoveCollectionVersionRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMoveCollectionVersionRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleMoveCollectionVersionExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMoveCollectionVersionRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleMoveCollectionVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}move_collection_version/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.collectionVersionCopyMove == nil {
		return localVarReturnValue, nil, reportError("collectionVersionCopyMove is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.collectionVersionCopyMove
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest) Fields(fields []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest) ExcludeFields(excludeFields []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleMyPermissionsExecute(r)
}

/*
RepositoriesAnsibleAnsibleMyPermissions Method for RepositoriesAnsibleAnsibleMyPermissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleMyPermissions(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleMyPermissionsExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsiblePartialUpdateRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	patchedansibleAnsibleRepository *PatchedansibleAnsibleRepository
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsiblePartialUpdateRequest) PatchedansibleAnsibleRepository(patchedansibleAnsibleRepository PatchedansibleAnsibleRepository) RepositoriesAnsibleApiRepositoriesAnsibleAnsiblePartialUpdateRequest {
	r.patchedansibleAnsibleRepository = &patchedansibleAnsibleRepository
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsiblePartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsiblePartialUpdateExecute(r)
}

/*
RepositoriesAnsibleAnsiblePartialUpdate Update an ansible repository

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsiblePartialUpdateRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsiblePartialUpdate(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsiblePartialUpdateRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsiblePartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsiblePartialUpdateExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsiblePartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsiblePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedansibleAnsibleRepository == nil {
		return localVarReturnValue, nil, reportError("patchedansibleAnsibleRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedansibleAnsibleRepository
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest) Fields(fields []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest) ExcludeFields(excludeFields []string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest) Execute() (*AnsibleAnsibleRepositoryResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleReadExecute(r)
}

/*
RepositoriesAnsibleAnsibleRead Inspect an ansible repository

ViewSet for Ansible Repositories.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleRead(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AnsibleAnsibleRepositoryResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleReadExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleReadRequest) (*AnsibleAnsibleRepositoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnsibleAnsibleRepositoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRebuildMetadataRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	ansibleRepositoryRebuild *AnsibleRepositoryRebuild
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRebuildMetadataRequest) AnsibleRepositoryRebuild(ansibleRepositoryRebuild AnsibleRepositoryRebuild) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRebuildMetadataRequest {
	r.ansibleRepositoryRebuild = &ansibleRepositoryRebuild
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRebuildMetadataRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleRebuildMetadataExecute(r)
}

/*
RepositoriesAnsibleAnsibleRebuildMetadata Method for RepositoriesAnsibleAnsibleRebuildMetadata

Trigger an asynchronous task to rebuild Ansible content meta.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRebuildMetadataRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleRebuildMetadata(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRebuildMetadataRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRebuildMetadataRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleRebuildMetadataExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRebuildMetadataRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleRebuildMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}rebuild_metadata/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleRepositoryRebuild == nil {
		return localVarReturnValue, nil, reportError("ansibleRepositoryRebuild is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleRepositoryRebuild
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRemoveRoleRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	nestedRole *NestedRole
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRemoveRoleRequest) NestedRole(nestedRole NestedRole) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleRemoveRoleExecute(r)
}

/*
RepositoriesAnsibleAnsibleRemoveRole Method for RepositoriesAnsibleAnsibleRemoveRole

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRemoveRoleRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleRemoveRole(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRemoveRoleRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleRemoveRoleExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSignRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	ansibleRepositorySignature *AnsibleRepositorySignature
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSignRequest) AnsibleRepositorySignature(ansibleRepositorySignature AnsibleRepositorySignature) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSignRequest {
	r.ansibleRepositorySignature = &ansibleRepositorySignature
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSignRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleSignExecute(r)
}

/*
RepositoriesAnsibleAnsibleSign Method for RepositoriesAnsibleAnsibleSign

Trigger an asynchronous task to sign Ansible content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSignRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleSign(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSignRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSignRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleSignExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSignRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleSign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}sign/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleRepositorySignature == nil {
		return localVarReturnValue, nil, reportError("ansibleRepositorySignature is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleRepositorySignature
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSyncRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	ansibleRepositorySyncURL *AnsibleRepositorySyncURL
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSyncRequest) AnsibleRepositorySyncURL(ansibleRepositorySyncURL AnsibleRepositorySyncURL) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSyncRequest {
	r.ansibleRepositorySyncURL = &ansibleRepositorySyncURL
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSyncRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleSyncExecute(r)
}

/*
RepositoriesAnsibleAnsibleSync Method for RepositoriesAnsibleAnsibleSync

Trigger an asynchronous task to sync Ansible content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSyncRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleSync(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSyncRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSyncRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleSyncExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleSyncRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleSync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}sync/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleRepositorySyncURL == nil {
		return localVarReturnValue, nil, reportError("ansibleRepositorySyncURL is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleRepositorySyncURL
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUnmarkRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	ansibleRepositoryMark *AnsibleRepositoryMark
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUnmarkRequest) AnsibleRepositoryMark(ansibleRepositoryMark AnsibleRepositoryMark) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUnmarkRequest {
	r.ansibleRepositoryMark = &ansibleRepositoryMark
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUnmarkRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleUnmarkExecute(r)
}

/*
RepositoriesAnsibleAnsibleUnmark Method for RepositoriesAnsibleAnsibleUnmark

Trigger an asynchronous task to unmark Ansible content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUnmarkRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleUnmark(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUnmarkRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUnmarkRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleUnmarkExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUnmarkRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleUnmark")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}unmark/"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleRepositoryMark == nil {
		return localVarReturnValue, nil, reportError("ansibleRepositoryMark is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleRepositoryMark
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUpdateRequest struct {
	ctx context.Context
	ApiService *RepositoriesAnsibleApiService
	ansibleAnsibleRepositoryHref string
	ansibleAnsibleRepository *AnsibleAnsibleRepository
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUpdateRequest) AnsibleAnsibleRepository(ansibleAnsibleRepository AnsibleAnsibleRepository) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUpdateRequest {
	r.ansibleAnsibleRepository = &ansibleAnsibleRepository
	return r
}

func (r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesAnsibleAnsibleUpdateExecute(r)
}

/*
RepositoriesAnsibleAnsibleUpdate Update an ansible repository

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleRepositoryHref
 @return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUpdateRequest
*/
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleUpdate(ctx context.Context, ansibleAnsibleRepositoryHref string) RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUpdateRequest {
	return RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUpdateRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleRepositoryHref: ansibleAnsibleRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesAnsibleApiService) RepositoriesAnsibleAnsibleUpdateExecute(r RepositoriesAnsibleApiRepositoriesAnsibleAnsibleUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAnsibleApiService.RepositoriesAnsibleAnsibleUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_repository_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_repository_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleRepositoryHref, "ansibleAnsibleRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleAnsibleRepository == nil {
		return localVarReturnValue, nil, reportError("ansibleAnsibleRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleAnsibleRepository
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
