/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// PulpAnsibleDefaultApiV3NamespacesApiService PulpAnsibleDefaultApiV3NamespacesApi service
type PulpAnsibleDefaultApiV3NamespacesApiService service

type PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest struct {
	ctx context.Context
	ApiService *PulpAnsibleDefaultApiV3NamespacesApiService
	company *string
	companyContains *string
	companyIcontains *string
	companyIn *[]string
	companyStartswith *string
	limit *int32
	metadataSha256 *string
	metadataSha256In *[]string
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	fields *[]string
	excludeFields *[]string
}

// Filter results where company matches value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) Company(company string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.company = &company
	return r
}

// Filter results where company contains value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) CompanyContains(companyContains string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.companyContains = &companyContains
	return r
}

// Filter results where company contains value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) CompanyIcontains(companyIcontains string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.companyIcontains = &companyIcontains
	return r
}

// Filter results where company is in a comma-separated list of values
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) CompanyIn(companyIn []string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.companyIn = &companyIn
	return r
}

// Filter results where company starts with value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) CompanyStartswith(companyStartswith string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.companyStartswith = &companyStartswith
	return r
}

// Number of results to return per page.
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) Limit(limit int32) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.limit = &limit
	return r
}

// Filter results where metadata_sha256 matches value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) MetadataSha256(metadataSha256 string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.metadataSha256 = &metadataSha256
	return r
}

// Filter results where metadata_sha256 is in a comma-separated list of values
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) MetadataSha256In(metadataSha256In []string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.metadataSha256In = &metadataSha256In
	return r
}

// Filter results where name matches value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) Name(name string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) NameContains(nameContains string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) NameIcontains(nameIcontains string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) NameIn(nameIn []string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name starts with value
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) NameStartswith(nameStartswith string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) Offset(offset int32) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) Ordering(ordering []string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.ordering = &ordering
	return r
}

// A list of fields to include in the response.
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) Fields(fields []string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) ExcludeFields(excludeFields []string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) Execute() (*PaginatedansibleAnsibleNamespaceMetadataResponseList, *http.Response, error) {
	return r.ApiService.PulpAnsibleGalaxyDefaultApiV3NamespacesListExecute(r)
}

/*
PulpAnsibleGalaxyDefaultApiV3NamespacesList Method for PulpAnsibleGalaxyDefaultApiV3NamespacesList

Legacy v3 endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest

Deprecated
*/
func (a *PulpAnsibleDefaultApiV3NamespacesApiService) PulpAnsibleGalaxyDefaultApiV3NamespacesList(ctx context.Context) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest {
	return PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedansibleAnsibleNamespaceMetadataResponseList
// Deprecated
func (a *PulpAnsibleDefaultApiV3NamespacesApiService) PulpAnsibleGalaxyDefaultApiV3NamespacesListExecute(r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesListRequest) (*PaginatedansibleAnsibleNamespaceMetadataResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedansibleAnsibleNamespaceMetadataResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PulpAnsibleDefaultApiV3NamespacesApiService.PulpAnsibleGalaxyDefaultApiV3NamespacesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp_ansible/galaxy/default/api/v3/namespaces/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.company != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company", r.company, "")
	}
	if r.companyContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company__contains", r.companyContains, "")
	}
	if r.companyIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company__icontains", r.companyIcontains, "")
	}
	if r.companyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company__in", r.companyIn, "csv")
	}
	if r.companyStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company__startswith", r.companyStartswith, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.metadataSha256 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_sha256", r.metadataSha256, "")
	}
	if r.metadataSha256In != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_sha256__in", r.metadataSha256In, "csv")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest struct {
	ctx context.Context
	ApiService *PulpAnsibleDefaultApiV3NamespacesApiService
	name string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest) Fields(fields []string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest) ExcludeFields(excludeFields []string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest) Execute() (*AnsibleAnsibleNamespaceMetadataResponse, *http.Response, error) {
	return r.ApiService.PulpAnsibleGalaxyDefaultApiV3NamespacesReadExecute(r)
}

/*
PulpAnsibleGalaxyDefaultApiV3NamespacesRead Method for PulpAnsibleGalaxyDefaultApiV3NamespacesRead

Legacy v3 endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest

Deprecated
*/
func (a *PulpAnsibleDefaultApiV3NamespacesApiService) PulpAnsibleGalaxyDefaultApiV3NamespacesRead(ctx context.Context, name string) PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest {
	return PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return AnsibleAnsibleNamespaceMetadataResponse
// Deprecated
func (a *PulpAnsibleDefaultApiV3NamespacesApiService) PulpAnsibleGalaxyDefaultApiV3NamespacesReadExecute(r PulpAnsibleDefaultApiV3NamespacesApiPulpAnsibleGalaxyDefaultApiV3NamespacesReadRequest) (*AnsibleAnsibleNamespaceMetadataResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnsibleAnsibleNamespaceMetadataResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PulpAnsibleDefaultApiV3NamespacesApiService.PulpAnsibleGalaxyDefaultApiV3NamespacesRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp_ansible/galaxy/default/api/v3/namespaces/{name}/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
