/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"os"
)

// checks if the ContentScan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentScan{}

// ContentScan A serializer for package scan.
type ContentScan struct {
	// RepositoryVersion HREF with the packages to be checked.
	RepoVersion NullableString `json:"repo_version,omitempty"`
	// package-lock.json file with the definition of dependencies to be checked.
	PackageJson **os.File `json:"package_json,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContentScan ContentScan

// NewContentScan instantiates a new ContentScan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentScan() *ContentScan {
	this := ContentScan{}
	return &this
}

// NewContentScanWithDefaults instantiates a new ContentScan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentScanWithDefaults() *ContentScan {
	this := ContentScan{}
	return &this
}

// GetRepoVersion returns the RepoVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentScan) GetRepoVersion() string {
	if o == nil || IsNil(o.RepoVersion.Get()) {
		var ret string
		return ret
	}
	return *o.RepoVersion.Get()
}

// GetRepoVersionOk returns a tuple with the RepoVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentScan) GetRepoVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepoVersion.Get(), o.RepoVersion.IsSet()
}

// HasRepoVersion returns a boolean if a field has been set.
func (o *ContentScan) HasRepoVersion() bool {
	if o != nil && o.RepoVersion.IsSet() {
		return true
	}

	return false
}

// SetRepoVersion gets a reference to the given NullableString and assigns it to the RepoVersion field.
func (o *ContentScan) SetRepoVersion(v string) {
	o.RepoVersion.Set(&v)
}
// SetRepoVersionNil sets the value for RepoVersion to be an explicit nil
func (o *ContentScan) SetRepoVersionNil() {
	o.RepoVersion.Set(nil)
}

// UnsetRepoVersion ensures that no value is present for RepoVersion, not even an explicit nil
func (o *ContentScan) UnsetRepoVersion() {
	o.RepoVersion.Unset()
}

// GetPackageJson returns the PackageJson field value if set, zero value otherwise.
func (o *ContentScan) GetPackageJson() *os.File {
	if o == nil || IsNil(o.PackageJson) {
		var ret *os.File
		return ret
	}
	return *o.PackageJson
}

// GetPackageJsonOk returns a tuple with the PackageJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentScan) GetPackageJsonOk() (**os.File, bool) {
	if o == nil || IsNil(o.PackageJson) {
		return nil, false
	}
	return o.PackageJson, true
}

// HasPackageJson returns a boolean if a field has been set.
func (o *ContentScan) HasPackageJson() bool {
	if o != nil && !IsNil(o.PackageJson) {
		return true
	}

	return false
}

// SetPackageJson gets a reference to the given *os.File and assigns it to the PackageJson field.
func (o *ContentScan) SetPackageJson(v *os.File) {
	o.PackageJson = &v
}

func (o ContentScan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentScan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RepoVersion.IsSet() {
		toSerialize["repo_version"] = o.RepoVersion.Get()
	}
	if !IsNil(o.PackageJson) {
		toSerialize["package_json"] = o.PackageJson
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContentScan) UnmarshalJSON(data []byte) (err error) {
	varContentScan := _ContentScan{}

	err = json.Unmarshal(data, &varContentScan)

	if err != nil {
		return err
	}

	*o = ContentScan(varContentScan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "repo_version")
		delete(additionalProperties, "package_json")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContentScan struct {
	value *ContentScan
	isSet bool
}

func (v NullableContentScan) Get() *ContentScan {
	return v.value
}

func (v *NullableContentScan) Set(val *ContentScan) {
	v.value = val
	v.isSet = true
}

func (v NullableContentScan) IsSet() bool {
	return v.isSet
}

func (v *NullableContentScan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentScan(val *ContentScan) *NullableContentScan {
	return &NullableContentScan{value: val, isSet: true}
}

func (v NullableContentScan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentScan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


