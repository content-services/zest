/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentguardsCompositeAPIService ContentguardsCompositeAPI service
type ContentguardsCompositeAPIService service

type ContentguardsCompositeAPIContentguardsCoreCompositeAddRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	compositeContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeAddRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsCompositeAPIContentguardsCoreCompositeAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeAddRoleExecute(r)
}

/*
ContentguardsCoreCompositeAddRole Add a role

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param compositeContentGuardHref
 @return ContentguardsCompositeAPIContentguardsCoreCompositeAddRoleRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeAddRole(ctx context.Context, compositeContentGuardHref string) ContentguardsCompositeAPIContentguardsCoreCompositeAddRoleRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		compositeContentGuardHref: compositeContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeAddRoleExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{composite_content_guard_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"composite_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.compositeContentGuardHref, "compositeContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositeCreateRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	pulpDomain string
	compositeContentGuard *CompositeContentGuard
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeCreateRequest) CompositeContentGuard(compositeContentGuard CompositeContentGuard) ContentguardsCompositeAPIContentguardsCoreCompositeCreateRequest {
	r.compositeContentGuard = &compositeContentGuard
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeCreateRequest) Execute() (*CompositeContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeCreateExecute(r)
}

/*
ContentguardsCoreCompositeCreate Create a composite content guard

Content guard that queries a list-of content-guards for access permissions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentguardsCompositeAPIContentguardsCoreCompositeCreateRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeCreate(ctx context.Context, pulpDomain string) ContentguardsCompositeAPIContentguardsCoreCompositeCreateRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return CompositeContentGuardResponse
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeCreateExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeCreateRequest) (*CompositeContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompositeContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/contentguards/core/composite/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.compositeContentGuard == nil {
		return localVarReturnValue, nil, reportError("compositeContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.compositeContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositeDeleteRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	compositeContentGuardHref string
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeDeleteExecute(r)
}

/*
ContentguardsCoreCompositeDelete Delete a composite content guard

Content guard that queries a list-of content-guards for access permissions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param compositeContentGuardHref
 @return ContentguardsCompositeAPIContentguardsCoreCompositeDeleteRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeDelete(ctx context.Context, compositeContentGuardHref string) ContentguardsCompositeAPIContentguardsCoreCompositeDeleteRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeDeleteRequest{
		ApiService: a,
		ctx: ctx,
		compositeContentGuardHref: compositeContentGuardHref,
	}
}

// Execute executes the request
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeDeleteExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{composite_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"composite_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.compositeContentGuardHref, "compositeContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositeListRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	pulpDomain string
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIexact *string
	nameIn *[]string
	nameIregex *string
	nameIstartswith *string
	nameRegex *string
	nameStartswith *string
	offset *int32
	ordering *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	q *string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) Limit(limit int32) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) Name(name string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) NameContains(nameContains string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) NameIcontains(nameIcontains string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name matches value
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) NameIexact(nameIexact string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.nameIexact = &nameIexact
	return r
}

// Filter results where name is in a comma-separated list of values
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) NameIn(nameIn []string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name matches regex value
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) NameIregex(nameIregex string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.nameIregex = &nameIregex
	return r
}

// Filter results where name starts with value
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) NameIstartswith(nameIstartswith string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.nameIstartswith = &nameIstartswith
	return r
}

// Filter results where name matches regex value
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) NameRegex(nameRegex string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.nameRegex = &nameRegex
	return r
}

// Filter results where name starts with value
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) NameStartswith(nameStartswith string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) Offset(offset int32) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;description&#x60; - Description* &#x60;-description&#x60; - Description (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) Ordering(ordering []string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) PulpHrefIn(pulpHrefIn []string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) PulpIdIn(pulpIdIn []string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) Q(q string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.q = &q
	return r
}

// A list of fields to include in the response.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) Fields(fields []string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) ExcludeFields(excludeFields []string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) Execute() (*PaginatedCompositeContentGuardResponseList, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeListExecute(r)
}

/*
ContentguardsCoreCompositeList List composite content guards

Content guard that queries a list-of content-guards for access permissions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentguardsCompositeAPIContentguardsCoreCompositeListRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeList(ctx context.Context, pulpDomain string) ContentguardsCompositeAPIContentguardsCoreCompositeListRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedCompositeContentGuardResponseList
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeListExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeListRequest) (*PaginatedCompositeContentGuardResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCompositeContentGuardResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/contentguards/core/composite/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIexact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iexact", r.nameIexact, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameIregex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iregex", r.nameIregex, "")
	}
	if r.nameIstartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__istartswith", r.nameIstartswith, "")
	}
	if r.nameRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__regex", r.nameRegex, "")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "csv")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	compositeContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest) Fields(fields []string) ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest) ExcludeFields(excludeFields []string) ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeListRolesExecute(r)
}

/*
ContentguardsCoreCompositeListRoles List roles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param compositeContentGuardHref
 @return ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeListRoles(ctx context.Context, compositeContentGuardHref string) ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest{
		ApiService: a,
		ctx: ctx,
		compositeContentGuardHref: compositeContentGuardHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeListRolesExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{composite_content_guard_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"composite_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.compositeContentGuardHref, "compositeContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	compositeContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest) Fields(fields []string) ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest) ExcludeFields(excludeFields []string) ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeMyPermissionsExecute(r)
}

/*
ContentguardsCoreCompositeMyPermissions List user permissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param compositeContentGuardHref
 @return ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeMyPermissions(ctx context.Context, compositeContentGuardHref string) ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		compositeContentGuardHref: compositeContentGuardHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeMyPermissionsExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{composite_content_guard_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"composite_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.compositeContentGuardHref, "compositeContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositePartialUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	compositeContentGuardHref string
	patchedCompositeContentGuard *PatchedCompositeContentGuard
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositePartialUpdateRequest) PatchedCompositeContentGuard(patchedCompositeContentGuard PatchedCompositeContentGuard) ContentguardsCompositeAPIContentguardsCoreCompositePartialUpdateRequest {
	r.patchedCompositeContentGuard = &patchedCompositeContentGuard
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositePartialUpdateRequest) Execute() (*CompositeContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositePartialUpdateExecute(r)
}

/*
ContentguardsCoreCompositePartialUpdate Update a composite content guard

Content guard that queries a list-of content-guards for access permissions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param compositeContentGuardHref
 @return ContentguardsCompositeAPIContentguardsCoreCompositePartialUpdateRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositePartialUpdate(ctx context.Context, compositeContentGuardHref string) ContentguardsCompositeAPIContentguardsCoreCompositePartialUpdateRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositePartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		compositeContentGuardHref: compositeContentGuardHref,
	}
}

// Execute executes the request
//  @return CompositeContentGuardResponse
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositePartialUpdateExecute(r ContentguardsCompositeAPIContentguardsCoreCompositePartialUpdateRequest) (*CompositeContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompositeContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{composite_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"composite_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.compositeContentGuardHref, "compositeContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedCompositeContentGuard == nil {
		return localVarReturnValue, nil, reportError("patchedCompositeContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCompositeContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	compositeContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest) Fields(fields []string) ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest) ExcludeFields(excludeFields []string) ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest) Execute() (*CompositeContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeReadExecute(r)
}

/*
ContentguardsCoreCompositeRead Inspect a composite content guard

Content guard that queries a list-of content-guards for access permissions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param compositeContentGuardHref
 @return ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeRead(ctx context.Context, compositeContentGuardHref string) ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest{
		ApiService: a,
		ctx: ctx,
		compositeContentGuardHref: compositeContentGuardHref,
	}
}

// Execute executes the request
//  @return CompositeContentGuardResponse
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeReadExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeReadRequest) (*CompositeContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompositeContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{composite_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"composite_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.compositeContentGuardHref, "compositeContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositeRemoveRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	compositeContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeRemoveRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsCompositeAPIContentguardsCoreCompositeRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeRemoveRoleExecute(r)
}

/*
ContentguardsCoreCompositeRemoveRole Remove a role

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param compositeContentGuardHref
 @return ContentguardsCompositeAPIContentguardsCoreCompositeRemoveRoleRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeRemoveRole(ctx context.Context, compositeContentGuardHref string) ContentguardsCompositeAPIContentguardsCoreCompositeRemoveRoleRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		compositeContentGuardHref: compositeContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeRemoveRoleExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{composite_content_guard_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"composite_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.compositeContentGuardHref, "compositeContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsCompositeAPIContentguardsCoreCompositeUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsCompositeAPIService
	compositeContentGuardHref string
	compositeContentGuard *CompositeContentGuard
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeUpdateRequest) CompositeContentGuard(compositeContentGuard CompositeContentGuard) ContentguardsCompositeAPIContentguardsCoreCompositeUpdateRequest {
	r.compositeContentGuard = &compositeContentGuard
	return r
}

func (r ContentguardsCompositeAPIContentguardsCoreCompositeUpdateRequest) Execute() (*CompositeContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsCoreCompositeUpdateExecute(r)
}

/*
ContentguardsCoreCompositeUpdate Update a composite content guard

Content guard that queries a list-of content-guards for access permissions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param compositeContentGuardHref
 @return ContentguardsCompositeAPIContentguardsCoreCompositeUpdateRequest
*/
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeUpdate(ctx context.Context, compositeContentGuardHref string) ContentguardsCompositeAPIContentguardsCoreCompositeUpdateRequest {
	return ContentguardsCompositeAPIContentguardsCoreCompositeUpdateRequest{
		ApiService: a,
		ctx: ctx,
		compositeContentGuardHref: compositeContentGuardHref,
	}
}

// Execute executes the request
//  @return CompositeContentGuardResponse
func (a *ContentguardsCompositeAPIService) ContentguardsCoreCompositeUpdateExecute(r ContentguardsCompositeAPIContentguardsCoreCompositeUpdateRequest) (*CompositeContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompositeContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsCompositeAPIService.ContentguardsCoreCompositeUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{composite_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"composite_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.compositeContentGuardHref, "compositeContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.compositeContentGuard == nil {
		return localVarReturnValue, nil, reportError("compositeContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.compositeContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
