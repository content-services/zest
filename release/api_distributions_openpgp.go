/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DistributionsOpenpgpAPIService DistributionsOpenpgpAPI service
type DistributionsOpenpgpAPIService service

type DistributionsOpenpgpAPIDistributionsCoreOpenpgpCreateRequest struct {
	ctx context.Context
	ApiService *DistributionsOpenpgpAPIService
	pulpDomain string
	openPGPDistribution *OpenPGPDistribution
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpCreateRequest) OpenPGPDistribution(openPGPDistribution OpenPGPDistribution) DistributionsOpenpgpAPIDistributionsCoreOpenpgpCreateRequest {
	r.openPGPDistribution = &openPGPDistribution
	return r
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpCreateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsCoreOpenpgpCreateExecute(r)
}

/*
DistributionsCoreOpenpgpCreate Create an open pgp distribution

Trigger an asynchronous create task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return DistributionsOpenpgpAPIDistributionsCoreOpenpgpCreateRequest
*/
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpCreate(ctx context.Context, pulpDomain string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpCreateRequest {
	return DistributionsOpenpgpAPIDistributionsCoreOpenpgpCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpCreateExecute(r DistributionsOpenpgpAPIDistributionsCoreOpenpgpCreateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsOpenpgpAPIService.DistributionsCoreOpenpgpCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/distributions/core/openpgp/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.openPGPDistribution == nil {
		return localVarReturnValue, nil, reportError("openPGPDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.openPGPDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsOpenpgpAPIDistributionsCoreOpenpgpDeleteRequest struct {
	ctx context.Context
	ApiService *DistributionsOpenpgpAPIService
	openPGPDistributionHref string
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsCoreOpenpgpDeleteExecute(r)
}

/*
DistributionsCoreOpenpgpDelete Delete an open pgp distribution

Trigger an asynchronous delete task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPDistributionHref
 @return DistributionsOpenpgpAPIDistributionsCoreOpenpgpDeleteRequest
*/
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpDelete(ctx context.Context, openPGPDistributionHref string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpDeleteRequest {
	return DistributionsOpenpgpAPIDistributionsCoreOpenpgpDeleteRequest{
		ApiService: a,
		ctx: ctx,
		openPGPDistributionHref: openPGPDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpDeleteExecute(r DistributionsOpenpgpAPIDistributionsCoreOpenpgpDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsOpenpgpAPIService.DistributionsCoreOpenpgpDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_distribution_href"+"}", url.PathEscape(parameterValueToString(r.openPGPDistributionHref, "openPGPDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest struct {
	ctx context.Context
	ApiService *DistributionsOpenpgpAPIService
	pulpDomain string
	limit *int32
	offset *int32
	ordering *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	repositoryVersion *string
	withContent *string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) Limit(limit int32) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) Offset(offset int32) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;pulp_labels&#x60; - Pulp labels* &#x60;-pulp_labels&#x60; - Pulp labels (descending)* &#x60;base_path&#x60; - Base path* &#x60;-base_path&#x60; - Base path (descending)* &#x60;hidden&#x60; - Hidden* &#x60;-hidden&#x60; - Hidden (descending)* &#x60;checkpoint&#x60; - Checkpoint* &#x60;-checkpoint&#x60; - Checkpoint (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) Ordering(ordering []string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) PrnIn(prnIn []string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) PulpHrefIn(pulpHrefIn []string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) PulpIdIn(pulpIdIn []string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) PulpLabelSelect(pulpLabelSelect string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) Q(q string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.q = &q
	return r
}

// Filter results where repository_version matches value
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) RepositoryVersion(repositoryVersion string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Filter distributions based on the content served by them
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) WithContent(withContent string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.withContent = &withContent
	return r
}

// A list of fields to include in the response.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) Fields(fields []string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) ExcludeFields(excludeFields []string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) Execute() (*PaginatedOpenPGPDistributionResponseList, *http.Response, error) {
	return r.ApiService.DistributionsCoreOpenpgpListExecute(r)
}

/*
DistributionsCoreOpenpgpList List open pgp distributions

Provides read and list methods and also provides asynchronous CUD methods to dispatch taskswith reservation that lock all Distributions preventing race conditions during base_pathchecking.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest
*/
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpList(ctx context.Context, pulpDomain string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest {
	return DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedOpenPGPDistributionResponseList
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpListExecute(r DistributionsOpenpgpAPIDistributionsCoreOpenpgpListRequest) (*PaginatedOpenPGPDistributionResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedOpenPGPDistributionResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsOpenpgpAPIService.DistributionsCoreOpenpgpList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/distributions/core/openpgp/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "form", "")
	}
	if r.withContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_content", r.withContent, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsOpenpgpAPIDistributionsCoreOpenpgpPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DistributionsOpenpgpAPIService
	openPGPDistributionHref string
	patchedOpenPGPDistribution *PatchedOpenPGPDistribution
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpPartialUpdateRequest) PatchedOpenPGPDistribution(patchedOpenPGPDistribution PatchedOpenPGPDistribution) DistributionsOpenpgpAPIDistributionsCoreOpenpgpPartialUpdateRequest {
	r.patchedOpenPGPDistribution = &patchedOpenPGPDistribution
	return r
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpPartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsCoreOpenpgpPartialUpdateExecute(r)
}

/*
DistributionsCoreOpenpgpPartialUpdate Update an open pgp distribution

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPDistributionHref
 @return DistributionsOpenpgpAPIDistributionsCoreOpenpgpPartialUpdateRequest
*/
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpPartialUpdate(ctx context.Context, openPGPDistributionHref string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpPartialUpdateRequest {
	return DistributionsOpenpgpAPIDistributionsCoreOpenpgpPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		openPGPDistributionHref: openPGPDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpPartialUpdateExecute(r DistributionsOpenpgpAPIDistributionsCoreOpenpgpPartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsOpenpgpAPIService.DistributionsCoreOpenpgpPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_distribution_href"+"}", url.PathEscape(parameterValueToString(r.openPGPDistributionHref, "openPGPDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedOpenPGPDistribution == nil {
		return localVarReturnValue, nil, reportError("patchedOpenPGPDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedOpenPGPDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest struct {
	ctx context.Context
	ApiService *DistributionsOpenpgpAPIService
	openPGPDistributionHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest) Fields(fields []string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest) ExcludeFields(excludeFields []string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest) Execute() (*OpenPGPDistributionResponse, *http.Response, error) {
	return r.ApiService.DistributionsCoreOpenpgpReadExecute(r)
}

/*
DistributionsCoreOpenpgpRead Inspect an open pgp distribution

Provides read and list methods and also provides asynchronous CUD methods to dispatch taskswith reservation that lock all Distributions preventing race conditions during base_pathchecking.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPDistributionHref
 @return DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest
*/
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpRead(ctx context.Context, openPGPDistributionHref string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest {
	return DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest{
		ApiService: a,
		ctx: ctx,
		openPGPDistributionHref: openPGPDistributionHref,
	}
}

// Execute executes the request
//  @return OpenPGPDistributionResponse
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpReadExecute(r DistributionsOpenpgpAPIDistributionsCoreOpenpgpReadRequest) (*OpenPGPDistributionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenPGPDistributionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsOpenpgpAPIService.DistributionsCoreOpenpgpRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_distribution_href"+"}", url.PathEscape(parameterValueToString(r.openPGPDistributionHref, "openPGPDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsOpenpgpAPIDistributionsCoreOpenpgpSetLabelRequest struct {
	ctx context.Context
	ApiService *DistributionsOpenpgpAPIService
	openPGPDistributionHref string
	setLabel *SetLabel
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpSetLabelRequest) SetLabel(setLabel SetLabel) DistributionsOpenpgpAPIDistributionsCoreOpenpgpSetLabelRequest {
	r.setLabel = &setLabel
	return r
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpSetLabelRequest) Execute() (*SetLabelResponse, *http.Response, error) {
	return r.ApiService.DistributionsCoreOpenpgpSetLabelExecute(r)
}

/*
DistributionsCoreOpenpgpSetLabel Set a label

Set a single pulp_label on the object to a specific value or null.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPDistributionHref
 @return DistributionsOpenpgpAPIDistributionsCoreOpenpgpSetLabelRequest
*/
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpSetLabel(ctx context.Context, openPGPDistributionHref string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpSetLabelRequest {
	return DistributionsOpenpgpAPIDistributionsCoreOpenpgpSetLabelRequest{
		ApiService: a,
		ctx: ctx,
		openPGPDistributionHref: openPGPDistributionHref,
	}
}

// Execute executes the request
//  @return SetLabelResponse
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpSetLabelExecute(r DistributionsOpenpgpAPIDistributionsCoreOpenpgpSetLabelRequest) (*SetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsOpenpgpAPIService.DistributionsCoreOpenpgpSetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_distribution_href}set_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_distribution_href"+"}", url.PathEscape(parameterValueToString(r.openPGPDistributionHref, "openPGPDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setLabel == nil {
		return localVarReturnValue, nil, reportError("setLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsOpenpgpAPIDistributionsCoreOpenpgpUnsetLabelRequest struct {
	ctx context.Context
	ApiService *DistributionsOpenpgpAPIService
	openPGPDistributionHref string
	unsetLabel *UnsetLabel
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpUnsetLabelRequest) UnsetLabel(unsetLabel UnsetLabel) DistributionsOpenpgpAPIDistributionsCoreOpenpgpUnsetLabelRequest {
	r.unsetLabel = &unsetLabel
	return r
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpUnsetLabelRequest) Execute() (*UnsetLabelResponse, *http.Response, error) {
	return r.ApiService.DistributionsCoreOpenpgpUnsetLabelExecute(r)
}

/*
DistributionsCoreOpenpgpUnsetLabel Unset a label

Unset a single pulp_label on the object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPDistributionHref
 @return DistributionsOpenpgpAPIDistributionsCoreOpenpgpUnsetLabelRequest
*/
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpUnsetLabel(ctx context.Context, openPGPDistributionHref string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpUnsetLabelRequest {
	return DistributionsOpenpgpAPIDistributionsCoreOpenpgpUnsetLabelRequest{
		ApiService: a,
		ctx: ctx,
		openPGPDistributionHref: openPGPDistributionHref,
	}
}

// Execute executes the request
//  @return UnsetLabelResponse
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpUnsetLabelExecute(r DistributionsOpenpgpAPIDistributionsCoreOpenpgpUnsetLabelRequest) (*UnsetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsOpenpgpAPIService.DistributionsCoreOpenpgpUnsetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_distribution_href}unset_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_distribution_href"+"}", url.PathEscape(parameterValueToString(r.openPGPDistributionHref, "openPGPDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsetLabel == nil {
		return localVarReturnValue, nil, reportError("unsetLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsetLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsOpenpgpAPIDistributionsCoreOpenpgpUpdateRequest struct {
	ctx context.Context
	ApiService *DistributionsOpenpgpAPIService
	openPGPDistributionHref string
	openPGPDistribution *OpenPGPDistribution
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpUpdateRequest) OpenPGPDistribution(openPGPDistribution OpenPGPDistribution) DistributionsOpenpgpAPIDistributionsCoreOpenpgpUpdateRequest {
	r.openPGPDistribution = &openPGPDistribution
	return r
}

func (r DistributionsOpenpgpAPIDistributionsCoreOpenpgpUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsCoreOpenpgpUpdateExecute(r)
}

/*
DistributionsCoreOpenpgpUpdate Update an open pgp distribution

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPDistributionHref
 @return DistributionsOpenpgpAPIDistributionsCoreOpenpgpUpdateRequest
*/
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpUpdate(ctx context.Context, openPGPDistributionHref string) DistributionsOpenpgpAPIDistributionsCoreOpenpgpUpdateRequest {
	return DistributionsOpenpgpAPIDistributionsCoreOpenpgpUpdateRequest{
		ApiService: a,
		ctx: ctx,
		openPGPDistributionHref: openPGPDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsOpenpgpAPIService) DistributionsCoreOpenpgpUpdateExecute(r DistributionsOpenpgpAPIDistributionsCoreOpenpgpUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsOpenpgpAPIService.DistributionsCoreOpenpgpUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_distribution_href"+"}", url.PathEscape(parameterValueToString(r.openPGPDistributionHref, "openPGPDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.openPGPDistribution == nil {
		return localVarReturnValue, nil, reportError("openPGPDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.openPGPDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
