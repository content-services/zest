/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"fmt"
)

// Policy692Enum * `immediate` - When syncing, download all metadata and content now.* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again.
type Policy692Enum string

// List of Policy692Enum
const (
	POLICY692ENUM_IMMEDIATE Policy692Enum = "immediate"
	POLICY692ENUM_ON_DEMAND Policy692Enum = "on_demand"
	POLICY692ENUM_STREAMED Policy692Enum = "streamed"
)

// All allowed values of Policy692Enum enum
var AllowedPolicy692EnumEnumValues = []Policy692Enum{
	"immediate",
	"on_demand",
	"streamed",
}

func (v *Policy692Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Policy692Enum(value)
	for _, existing := range AllowedPolicy692EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Policy692Enum", value)
}

// NewPolicy692EnumFromValue returns a pointer to a valid Policy692Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicy692EnumFromValue(v string) (*Policy692Enum, error) {
	ev := Policy692Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Policy692Enum: valid values are %v", v, AllowedPolicy692EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Policy692Enum) IsValid() bool {
	for _, existing := range AllowedPolicy692EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Policy692Enum value
func (v Policy692Enum) Ptr() *Policy692Enum {
	return &v
}

type NullablePolicy692Enum struct {
	value *Policy692Enum
	isSet bool
}

func (v NullablePolicy692Enum) Get() *Policy692Enum {
	return v.value
}

func (v *NullablePolicy692Enum) Set(val *Policy692Enum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy692Enum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy692Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy692Enum(val *Policy692Enum) *NullablePolicy692Enum {
	return &NullablePolicy692Enum{value: val, isSet: true}
}

func (v NullablePolicy692Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy692Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

