/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentConfigsAPIService ContentConfigsAPI service
type ContentConfigsAPIService service

type ContentConfigsAPIContentOstreeConfigsListRequest struct {
	ctx context.Context
	ApiService *ContentConfigsAPIService
	pulpDomain string
	limit *int32
	offset *int32
	ordering *[]string
	orphanedFor *float32
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentConfigsAPIContentOstreeConfigsListRequest) Limit(limit int32) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ContentConfigsAPIContentOstreeConfigsListRequest) Offset(offset int32) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r ContentConfigsAPIContentOstreeConfigsListRequest) Ordering(ordering []string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.ordering = &ordering
	return r
}

// Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
func (r ContentConfigsAPIContentOstreeConfigsListRequest) OrphanedFor(orphanedFor float32) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.orphanedFor = &orphanedFor
	return r
}

// Multiple values may be separated by commas.
func (r ContentConfigsAPIContentOstreeConfigsListRequest) PrnIn(prnIn []string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentConfigsAPIContentOstreeConfigsListRequest) PulpHrefIn(pulpHrefIn []string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentConfigsAPIContentOstreeConfigsListRequest) PulpIdIn(pulpIdIn []string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r ContentConfigsAPIContentOstreeConfigsListRequest) PulpLabelSelect(pulpLabelSelect string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r ContentConfigsAPIContentOstreeConfigsListRequest) Q(q string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.q = &q
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentConfigsAPIContentOstreeConfigsListRequest) RepositoryVersion(repositoryVersion string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentConfigsAPIContentOstreeConfigsListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentConfigsAPIContentOstreeConfigsListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// A list of fields to include in the response.
func (r ContentConfigsAPIContentOstreeConfigsListRequest) Fields(fields []string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentConfigsAPIContentOstreeConfigsListRequest) ExcludeFields(excludeFields []string) ContentConfigsAPIContentOstreeConfigsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentConfigsAPIContentOstreeConfigsListRequest) Execute() (*PaginatedostreeOstreeConfigResponseList, *http.Response, error) {
	return r.ApiService.ContentOstreeConfigsListExecute(r)
}

/*
ContentOstreeConfigsList List ostree configs

A ViewSet class for OSTree repository configurations.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentConfigsAPIContentOstreeConfigsListRequest
*/
func (a *ContentConfigsAPIService) ContentOstreeConfigsList(ctx context.Context, pulpDomain string) ContentConfigsAPIContentOstreeConfigsListRequest {
	return ContentConfigsAPIContentOstreeConfigsListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedostreeOstreeConfigResponseList
func (a *ContentConfigsAPIService) ContentOstreeConfigsListExecute(r ContentConfigsAPIContentOstreeConfigsListRequest) (*PaginatedostreeOstreeConfigResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedostreeOstreeConfigResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentConfigsAPIService.ContentOstreeConfigsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/content/ostree/configs/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.orphanedFor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphaned_for", r.orphanedFor, "form", "")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "form", "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "form", "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentConfigsAPIContentOstreeConfigsReadRequest struct {
	ctx context.Context
	ApiService *ContentConfigsAPIService
	ostreeOstreeConfigHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentConfigsAPIContentOstreeConfigsReadRequest) Fields(fields []string) ContentConfigsAPIContentOstreeConfigsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentConfigsAPIContentOstreeConfigsReadRequest) ExcludeFields(excludeFields []string) ContentConfigsAPIContentOstreeConfigsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentConfigsAPIContentOstreeConfigsReadRequest) Execute() (*OstreeOstreeConfigResponse, *http.Response, error) {
	return r.ApiService.ContentOstreeConfigsReadExecute(r)
}

/*
ContentOstreeConfigsRead Inspect an ostree config

A ViewSet class for OSTree repository configurations.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ostreeOstreeConfigHref
 @return ContentConfigsAPIContentOstreeConfigsReadRequest
*/
func (a *ContentConfigsAPIService) ContentOstreeConfigsRead(ctx context.Context, ostreeOstreeConfigHref string) ContentConfigsAPIContentOstreeConfigsReadRequest {
	return ContentConfigsAPIContentOstreeConfigsReadRequest{
		ApiService: a,
		ctx: ctx,
		ostreeOstreeConfigHref: ostreeOstreeConfigHref,
	}
}

// Execute executes the request
//  @return OstreeOstreeConfigResponse
func (a *ContentConfigsAPIService) ContentOstreeConfigsReadExecute(r ContentConfigsAPIContentOstreeConfigsReadRequest) (*OstreeOstreeConfigResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OstreeOstreeConfigResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentConfigsAPIService.ContentOstreeConfigsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ostree_ostree_config_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ostree_ostree_config_href"+"}", url.PathEscape(parameterValueToString(r.ostreeOstreeConfigHref, "ostreeOstreeConfigHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentConfigsAPIContentOstreeConfigsSetLabelRequest struct {
	ctx context.Context
	ApiService *ContentConfigsAPIService
	ostreeOstreeConfigHref string
	setLabel *SetLabel
}

func (r ContentConfigsAPIContentOstreeConfigsSetLabelRequest) SetLabel(setLabel SetLabel) ContentConfigsAPIContentOstreeConfigsSetLabelRequest {
	r.setLabel = &setLabel
	return r
}

func (r ContentConfigsAPIContentOstreeConfigsSetLabelRequest) Execute() (*SetLabelResponse, *http.Response, error) {
	return r.ApiService.ContentOstreeConfigsSetLabelExecute(r)
}

/*
ContentOstreeConfigsSetLabel Set a label

Set a single pulp_label on the object to a specific value or null.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ostreeOstreeConfigHref
 @return ContentConfigsAPIContentOstreeConfigsSetLabelRequest
*/
func (a *ContentConfigsAPIService) ContentOstreeConfigsSetLabel(ctx context.Context, ostreeOstreeConfigHref string) ContentConfigsAPIContentOstreeConfigsSetLabelRequest {
	return ContentConfigsAPIContentOstreeConfigsSetLabelRequest{
		ApiService: a,
		ctx: ctx,
		ostreeOstreeConfigHref: ostreeOstreeConfigHref,
	}
}

// Execute executes the request
//  @return SetLabelResponse
func (a *ContentConfigsAPIService) ContentOstreeConfigsSetLabelExecute(r ContentConfigsAPIContentOstreeConfigsSetLabelRequest) (*SetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentConfigsAPIService.ContentOstreeConfigsSetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ostree_ostree_config_href}set_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"ostree_ostree_config_href"+"}", url.PathEscape(parameterValueToString(r.ostreeOstreeConfigHref, "ostreeOstreeConfigHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setLabel == nil {
		return localVarReturnValue, nil, reportError("setLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentConfigsAPIContentOstreeConfigsUnsetLabelRequest struct {
	ctx context.Context
	ApiService *ContentConfigsAPIService
	ostreeOstreeConfigHref string
	unsetLabel *UnsetLabel
}

func (r ContentConfigsAPIContentOstreeConfigsUnsetLabelRequest) UnsetLabel(unsetLabel UnsetLabel) ContentConfigsAPIContentOstreeConfigsUnsetLabelRequest {
	r.unsetLabel = &unsetLabel
	return r
}

func (r ContentConfigsAPIContentOstreeConfigsUnsetLabelRequest) Execute() (*UnsetLabelResponse, *http.Response, error) {
	return r.ApiService.ContentOstreeConfigsUnsetLabelExecute(r)
}

/*
ContentOstreeConfigsUnsetLabel Unset a label

Unset a single pulp_label on the object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ostreeOstreeConfigHref
 @return ContentConfigsAPIContentOstreeConfigsUnsetLabelRequest
*/
func (a *ContentConfigsAPIService) ContentOstreeConfigsUnsetLabel(ctx context.Context, ostreeOstreeConfigHref string) ContentConfigsAPIContentOstreeConfigsUnsetLabelRequest {
	return ContentConfigsAPIContentOstreeConfigsUnsetLabelRequest{
		ApiService: a,
		ctx: ctx,
		ostreeOstreeConfigHref: ostreeOstreeConfigHref,
	}
}

// Execute executes the request
//  @return UnsetLabelResponse
func (a *ContentConfigsAPIService) ContentOstreeConfigsUnsetLabelExecute(r ContentConfigsAPIContentOstreeConfigsUnsetLabelRequest) (*UnsetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentConfigsAPIService.ContentOstreeConfigsUnsetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ostree_ostree_config_href}unset_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"ostree_ostree_config_href"+"}", url.PathEscape(parameterValueToString(r.ostreeOstreeConfigHref, "ostreeOstreeConfigHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsetLabel == nil {
		return localVarReturnValue, nil, reportError("unsetLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsetLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
