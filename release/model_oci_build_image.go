/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"os"
)

// checks if the OCIBuildImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OCIBuildImage{}

// OCIBuildImage Serializer for building an OCI container image from a Containerfile.The Containerfile can either be specified via an artifact url, or a new file can be uploaded.A repository must be specified, to which the container image content will be added.
type OCIBuildImage struct {
	// Name of the Containerfile, from build_context, that should be used to run podman-build.
	ContainerfileName *string `json:"containerfile_name,omitempty"`
	// An uploaded Containerfile that should be used to run podman-build.
	Containerfile **os.File `json:"containerfile,omitempty"`
	// A tag name for the new image being built.
	Tag *string `json:"tag,omitempty"`
	// RepositoryVersion to be used as the build context for container images.
	BuildContext NullableString `json:"build_context,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OCIBuildImage OCIBuildImage

// NewOCIBuildImage instantiates a new OCIBuildImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOCIBuildImage() *OCIBuildImage {
	this := OCIBuildImage{}
	var tag string = "latest"
	this.Tag = &tag
	return &this
}

// NewOCIBuildImageWithDefaults instantiates a new OCIBuildImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOCIBuildImageWithDefaults() *OCIBuildImage {
	this := OCIBuildImage{}
	var tag string = "latest"
	this.Tag = &tag
	return &this
}

// GetContainerfileName returns the ContainerfileName field value if set, zero value otherwise.
func (o *OCIBuildImage) GetContainerfileName() string {
	if o == nil || IsNil(o.ContainerfileName) {
		var ret string
		return ret
	}
	return *o.ContainerfileName
}

// GetContainerfileNameOk returns a tuple with the ContainerfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCIBuildImage) GetContainerfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerfileName) {
		return nil, false
	}
	return o.ContainerfileName, true
}

// HasContainerfileName returns a boolean if a field has been set.
func (o *OCIBuildImage) HasContainerfileName() bool {
	if o != nil && !IsNil(o.ContainerfileName) {
		return true
	}

	return false
}

// SetContainerfileName gets a reference to the given string and assigns it to the ContainerfileName field.
func (o *OCIBuildImage) SetContainerfileName(v string) {
	o.ContainerfileName = &v
}

// GetContainerfile returns the Containerfile field value if set, zero value otherwise.
func (o *OCIBuildImage) GetContainerfile() *os.File {
	if o == nil || IsNil(o.Containerfile) {
		var ret *os.File
		return ret
	}
	return *o.Containerfile
}

// GetContainerfileOk returns a tuple with the Containerfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCIBuildImage) GetContainerfileOk() (**os.File, bool) {
	if o == nil || IsNil(o.Containerfile) {
		return nil, false
	}
	return o.Containerfile, true
}

// HasContainerfile returns a boolean if a field has been set.
func (o *OCIBuildImage) HasContainerfile() bool {
	if o != nil && !IsNil(o.Containerfile) {
		return true
	}

	return false
}

// SetContainerfile gets a reference to the given *os.File and assigns it to the Containerfile field.
func (o *OCIBuildImage) SetContainerfile(v *os.File) {
	o.Containerfile = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *OCIBuildImage) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCIBuildImage) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *OCIBuildImage) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *OCIBuildImage) SetTag(v string) {
	o.Tag = &v
}

// GetBuildContext returns the BuildContext field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OCIBuildImage) GetBuildContext() string {
	if o == nil || IsNil(o.BuildContext.Get()) {
		var ret string
		return ret
	}
	return *o.BuildContext.Get()
}

// GetBuildContextOk returns a tuple with the BuildContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OCIBuildImage) GetBuildContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildContext.Get(), o.BuildContext.IsSet()
}

// HasBuildContext returns a boolean if a field has been set.
func (o *OCIBuildImage) HasBuildContext() bool {
	if o != nil && o.BuildContext.IsSet() {
		return true
	}

	return false
}

// SetBuildContext gets a reference to the given NullableString and assigns it to the BuildContext field.
func (o *OCIBuildImage) SetBuildContext(v string) {
	o.BuildContext.Set(&v)
}
// SetBuildContextNil sets the value for BuildContext to be an explicit nil
func (o *OCIBuildImage) SetBuildContextNil() {
	o.BuildContext.Set(nil)
}

// UnsetBuildContext ensures that no value is present for BuildContext, not even an explicit nil
func (o *OCIBuildImage) UnsetBuildContext() {
	o.BuildContext.Unset()
}

func (o OCIBuildImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OCIBuildImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContainerfileName) {
		toSerialize["containerfile_name"] = o.ContainerfileName
	}
	if !IsNil(o.Containerfile) {
		toSerialize["containerfile"] = o.Containerfile
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if o.BuildContext.IsSet() {
		toSerialize["build_context"] = o.BuildContext.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OCIBuildImage) UnmarshalJSON(data []byte) (err error) {
	varOCIBuildImage := _OCIBuildImage{}

	err = json.Unmarshal(data, &varOCIBuildImage)

	if err != nil {
		return err
	}

	*o = OCIBuildImage(varOCIBuildImage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "containerfile_name")
		delete(additionalProperties, "containerfile")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "build_context")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOCIBuildImage struct {
	value *OCIBuildImage
	isSet bool
}

func (v NullableOCIBuildImage) Get() *OCIBuildImage {
	return v.value
}

func (v *NullableOCIBuildImage) Set(val *OCIBuildImage) {
	v.value = val
	v.isSet = true
}

func (v NullableOCIBuildImage) IsSet() bool {
	return v.isSet
}

func (v *NullableOCIBuildImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOCIBuildImage(val *OCIBuildImage) *NullableOCIBuildImage {
	return &NullableOCIBuildImage{value: val, isSet: true}
}

func (v NullableOCIBuildImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOCIBuildImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


