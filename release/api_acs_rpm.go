/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest/release/v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AcsRpmApiService AcsRpmApi service
type AcsRpmApiService service

type AcsRpmApiAcsRpmRpmAddRoleRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
	nestedRole *NestedRole
}

func (r AcsRpmApiAcsRpmRpmAddRoleRequest) NestedRole(nestedRole NestedRole) AcsRpmApiAcsRpmRpmAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r AcsRpmApiAcsRpmRpmAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmAddRoleExecute(r)
}

/*
AcsRpmRpmAddRole Method for AcsRpmRpmAddRole

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmAddRoleRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmAddRole(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmAddRoleRequest {
	return AcsRpmApiAcsRpmRpmAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *AcsRpmApiService) AcsRpmRpmAddRoleExecute(r AcsRpmApiAcsRpmRpmAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmCreateRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSource *RpmRpmAlternateContentSource
}

func (r AcsRpmApiAcsRpmRpmCreateRequest) RpmRpmAlternateContentSource(rpmRpmAlternateContentSource RpmRpmAlternateContentSource) AcsRpmApiAcsRpmRpmCreateRequest {
	r.rpmRpmAlternateContentSource = &rpmRpmAlternateContentSource
	return r
}

func (r AcsRpmApiAcsRpmRpmCreateRequest) Execute() (*RpmRpmAlternateContentSourceResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmCreateExecute(r)
}

/*
AcsRpmRpmCreate Create a rpm alternate content source

ViewSet for ACS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AcsRpmApiAcsRpmRpmCreateRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmCreate(ctx context.Context) AcsRpmApiAcsRpmRpmCreateRequest {
	return AcsRpmApiAcsRpmRpmCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RpmRpmAlternateContentSourceResponse
func (a *AcsRpmApiService) AcsRpmRpmCreateExecute(r AcsRpmApiAcsRpmRpmCreateRequest) (*RpmRpmAlternateContentSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RpmRpmAlternateContentSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/acs/rpm/rpm/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rpmRpmAlternateContentSource == nil {
		return localVarReturnValue, nil, reportError("rpmRpmAlternateContentSource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rpmRpmAlternateContentSource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmDeleteRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
}

func (r AcsRpmApiAcsRpmRpmDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmDeleteExecute(r)
}

/*
AcsRpmRpmDelete Delete a rpm alternate content source

Trigger an asynchronous delete ACS task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmDeleteRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmDelete(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmDeleteRequest {
	return AcsRpmApiAcsRpmRpmDeleteRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *AcsRpmApiService) AcsRpmRpmDeleteExecute(r AcsRpmApiAcsRpmRpmDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmListRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r AcsRpmApiAcsRpmRpmListRequest) Limit(limit int32) AcsRpmApiAcsRpmRpmListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r AcsRpmApiAcsRpmRpmListRequest) Name(name string) AcsRpmApiAcsRpmRpmListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r AcsRpmApiAcsRpmRpmListRequest) NameContains(nameContains string) AcsRpmApiAcsRpmRpmListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r AcsRpmApiAcsRpmRpmListRequest) NameIcontains(nameIcontains string) AcsRpmApiAcsRpmRpmListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r AcsRpmApiAcsRpmRpmListRequest) NameIn(nameIn []string) AcsRpmApiAcsRpmRpmListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name starts with value
func (r AcsRpmApiAcsRpmRpmListRequest) NameStartswith(nameStartswith string) AcsRpmApiAcsRpmRpmListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r AcsRpmApiAcsRpmRpmListRequest) Offset(offset int32) AcsRpmApiAcsRpmRpmListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r AcsRpmApiAcsRpmRpmListRequest) Ordering(ordering []string) AcsRpmApiAcsRpmRpmListRequest {
	r.ordering = &ordering
	return r
}

// A list of fields to include in the response.
func (r AcsRpmApiAcsRpmRpmListRequest) Fields(fields []string) AcsRpmApiAcsRpmRpmListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r AcsRpmApiAcsRpmRpmListRequest) ExcludeFields(excludeFields []string) AcsRpmApiAcsRpmRpmListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r AcsRpmApiAcsRpmRpmListRequest) Execute() (*PaginatedrpmRpmAlternateContentSourceResponseList, *http.Response, error) {
	return r.ApiService.AcsRpmRpmListExecute(r)
}

/*
AcsRpmRpmList List rpm alternate content sources

ViewSet for ACS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AcsRpmApiAcsRpmRpmListRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmList(ctx context.Context) AcsRpmApiAcsRpmRpmListRequest {
	return AcsRpmApiAcsRpmRpmListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedrpmRpmAlternateContentSourceResponseList
func (a *AcsRpmApiService) AcsRpmRpmListExecute(r AcsRpmApiAcsRpmRpmListRequest) (*PaginatedrpmRpmAlternateContentSourceResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedrpmRpmAlternateContentSourceResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/acs/rpm/rpm/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmListRolesRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r AcsRpmApiAcsRpmRpmListRolesRequest) Fields(fields []string) AcsRpmApiAcsRpmRpmListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r AcsRpmApiAcsRpmRpmListRolesRequest) ExcludeFields(excludeFields []string) AcsRpmApiAcsRpmRpmListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r AcsRpmApiAcsRpmRpmListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmListRolesExecute(r)
}

/*
AcsRpmRpmListRoles Method for AcsRpmRpmListRoles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmListRolesRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmListRoles(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmListRolesRequest {
	return AcsRpmApiAcsRpmRpmListRolesRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *AcsRpmApiService) AcsRpmRpmListRolesExecute(r AcsRpmApiAcsRpmRpmListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmMyPermissionsRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r AcsRpmApiAcsRpmRpmMyPermissionsRequest) Fields(fields []string) AcsRpmApiAcsRpmRpmMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r AcsRpmApiAcsRpmRpmMyPermissionsRequest) ExcludeFields(excludeFields []string) AcsRpmApiAcsRpmRpmMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r AcsRpmApiAcsRpmRpmMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmMyPermissionsExecute(r)
}

/*
AcsRpmRpmMyPermissions Method for AcsRpmRpmMyPermissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmMyPermissionsRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmMyPermissions(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmMyPermissionsRequest {
	return AcsRpmApiAcsRpmRpmMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *AcsRpmApiService) AcsRpmRpmMyPermissionsExecute(r AcsRpmApiAcsRpmRpmMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmPartialUpdateRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
	patchedrpmRpmAlternateContentSource *PatchedrpmRpmAlternateContentSource
}

func (r AcsRpmApiAcsRpmRpmPartialUpdateRequest) PatchedrpmRpmAlternateContentSource(patchedrpmRpmAlternateContentSource PatchedrpmRpmAlternateContentSource) AcsRpmApiAcsRpmRpmPartialUpdateRequest {
	r.patchedrpmRpmAlternateContentSource = &patchedrpmRpmAlternateContentSource
	return r
}

func (r AcsRpmApiAcsRpmRpmPartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmPartialUpdateExecute(r)
}

/*
AcsRpmRpmPartialUpdate Update a rpm alternate content source

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmPartialUpdateRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmPartialUpdate(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmPartialUpdateRequest {
	return AcsRpmApiAcsRpmRpmPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *AcsRpmApiService) AcsRpmRpmPartialUpdateExecute(r AcsRpmApiAcsRpmRpmPartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedrpmRpmAlternateContentSource == nil {
		return localVarReturnValue, nil, reportError("patchedrpmRpmAlternateContentSource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedrpmRpmAlternateContentSource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmReadRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r AcsRpmApiAcsRpmRpmReadRequest) Fields(fields []string) AcsRpmApiAcsRpmRpmReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r AcsRpmApiAcsRpmRpmReadRequest) ExcludeFields(excludeFields []string) AcsRpmApiAcsRpmRpmReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r AcsRpmApiAcsRpmRpmReadRequest) Execute() (*RpmRpmAlternateContentSourceResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmReadExecute(r)
}

/*
AcsRpmRpmRead Inspect a rpm alternate content source

ViewSet for ACS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmReadRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmRead(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmReadRequest {
	return AcsRpmApiAcsRpmRpmReadRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return RpmRpmAlternateContentSourceResponse
func (a *AcsRpmApiService) AcsRpmRpmReadExecute(r AcsRpmApiAcsRpmRpmReadRequest) (*RpmRpmAlternateContentSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RpmRpmAlternateContentSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmRefreshRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
}

func (r AcsRpmApiAcsRpmRpmRefreshRequest) Execute() (*TaskGroupOperationResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmRefreshExecute(r)
}

/*
AcsRpmRpmRefresh Method for AcsRpmRpmRefresh

Trigger an asynchronous task to create Alternate Content Source content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmRefreshRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmRefresh(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmRefreshRequest {
	return AcsRpmApiAcsRpmRpmRefreshRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return TaskGroupOperationResponse
func (a *AcsRpmApiService) AcsRpmRpmRefreshExecute(r AcsRpmApiAcsRpmRpmRefreshRequest) (*TaskGroupOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroupOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmRefresh")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}refresh/"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmRemoveRoleRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
	nestedRole *NestedRole
}

func (r AcsRpmApiAcsRpmRpmRemoveRoleRequest) NestedRole(nestedRole NestedRole) AcsRpmApiAcsRpmRpmRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r AcsRpmApiAcsRpmRpmRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmRemoveRoleExecute(r)
}

/*
AcsRpmRpmRemoveRole Method for AcsRpmRpmRemoveRole

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmRemoveRoleRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmRemoveRole(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmRemoveRoleRequest {
	return AcsRpmApiAcsRpmRpmRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *AcsRpmApiService) AcsRpmRpmRemoveRoleExecute(r AcsRpmApiAcsRpmRpmRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AcsRpmApiAcsRpmRpmUpdateRequest struct {
	ctx context.Context
	ApiService *AcsRpmApiService
	rpmRpmAlternateContentSourceHref string
	rpmRpmAlternateContentSource *RpmRpmAlternateContentSource
}

func (r AcsRpmApiAcsRpmRpmUpdateRequest) RpmRpmAlternateContentSource(rpmRpmAlternateContentSource RpmRpmAlternateContentSource) AcsRpmApiAcsRpmRpmUpdateRequest {
	r.rpmRpmAlternateContentSource = &rpmRpmAlternateContentSource
	return r
}

func (r AcsRpmApiAcsRpmRpmUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.AcsRpmRpmUpdateExecute(r)
}

/*
AcsRpmRpmUpdate Update a rpm alternate content source

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmRpmAlternateContentSourceHref
 @return AcsRpmApiAcsRpmRpmUpdateRequest
*/
func (a *AcsRpmApiService) AcsRpmRpmUpdate(ctx context.Context, rpmRpmAlternateContentSourceHref string) AcsRpmApiAcsRpmRpmUpdateRequest {
	return AcsRpmApiAcsRpmRpmUpdateRequest{
		ApiService: a,
		ctx: ctx,
		rpmRpmAlternateContentSourceHref: rpmRpmAlternateContentSourceHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *AcsRpmApiService) AcsRpmRpmUpdateExecute(r AcsRpmApiAcsRpmRpmUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcsRpmApiService.AcsRpmRpmUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_rpm_alternate_content_source_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_rpm_alternate_content_source_href"+"}", url.PathEscape(parameterValueToString(r.rpmRpmAlternateContentSourceHref, "rpmRpmAlternateContentSourceHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rpmRpmAlternateContentSource == nil {
		return localVarReturnValue, nil, reportError("rpmRpmAlternateContentSource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rpmRpmAlternateContentSource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
