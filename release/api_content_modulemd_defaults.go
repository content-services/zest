/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentModulemdDefaultsApiService ContentModulemdDefaultsApi service
type ContentModulemdDefaultsApiService service

type ContentModulemdDefaultsApiContentRpmModulemdDefaultsCreateRequest struct {
	ctx context.Context
	ApiService *ContentModulemdDefaultsApiService
	rpmModulemdDefaults *RpmModulemdDefaults
}

func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsCreateRequest) RpmModulemdDefaults(rpmModulemdDefaults RpmModulemdDefaults) ContentModulemdDefaultsApiContentRpmModulemdDefaultsCreateRequest {
	r.rpmModulemdDefaults = &rpmModulemdDefaults
	return r
}

func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsCreateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.ContentRpmModulemdDefaultsCreateExecute(r)
}

/*
ContentRpmModulemdDefaultsCreate Create a modulemd defaults

Trigger an asynchronous task to create content,optionally create new repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentModulemdDefaultsApiContentRpmModulemdDefaultsCreateRequest
*/
func (a *ContentModulemdDefaultsApiService) ContentRpmModulemdDefaultsCreate(ctx context.Context) ContentModulemdDefaultsApiContentRpmModulemdDefaultsCreateRequest {
	return ContentModulemdDefaultsApiContentRpmModulemdDefaultsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *ContentModulemdDefaultsApiService) ContentRpmModulemdDefaultsCreateExecute(r ContentModulemdDefaultsApiContentRpmModulemdDefaultsCreateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentModulemdDefaultsApiService.ContentRpmModulemdDefaultsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/rpm/modulemd_defaults/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rpmModulemdDefaults == nil {
		return localVarReturnValue, nil, reportError("rpmModulemdDefaults is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rpmModulemdDefaults
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest struct {
	ctx context.Context
	ApiService *ContentModulemdDefaultsApiService
	limit *int32
	module *string
	moduleIn *[]string
	offset *int32
	ordering *[]string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	sha256 *string
	stream *string
	streamIn *[]string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) Limit(limit int32) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.limit = &limit
	return r
}

// Filter results where module matches value
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) Module(module string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.module = &module
	return r
}

// Filter results where module is in a comma-separated list of values
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) ModuleIn(moduleIn []string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.moduleIn = &moduleIn
	return r
}

// The initial index from which to return the results.
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) Offset(offset int32) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) Ordering(ordering []string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.ordering = &ordering
	return r
}

// Repository Version referenced by HREF
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) RepositoryVersion(repositoryVersion string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) Sha256(sha256 string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.sha256 = &sha256
	return r
}

// Filter results where stream matches value
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) Stream(stream string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.stream = &stream
	return r
}

// Filter results where stream is in a comma-separated list of values
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) StreamIn(streamIn []string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.streamIn = &streamIn
	return r
}

// A list of fields to include in the response.
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) Fields(fields []string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) ExcludeFields(excludeFields []string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) Execute() (*PaginatedrpmModulemdDefaultsResponseList, *http.Response, error) {
	return r.ApiService.ContentRpmModulemdDefaultsListExecute(r)
}

/*
ContentRpmModulemdDefaultsList List modulemd defaultss

ViewSet for Modulemd.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest
*/
func (a *ContentModulemdDefaultsApiService) ContentRpmModulemdDefaultsList(ctx context.Context) ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest {
	return ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedrpmModulemdDefaultsResponseList
func (a *ContentModulemdDefaultsApiService) ContentRpmModulemdDefaultsListExecute(r ContentModulemdDefaultsApiContentRpmModulemdDefaultsListRequest) (*PaginatedrpmModulemdDefaultsResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedrpmModulemdDefaultsResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentModulemdDefaultsApiService.ContentRpmModulemdDefaultsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/rpm/modulemd_defaults/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.module != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module", r.module, "")
	}
	if r.moduleIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module__in", r.moduleIn, "csv")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "")
	}
	if r.sha256 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha256", r.sha256, "")
	}
	if r.stream != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stream", r.stream, "")
	}
	if r.streamIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stream__in", r.streamIn, "csv")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest struct {
	ctx context.Context
	ApiService *ContentModulemdDefaultsApiService
	rpmModulemdDefaultsHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest) Fields(fields []string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest) ExcludeFields(excludeFields []string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest) Execute() (*RpmModulemdDefaultsResponse, *http.Response, error) {
	return r.ApiService.ContentRpmModulemdDefaultsReadExecute(r)
}

/*
ContentRpmModulemdDefaultsRead Inspect a modulemd defaults

ViewSet for Modulemd.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rpmModulemdDefaultsHref
 @return ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest
*/
func (a *ContentModulemdDefaultsApiService) ContentRpmModulemdDefaultsRead(ctx context.Context, rpmModulemdDefaultsHref string) ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest {
	return ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest{
		ApiService: a,
		ctx: ctx,
		rpmModulemdDefaultsHref: rpmModulemdDefaultsHref,
	}
}

// Execute executes the request
//  @return RpmModulemdDefaultsResponse
func (a *ContentModulemdDefaultsApiService) ContentRpmModulemdDefaultsReadExecute(r ContentModulemdDefaultsApiContentRpmModulemdDefaultsReadRequest) (*RpmModulemdDefaultsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RpmModulemdDefaultsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentModulemdDefaultsApiService.ContentRpmModulemdDefaultsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{rpm_modulemd_defaults_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm_modulemd_defaults_href"+"}", url.PathEscape(parameterValueToString(r.rpmModulemdDefaultsHref, "rpmModulemdDefaultsHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
