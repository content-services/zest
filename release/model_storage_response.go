/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StorageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageResponse{}

// StorageResponse Serializer for information about the storage system
type StorageResponse struct {
	// Total number of bytes
	Total NullableInt64 `json:"total"`
	// Number of bytes in use
	Used NullableInt64 `json:"used"`
	// Number of free bytes
	Free NullableInt64 `json:"free"`
}

type _StorageResponse StorageResponse

// NewStorageResponse instantiates a new StorageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageResponse(total NullableInt64, used NullableInt64, free NullableInt64) *StorageResponse {
	this := StorageResponse{}
	this.Total = total
	this.Used = used
	this.Free = free
	return &this
}

// NewStorageResponseWithDefaults instantiates a new StorageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageResponseWithDefaults() *StorageResponse {
	this := StorageResponse{}
	return &this
}

// GetTotal returns the Total field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *StorageResponse) GetTotal() int64 {
	if o == nil || o.Total.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageResponse) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// SetTotal sets field value
func (o *StorageResponse) SetTotal(v int64) {
	o.Total.Set(&v)
}

// GetUsed returns the Used field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *StorageResponse) GetUsed() int64 {
	if o == nil || o.Used.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Used.Get()
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageResponse) GetUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Used.Get(), o.Used.IsSet()
}

// SetUsed sets field value
func (o *StorageResponse) SetUsed(v int64) {
	o.Used.Set(&v)
}

// GetFree returns the Free field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *StorageResponse) GetFree() int64 {
	if o == nil || o.Free.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Free.Get()
}

// GetFreeOk returns a tuple with the Free field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageResponse) GetFreeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Free.Get(), o.Free.IsSet()
}

// SetFree sets field value
func (o *StorageResponse) SetFree(v int64) {
	o.Free.Set(&v)
}

func (o StorageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total.Get()
	toSerialize["used"] = o.Used.Get()
	toSerialize["free"] = o.Free.Get()
	return toSerialize, nil
}

func (o *StorageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"used",
		"free",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageResponse := _StorageResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageResponse)

	if err != nil {
		return err
	}

	*o = StorageResponse(varStorageResponse)

	return err
}

type NullableStorageResponse struct {
	value *StorageResponse
	isSet bool
}

func (v NullableStorageResponse) Get() *StorageResponse {
	return v.value
}

func (v *NullableStorageResponse) Set(val *StorageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageResponse(val *StorageResponse) *NullableStorageResponse {
	return &NullableStorageResponse{value: val, isSet: true}
}

func (v NullableStorageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


