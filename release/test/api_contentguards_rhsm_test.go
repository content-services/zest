/*
Pulp 3 API

Testing ContentguardsRhsmApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest/release/v3

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v3"
)

func Test_zest/release/v3_ContentguardsRhsmApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContentguardsRhsmApiService ContentguardsCertguardRhsmCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContentguardsRhsmApi.ContentguardsCertguardRhsmCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRhsmApiService ContentguardsCertguardRhsmDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certguardRHSMCertGuardHref string

		httpRes, err := apiClient.ContentguardsRhsmApi.ContentguardsCertguardRhsmDelete(context.Background(), certguardRHSMCertGuardHref).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRhsmApiService ContentguardsCertguardRhsmList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContentguardsRhsmApi.ContentguardsCertguardRhsmList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRhsmApiService ContentguardsCertguardRhsmPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certguardRHSMCertGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRhsmApi.ContentguardsCertguardRhsmPartialUpdate(context.Background(), certguardRHSMCertGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRhsmApiService ContentguardsCertguardRhsmRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certguardRHSMCertGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRhsmApi.ContentguardsCertguardRhsmRead(context.Background(), certguardRHSMCertGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsRhsmApiService ContentguardsCertguardRhsmUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certguardRHSMCertGuardHref string

		resp, httpRes, err := apiClient.ContentguardsRhsmApi.ContentguardsCertguardRhsmUpdate(context.Background(), certguardRHSMCertGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
