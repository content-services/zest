/*
Pulp 3 API

Testing ContentguardsFeatureAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2024"
)

func Test_zest_ContentguardsFeatureAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceFeatureContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureAddRole(context.Background(), serviceFeatureContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceFeatureContentGuardHref string

		httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureDelete(context.Background(), serviceFeatureContentGuardHref).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceFeatureContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureListRoles(context.Background(), serviceFeatureContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceFeatureContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureMyPermissions(context.Background(), serviceFeatureContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeaturePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceFeatureContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeaturePartialUpdate(context.Background(), serviceFeatureContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceFeatureContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureRead(context.Background(), serviceFeatureContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceFeatureContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureRemoveRole(context.Background(), serviceFeatureContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentguardsFeatureAPIService ContentguardsServiceFeatureUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceFeatureContentGuardHref string

		resp, httpRes, err := apiClient.ContentguardsFeatureAPI.ContentguardsServiceFeatureUpdate(context.Background(), serviceFeatureContentGuardHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
