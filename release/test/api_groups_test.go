/*
Pulp 3 API

Testing GroupsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release"
)

func Test_zest_GroupsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupsApiService GroupsAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupHref string

		resp, httpRes, err := apiClient.GroupsApi.GroupsAddRole(context.Background(), groupHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GroupsApi.GroupsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupHref string

		httpRes, err := apiClient.GroupsApi.GroupsDelete(context.Background(), groupHref).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GroupsApi.GroupsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupHref string

		resp, httpRes, err := apiClient.GroupsApi.GroupsListRoles(context.Background(), groupHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupHref string

		resp, httpRes, err := apiClient.GroupsApi.GroupsMyPermissions(context.Background(), groupHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupHref string

		resp, httpRes, err := apiClient.GroupsApi.GroupsPartialUpdate(context.Background(), groupHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupHref string

		resp, httpRes, err := apiClient.GroupsApi.GroupsRead(context.Background(), groupHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupHref string

		resp, httpRes, err := apiClient.GroupsApi.GroupsRemoveRole(context.Background(), groupHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GroupsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupHref string

		resp, httpRes, err := apiClient.GroupsApi.GroupsUpdate(context.Background(), groupHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
