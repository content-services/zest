/*
Pulp 3 API

Testing DistributionsPullThroughAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2025"
)

func Test_zest_DistributionsPullThroughAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughAddRole(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughDelete(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughListRoles(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughMyPermissions(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughPartialUpdate(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughRead(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughRemoveRole(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughSetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughSetLabel(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughUnsetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughUnsetLabel(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsPullThroughAPIService DistributionsContainerPullThroughUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughDistributionHref string

		resp, httpRes, err := apiClient.DistributionsPullThroughAPI.DistributionsContainerPullThroughUpdate(context.Background(), containerContainerPullThroughDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
