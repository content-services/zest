/*
Pulp 3 API

Testing RemotesPullThroughAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2025"
)

func Test_zest_RemotesPullThroughAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughAddRole(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughDelete(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughListRoles(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughMyPermissions(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughPartialUpdate(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughRead(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughRemoveRole(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughSetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughSetLabel(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughUnsetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughUnsetLabel(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesPullThroughAPIService RemotesContainerPullThroughUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerContainerPullThroughRemoteHref string

		resp, httpRes, err := apiClient.RemotesPullThroughAPI.RemotesContainerPullThroughUpdate(context.Background(), containerContainerPullThroughRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
