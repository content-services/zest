/*
Pulp 3 API

Testing RemotesGemAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2024"
)

func Test_zest_RemotesGemAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesGemAPIService RemotesGemGemAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemAddRole(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemDelete(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemListRoles(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemMyPermissions(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemPartialUpdate(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemRead(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemRemoveRole(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemSetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemSetLabel(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemUnsetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemUnsetLabel(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesGemAPIService RemotesGemGemUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gemGemRemoteHref string

		resp, httpRes, err := apiClient.RemotesGemAPI.RemotesGemGemUpdate(context.Background(), gemGemRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
