/*
Pulp 3 API

Testing DistributionsOpenpgpAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2025"
)

func Test_zest_DistributionsOpenpgpAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DistributionsOpenpgpAPIService DistributionsCoreOpenpgpCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.DistributionsOpenpgpAPI.DistributionsCoreOpenpgpCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOpenpgpAPIService DistributionsCoreOpenpgpDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOpenpgpAPI.DistributionsCoreOpenpgpDelete(context.Background(), openPGPDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOpenpgpAPIService DistributionsCoreOpenpgpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.DistributionsOpenpgpAPI.DistributionsCoreOpenpgpList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOpenpgpAPIService DistributionsCoreOpenpgpPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOpenpgpAPI.DistributionsCoreOpenpgpPartialUpdate(context.Background(), openPGPDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOpenpgpAPIService DistributionsCoreOpenpgpRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOpenpgpAPI.DistributionsCoreOpenpgpRead(context.Background(), openPGPDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOpenpgpAPIService DistributionsCoreOpenpgpSetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOpenpgpAPI.DistributionsCoreOpenpgpSetLabel(context.Background(), openPGPDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOpenpgpAPIService DistributionsCoreOpenpgpUnsetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOpenpgpAPI.DistributionsCoreOpenpgpUnsetLabel(context.Background(), openPGPDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOpenpgpAPIService DistributionsCoreOpenpgpUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOpenpgpAPI.DistributionsCoreOpenpgpUpdate(context.Background(), openPGPDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
