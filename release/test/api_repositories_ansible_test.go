/*
Pulp 3 API

Testing RepositoriesAnsibleApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v3"
)

func Test_zest_RepositoriesAnsibleApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleAddRole(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleCopyCollectionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleCopyCollectionVersion(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleDelete(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleListRoles(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleMark", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleMark(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleModify", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleModify(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleMoveCollectionVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleMoveCollectionVersion(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleMyPermissions(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsiblePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsiblePartialUpdate(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleRead(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleRebuildMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleRebuildMetadata(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleRemoveRole(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleSign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleSign(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleSync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleSync(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleUnmark", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleUnmark(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAnsibleApiService RepositoriesAnsibleAnsibleUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ansibleAnsibleRepositoryHref string

		resp, httpRes, err := apiClient.RepositoriesAnsibleApi.RepositoriesAnsibleAnsibleUpdate(context.Background(), ansibleAnsibleRepositoryHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
