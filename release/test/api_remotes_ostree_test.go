/*
Pulp 3 API

Testing RemotesOstreeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2024"
)

func Test_zest_RemotesOstreeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeAddRole(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeDelete(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeListRoles(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeMyPermissions(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreePartialUpdate(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeRead(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeRemoveRole(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeSetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeSetLabel(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeUnsetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeUnsetLabel(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesOstreeAPIService RemotesOstreeOstreeUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeRemoteHref string

		resp, httpRes, err := apiClient.RemotesOstreeAPI.RemotesOstreeOstreeUpdate(context.Background(), ostreeOstreeRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
