/*
Pulp 3 API

Testing RemotesUlnApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/v3/release"
)

func Test_zest_RemotesUlnApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesUlnApiService RemotesRpmUlnAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmUlnRemoteHref string

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnAddRole(context.Background(), rpmUlnRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmUlnRemoteHref string

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnDelete(context.Background(), rpmUlnRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmUlnRemoteHref string

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnListRoles(context.Background(), rpmUlnRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmUlnRemoteHref string

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnMyPermissions(context.Background(), rpmUlnRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmUlnRemoteHref string

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnPartialUpdate(context.Background(), rpmUlnRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmUlnRemoteHref string

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnRead(context.Background(), rpmUlnRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmUlnRemoteHref string

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnRemoveRole(context.Background(), rpmUlnRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesUlnApiService RemotesRpmUlnUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rpmUlnRemoteHref string

		resp, httpRes, err := apiClient.RemotesUlnApi.RemotesRpmUlnUpdate(context.Background(), rpmUlnRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
