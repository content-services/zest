/*
Pulp 3 API

Testing RemotesNpmAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2025"
)

func Test_zest_RemotesNpmAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemotesNpmAPIService RemotesNpmNpmCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RemotesNpmAPI.RemotesNpmNpmCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesNpmAPIService RemotesNpmNpmDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var npmNpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesNpmAPI.RemotesNpmNpmDelete(context.Background(), npmNpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesNpmAPIService RemotesNpmNpmList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RemotesNpmAPI.RemotesNpmNpmList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesNpmAPIService RemotesNpmNpmPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var npmNpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesNpmAPI.RemotesNpmNpmPartialUpdate(context.Background(), npmNpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesNpmAPIService RemotesNpmNpmRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var npmNpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesNpmAPI.RemotesNpmNpmRead(context.Background(), npmNpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesNpmAPIService RemotesNpmNpmSetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var npmNpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesNpmAPI.RemotesNpmNpmSetLabel(context.Background(), npmNpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesNpmAPIService RemotesNpmNpmUnsetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var npmNpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesNpmAPI.RemotesNpmNpmUnsetLabel(context.Background(), npmNpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemotesNpmAPIService RemotesNpmNpmUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var npmNpmRemoteHref string

		resp, httpRes, err := apiClient.RemotesNpmAPI.RemotesNpmNpmUpdate(context.Background(), npmNpmRemoteHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
