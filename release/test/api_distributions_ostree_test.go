/*
Pulp 3 API

Testing DistributionsOstreeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2025"
)

func Test_zest_DistributionsOstreeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeAddRole(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeDelete(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeListRoles(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeMyPermissions(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreePartialUpdate(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeRead(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeRemoveRole(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeSetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeSetLabel(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeUnsetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeUnsetLabel(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DistributionsOstreeAPIService DistributionsOstreeOstreeUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ostreeOstreeDistributionHref string

		resp, httpRes, err := apiClient.DistributionsOstreeAPI.DistributionsOstreeOstreeUpdate(context.Background(), ostreeOstreeDistributionHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
