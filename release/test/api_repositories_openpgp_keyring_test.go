/*
Pulp 3 API

Testing RepositoriesOpenpgpKeyringAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package zest

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/content-services/zest/release/v2025"
)

func Test_zest_RepositoriesOpenpgpKeyringAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringAddRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringAddRole(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringCreate(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringDelete(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pulpDomain string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringList(context.Background(), pulpDomain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringListRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringListRoles(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringModify", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringModify(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringMyPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringMyPermissions(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringPartialUpdate(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringRead(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringRemoveRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringRemoveRole(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringSetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringSetLabel(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringUnsetLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringUnsetLabel(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesOpenpgpKeyringAPIService RepositoriesCoreOpenpgpKeyringUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openPGPKeyringHref string

		resp, httpRes, err := apiClient.RepositoriesOpenpgpKeyringAPI.RepositoriesCoreOpenpgpKeyringUpdate(context.Background(), openPGPKeyringHref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
