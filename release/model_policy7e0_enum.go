/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"fmt"
)

// Policy7e0Enum * `on_demand` - on_demand
type Policy7e0Enum string

// List of Policy7e0Enum
const (
	POLICY7E0ENUM_ON_DEMAND Policy7e0Enum = "on_demand"
)

// All allowed values of Policy7e0Enum enum
var AllowedPolicy7e0EnumEnumValues = []Policy7e0Enum{
	"on_demand",
}

func (v *Policy7e0Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Policy7e0Enum(value)
	for _, existing := range AllowedPolicy7e0EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Policy7e0Enum", value)
}

// NewPolicy7e0EnumFromValue returns a pointer to a valid Policy7e0Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicy7e0EnumFromValue(v string) (*Policy7e0Enum, error) {
	ev := Policy7e0Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Policy7e0Enum: valid values are %v", v, AllowedPolicy7e0EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Policy7e0Enum) IsValid() bool {
	for _, existing := range AllowedPolicy7e0EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Policy7e0Enum value
func (v Policy7e0Enum) Ptr() *Policy7e0Enum {
	return &v
}

type NullablePolicy7e0Enum struct {
	value *Policy7e0Enum
	isSet bool
}

func (v NullablePolicy7e0Enum) Get() *Policy7e0Enum {
	return v.value
}

func (v *NullablePolicy7e0Enum) Set(val *Policy7e0Enum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy7e0Enum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy7e0Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy7e0Enum(val *Policy7e0Enum) *NullablePolicy7e0Enum {
	return &NullablePolicy7e0Enum{value: val, isSet: true}
}

func (v NullablePolicy7e0Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy7e0Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

