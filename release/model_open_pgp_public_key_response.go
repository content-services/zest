/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"time"
)

// checks if the OpenPGPPublicKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenPGPPublicKeyResponse{}

// OpenPGPPublicKeyResponse A serializer for content types with no Artifact.
type OpenPGPPublicKeyResponse struct {
	PulpHref *string `json:"pulp_href,omitempty"`
	// The Pulp Resource Name (PRN).
	Prn *string `json:"prn,omitempty"`
	// Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	// Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`
	Fingerprint *string `json:"fingerprint,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	UserIds []NestedOpenPGPUserIDResponse `json:"user_ids,omitempty"`
	UserAttributes []NestedOpenPGPUserAttributeResponse `json:"user_attributes,omitempty"`
	PublicSubkeys []NestedOpenPGPPublicSubkeyResponse `json:"public_subkeys,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OpenPGPPublicKeyResponse OpenPGPPublicKeyResponse

// NewOpenPGPPublicKeyResponse instantiates a new OpenPGPPublicKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenPGPPublicKeyResponse() *OpenPGPPublicKeyResponse {
	this := OpenPGPPublicKeyResponse{}
	return &this
}

// NewOpenPGPPublicKeyResponseWithDefaults instantiates a new OpenPGPPublicKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenPGPPublicKeyResponseWithDefaults() *OpenPGPPublicKeyResponse {
	this := OpenPGPPublicKeyResponse{}
	return &this
}

// GetPulpHref returns the PulpHref field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetPulpHref() string {
	if o == nil || IsNil(o.PulpHref) {
		var ret string
		return ret
	}
	return *o.PulpHref
}

// GetPulpHrefOk returns a tuple with the PulpHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetPulpHrefOk() (*string, bool) {
	if o == nil || IsNil(o.PulpHref) {
		return nil, false
	}
	return o.PulpHref, true
}

// HasPulpHref returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasPulpHref() bool {
	if o != nil && !IsNil(o.PulpHref) {
		return true
	}

	return false
}

// SetPulpHref gets a reference to the given string and assigns it to the PulpHref field.
func (o *OpenPGPPublicKeyResponse) SetPulpHref(v string) {
	o.PulpHref = &v
}

// GetPrn returns the Prn field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetPrn() string {
	if o == nil || IsNil(o.Prn) {
		var ret string
		return ret
	}
	return *o.Prn
}

// GetPrnOk returns a tuple with the Prn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetPrnOk() (*string, bool) {
	if o == nil || IsNil(o.Prn) {
		return nil, false
	}
	return o.Prn, true
}

// HasPrn returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasPrn() bool {
	if o != nil && !IsNil(o.Prn) {
		return true
	}

	return false
}

// SetPrn gets a reference to the given string and assigns it to the Prn field.
func (o *OpenPGPPublicKeyResponse) SetPrn(v string) {
	o.Prn = &v
}

// GetPulpCreated returns the PulpCreated field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetPulpCreated() time.Time {
	if o == nil || IsNil(o.PulpCreated) {
		var ret time.Time
		return ret
	}
	return *o.PulpCreated
}

// GetPulpCreatedOk returns a tuple with the PulpCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetPulpCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PulpCreated) {
		return nil, false
	}
	return o.PulpCreated, true
}

// HasPulpCreated returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasPulpCreated() bool {
	if o != nil && !IsNil(o.PulpCreated) {
		return true
	}

	return false
}

// SetPulpCreated gets a reference to the given time.Time and assigns it to the PulpCreated field.
func (o *OpenPGPPublicKeyResponse) SetPulpCreated(v time.Time) {
	o.PulpCreated = &v
}

// GetPulpLastUpdated returns the PulpLastUpdated field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetPulpLastUpdated() time.Time {
	if o == nil || IsNil(o.PulpLastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.PulpLastUpdated
}

// GetPulpLastUpdatedOk returns a tuple with the PulpLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetPulpLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PulpLastUpdated) {
		return nil, false
	}
	return o.PulpLastUpdated, true
}

// HasPulpLastUpdated returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasPulpLastUpdated() bool {
	if o != nil && !IsNil(o.PulpLastUpdated) {
		return true
	}

	return false
}

// SetPulpLastUpdated gets a reference to the given time.Time and assigns it to the PulpLastUpdated field.
func (o *OpenPGPPublicKeyResponse) SetPulpLastUpdated(v time.Time) {
	o.PulpLastUpdated = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *OpenPGPPublicKeyResponse) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *OpenPGPPublicKeyResponse) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetUserIds() []NestedOpenPGPUserIDResponse {
	if o == nil || IsNil(o.UserIds) {
		var ret []NestedOpenPGPUserIDResponse
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetUserIdsOk() ([]NestedOpenPGPUserIDResponse, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []NestedOpenPGPUserIDResponse and assigns it to the UserIds field.
func (o *OpenPGPPublicKeyResponse) SetUserIds(v []NestedOpenPGPUserIDResponse) {
	o.UserIds = v
}

// GetUserAttributes returns the UserAttributes field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetUserAttributes() []NestedOpenPGPUserAttributeResponse {
	if o == nil || IsNil(o.UserAttributes) {
		var ret []NestedOpenPGPUserAttributeResponse
		return ret
	}
	return o.UserAttributes
}

// GetUserAttributesOk returns a tuple with the UserAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetUserAttributesOk() ([]NestedOpenPGPUserAttributeResponse, bool) {
	if o == nil || IsNil(o.UserAttributes) {
		return nil, false
	}
	return o.UserAttributes, true
}

// HasUserAttributes returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasUserAttributes() bool {
	if o != nil && !IsNil(o.UserAttributes) {
		return true
	}

	return false
}

// SetUserAttributes gets a reference to the given []NestedOpenPGPUserAttributeResponse and assigns it to the UserAttributes field.
func (o *OpenPGPPublicKeyResponse) SetUserAttributes(v []NestedOpenPGPUserAttributeResponse) {
	o.UserAttributes = v
}

// GetPublicSubkeys returns the PublicSubkeys field value if set, zero value otherwise.
func (o *OpenPGPPublicKeyResponse) GetPublicSubkeys() []NestedOpenPGPPublicSubkeyResponse {
	if o == nil || IsNil(o.PublicSubkeys) {
		var ret []NestedOpenPGPPublicSubkeyResponse
		return ret
	}
	return o.PublicSubkeys
}

// GetPublicSubkeysOk returns a tuple with the PublicSubkeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenPGPPublicKeyResponse) GetPublicSubkeysOk() ([]NestedOpenPGPPublicSubkeyResponse, bool) {
	if o == nil || IsNil(o.PublicSubkeys) {
		return nil, false
	}
	return o.PublicSubkeys, true
}

// HasPublicSubkeys returns a boolean if a field has been set.
func (o *OpenPGPPublicKeyResponse) HasPublicSubkeys() bool {
	if o != nil && !IsNil(o.PublicSubkeys) {
		return true
	}

	return false
}

// SetPublicSubkeys gets a reference to the given []NestedOpenPGPPublicSubkeyResponse and assigns it to the PublicSubkeys field.
func (o *OpenPGPPublicKeyResponse) SetPublicSubkeys(v []NestedOpenPGPPublicSubkeyResponse) {
	o.PublicSubkeys = v
}

func (o OpenPGPPublicKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenPGPPublicKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PulpHref) {
		toSerialize["pulp_href"] = o.PulpHref
	}
	if !IsNil(o.Prn) {
		toSerialize["prn"] = o.Prn
	}
	if !IsNil(o.PulpCreated) {
		toSerialize["pulp_created"] = o.PulpCreated
	}
	if !IsNil(o.PulpLastUpdated) {
		toSerialize["pulp_last_updated"] = o.PulpLastUpdated
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.UserIds) {
		toSerialize["user_ids"] = o.UserIds
	}
	if !IsNil(o.UserAttributes) {
		toSerialize["user_attributes"] = o.UserAttributes
	}
	if !IsNil(o.PublicSubkeys) {
		toSerialize["public_subkeys"] = o.PublicSubkeys
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OpenPGPPublicKeyResponse) UnmarshalJSON(data []byte) (err error) {
	varOpenPGPPublicKeyResponse := _OpenPGPPublicKeyResponse{}

	err = json.Unmarshal(data, &varOpenPGPPublicKeyResponse)

	if err != nil {
		return err
	}

	*o = OpenPGPPublicKeyResponse(varOpenPGPPublicKeyResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pulp_href")
		delete(additionalProperties, "prn")
		delete(additionalProperties, "pulp_created")
		delete(additionalProperties, "pulp_last_updated")
		delete(additionalProperties, "fingerprint")
		delete(additionalProperties, "created")
		delete(additionalProperties, "user_ids")
		delete(additionalProperties, "user_attributes")
		delete(additionalProperties, "public_subkeys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOpenPGPPublicKeyResponse struct {
	value *OpenPGPPublicKeyResponse
	isSet bool
}

func (v NullableOpenPGPPublicKeyResponse) Get() *OpenPGPPublicKeyResponse {
	return v.value
}

func (v *NullableOpenPGPPublicKeyResponse) Set(val *OpenPGPPublicKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenPGPPublicKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenPGPPublicKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenPGPPublicKeyResponse(val *OpenPGPPublicKeyResponse) *NullableOpenPGPPublicKeyResponse {
	return &NullableOpenPGPPublicKeyResponse{value: val, isSet: true}
}

func (v NullableOpenPGPPublicKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenPGPPublicKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


