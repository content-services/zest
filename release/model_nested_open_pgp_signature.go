/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the NestedOpenPGPSignature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NestedOpenPGPSignature{}

// NestedOpenPGPSignature Base serializer for use with [pulpcore.app.models.Model][]This ensures that all Serializers provide values for the 'pulp_href` field.The class provides a default for the ``ref_name`` attribute in theModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitionsof plugins are namespaced properly.
type NestedOpenPGPSignature struct {
	Issuer NullableString `json:"issuer,omitempty"`
	Created time.Time `json:"created"`
	ExpirationTime NullableString `json:"expiration_time,omitempty"`
	SignersUserId NullableString `json:"signers_user_id,omitempty"`
	KeyExpirationTime NullableString `json:"key_expiration_time,omitempty"`
	Expired bool `json:"expired"`
	AdditionalProperties map[string]interface{}
}

type _NestedOpenPGPSignature NestedOpenPGPSignature

// NewNestedOpenPGPSignature instantiates a new NestedOpenPGPSignature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedOpenPGPSignature(created time.Time, expired bool) *NestedOpenPGPSignature {
	this := NestedOpenPGPSignature{}
	this.Created = created
	this.Expired = expired
	return &this
}

// NewNestedOpenPGPSignatureWithDefaults instantiates a new NestedOpenPGPSignature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedOpenPGPSignatureWithDefaults() *NestedOpenPGPSignature {
	this := NestedOpenPGPSignature{}
	return &this
}

// GetIssuer returns the Issuer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NestedOpenPGPSignature) GetIssuer() string {
	if o == nil || IsNil(o.Issuer.Get()) {
		var ret string
		return ret
	}
	return *o.Issuer.Get()
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NestedOpenPGPSignature) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Issuer.Get(), o.Issuer.IsSet()
}

// HasIssuer returns a boolean if a field has been set.
func (o *NestedOpenPGPSignature) HasIssuer() bool {
	if o != nil && o.Issuer.IsSet() {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given NullableString and assigns it to the Issuer field.
func (o *NestedOpenPGPSignature) SetIssuer(v string) {
	o.Issuer.Set(&v)
}
// SetIssuerNil sets the value for Issuer to be an explicit nil
func (o *NestedOpenPGPSignature) SetIssuerNil() {
	o.Issuer.Set(nil)
}

// UnsetIssuer ensures that no value is present for Issuer, not even an explicit nil
func (o *NestedOpenPGPSignature) UnsetIssuer() {
	o.Issuer.Unset()
}

// GetCreated returns the Created field value
func (o *NestedOpenPGPSignature) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *NestedOpenPGPSignature) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *NestedOpenPGPSignature) SetCreated(v time.Time) {
	o.Created = v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NestedOpenPGPSignature) GetExpirationTime() string {
	if o == nil || IsNil(o.ExpirationTime.Get()) {
		var ret string
		return ret
	}
	return *o.ExpirationTime.Get()
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NestedOpenPGPSignature) GetExpirationTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationTime.Get(), o.ExpirationTime.IsSet()
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *NestedOpenPGPSignature) HasExpirationTime() bool {
	if o != nil && o.ExpirationTime.IsSet() {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given NullableString and assigns it to the ExpirationTime field.
func (o *NestedOpenPGPSignature) SetExpirationTime(v string) {
	o.ExpirationTime.Set(&v)
}
// SetExpirationTimeNil sets the value for ExpirationTime to be an explicit nil
func (o *NestedOpenPGPSignature) SetExpirationTimeNil() {
	o.ExpirationTime.Set(nil)
}

// UnsetExpirationTime ensures that no value is present for ExpirationTime, not even an explicit nil
func (o *NestedOpenPGPSignature) UnsetExpirationTime() {
	o.ExpirationTime.Unset()
}

// GetSignersUserId returns the SignersUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NestedOpenPGPSignature) GetSignersUserId() string {
	if o == nil || IsNil(o.SignersUserId.Get()) {
		var ret string
		return ret
	}
	return *o.SignersUserId.Get()
}

// GetSignersUserIdOk returns a tuple with the SignersUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NestedOpenPGPSignature) GetSignersUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignersUserId.Get(), o.SignersUserId.IsSet()
}

// HasSignersUserId returns a boolean if a field has been set.
func (o *NestedOpenPGPSignature) HasSignersUserId() bool {
	if o != nil && o.SignersUserId.IsSet() {
		return true
	}

	return false
}

// SetSignersUserId gets a reference to the given NullableString and assigns it to the SignersUserId field.
func (o *NestedOpenPGPSignature) SetSignersUserId(v string) {
	o.SignersUserId.Set(&v)
}
// SetSignersUserIdNil sets the value for SignersUserId to be an explicit nil
func (o *NestedOpenPGPSignature) SetSignersUserIdNil() {
	o.SignersUserId.Set(nil)
}

// UnsetSignersUserId ensures that no value is present for SignersUserId, not even an explicit nil
func (o *NestedOpenPGPSignature) UnsetSignersUserId() {
	o.SignersUserId.Unset()
}

// GetKeyExpirationTime returns the KeyExpirationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NestedOpenPGPSignature) GetKeyExpirationTime() string {
	if o == nil || IsNil(o.KeyExpirationTime.Get()) {
		var ret string
		return ret
	}
	return *o.KeyExpirationTime.Get()
}

// GetKeyExpirationTimeOk returns a tuple with the KeyExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NestedOpenPGPSignature) GetKeyExpirationTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyExpirationTime.Get(), o.KeyExpirationTime.IsSet()
}

// HasKeyExpirationTime returns a boolean if a field has been set.
func (o *NestedOpenPGPSignature) HasKeyExpirationTime() bool {
	if o != nil && o.KeyExpirationTime.IsSet() {
		return true
	}

	return false
}

// SetKeyExpirationTime gets a reference to the given NullableString and assigns it to the KeyExpirationTime field.
func (o *NestedOpenPGPSignature) SetKeyExpirationTime(v string) {
	o.KeyExpirationTime.Set(&v)
}
// SetKeyExpirationTimeNil sets the value for KeyExpirationTime to be an explicit nil
func (o *NestedOpenPGPSignature) SetKeyExpirationTimeNil() {
	o.KeyExpirationTime.Set(nil)
}

// UnsetKeyExpirationTime ensures that no value is present for KeyExpirationTime, not even an explicit nil
func (o *NestedOpenPGPSignature) UnsetKeyExpirationTime() {
	o.KeyExpirationTime.Unset()
}

// GetExpired returns the Expired field value
func (o *NestedOpenPGPSignature) GetExpired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value
// and a boolean to check if the value has been set.
func (o *NestedOpenPGPSignature) GetExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expired, true
}

// SetExpired sets field value
func (o *NestedOpenPGPSignature) SetExpired(v bool) {
	o.Expired = v
}

func (o NestedOpenPGPSignature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NestedOpenPGPSignature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Issuer.IsSet() {
		toSerialize["issuer"] = o.Issuer.Get()
	}
	toSerialize["created"] = o.Created
	if o.ExpirationTime.IsSet() {
		toSerialize["expiration_time"] = o.ExpirationTime.Get()
	}
	if o.SignersUserId.IsSet() {
		toSerialize["signers_user_id"] = o.SignersUserId.Get()
	}
	if o.KeyExpirationTime.IsSet() {
		toSerialize["key_expiration_time"] = o.KeyExpirationTime.Get()
	}
	toSerialize["expired"] = o.Expired

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NestedOpenPGPSignature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"expired",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNestedOpenPGPSignature := _NestedOpenPGPSignature{}

	err = json.Unmarshal(data, &varNestedOpenPGPSignature)

	if err != nil {
		return err
	}

	*o = NestedOpenPGPSignature(varNestedOpenPGPSignature)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "issuer")
		delete(additionalProperties, "created")
		delete(additionalProperties, "expiration_time")
		delete(additionalProperties, "signers_user_id")
		delete(additionalProperties, "key_expiration_time")
		delete(additionalProperties, "expired")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNestedOpenPGPSignature struct {
	value *NestedOpenPGPSignature
	isSet bool
}

func (v NullableNestedOpenPGPSignature) Get() *NestedOpenPGPSignature {
	return v.value
}

func (v *NullableNestedOpenPGPSignature) Set(val *NestedOpenPGPSignature) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedOpenPGPSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedOpenPGPSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedOpenPGPSignature(val *NestedOpenPGPSignature) *NullableNestedOpenPGPSignature {
	return &NullableNestedOpenPGPSignature{value: val, isSet: true}
}

func (v NullableNestedOpenPGPSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedOpenPGPSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


