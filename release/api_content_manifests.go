/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentManifestsAPIService ContentManifestsAPI service
type ContentManifestsAPIService service

type ContentManifestsAPIContentContainerManifestsListRequest struct {
	ctx context.Context
	ApiService *ContentManifestsAPIService
	pulpDomain string
	digest *string
	digestIn *[]string
	isBootable *bool
	isFlatpak *bool
	limit *int32
	mediaType *[]string
	offset *int32
	ordering *[]string
	orphanedFor *float32
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where digest matches value
func (r ContentManifestsAPIContentContainerManifestsListRequest) Digest(digest string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.digest = &digest
	return r
}

// Filter results where digest is in a comma-separated list of values
func (r ContentManifestsAPIContentContainerManifestsListRequest) DigestIn(digestIn []string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.digestIn = &digestIn
	return r
}

// Filter results where is_bootable matches value
func (r ContentManifestsAPIContentContainerManifestsListRequest) IsBootable(isBootable bool) ContentManifestsAPIContentContainerManifestsListRequest {
	r.isBootable = &isBootable
	return r
}

// Filter results where is_flatpak matches value
func (r ContentManifestsAPIContentContainerManifestsListRequest) IsFlatpak(isFlatpak bool) ContentManifestsAPIContentContainerManifestsListRequest {
	r.isFlatpak = &isFlatpak
	return r
}

// Number of results to return per page.
func (r ContentManifestsAPIContentContainerManifestsListRequest) Limit(limit int32) ContentManifestsAPIContentContainerManifestsListRequest {
	r.limit = &limit
	return r
}

// * &#x60;application/vnd.docker.distribution.manifest.v1+json&#x60; - application/vnd.docker.distribution.manifest.v1+json* &#x60;application/vnd.docker.distribution.manifest.v2+json&#x60; - application/vnd.docker.distribution.manifest.v2+json* &#x60;application/vnd.docker.distribution.manifest.list.v2+json&#x60; - application/vnd.docker.distribution.manifest.list.v2+json* &#x60;application/vnd.oci.image.manifest.v1+json&#x60; - application/vnd.oci.image.manifest.v1+json* &#x60;application/vnd.oci.image.index.v1+json&#x60; - application/vnd.oci.image.index.v1+json
func (r ContentManifestsAPIContentContainerManifestsListRequest) MediaType(mediaType []string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.mediaType = &mediaType
	return r
}

// The initial index from which to return the results.
func (r ContentManifestsAPIContentContainerManifestsListRequest) Offset(offset int32) ContentManifestsAPIContentContainerManifestsListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;upstream_id&#x60; - Upstream id* &#x60;-upstream_id&#x60; - Upstream id (descending)* &#x60;pulp_labels&#x60; - Pulp labels* &#x60;-pulp_labels&#x60; - Pulp labels (descending)* &#x60;timestamp_of_interest&#x60; - Timestamp of interest* &#x60;-timestamp_of_interest&#x60; - Timestamp of interest (descending)* &#x60;digest&#x60; - Digest* &#x60;-digest&#x60; - Digest (descending)* &#x60;schema_version&#x60; - Schema version* &#x60;-schema_version&#x60; - Schema version (descending)* &#x60;media_type&#x60; - Media type* &#x60;-media_type&#x60; - Media type (descending)* &#x60;type&#x60; - Type* &#x60;-type&#x60; - Type (descending)* &#x60;data&#x60; - Data* &#x60;-data&#x60; - Data (descending)* &#x60;annotations&#x60; - Annotations* &#x60;-annotations&#x60; - Annotations (descending)* &#x60;labels&#x60; - Labels* &#x60;-labels&#x60; - Labels (descending)* &#x60;architecture&#x60; - Architecture* &#x60;-architecture&#x60; - Architecture (descending)* &#x60;os&#x60; - Os* &#x60;-os&#x60; - Os (descending)* &#x60;compressed_image_size&#x60; - Compressed image size* &#x60;-compressed_image_size&#x60; - Compressed image size (descending)* &#x60;is_bootable&#x60; - Is bootable* &#x60;-is_bootable&#x60; - Is bootable (descending)* &#x60;is_flatpak&#x60; - Is flatpak* &#x60;-is_flatpak&#x60; - Is flatpak (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r ContentManifestsAPIContentContainerManifestsListRequest) Ordering(ordering []string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.ordering = &ordering
	return r
}

// Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
func (r ContentManifestsAPIContentContainerManifestsListRequest) OrphanedFor(orphanedFor float32) ContentManifestsAPIContentContainerManifestsListRequest {
	r.orphanedFor = &orphanedFor
	return r
}

// Multiple values may be separated by commas.
func (r ContentManifestsAPIContentContainerManifestsListRequest) PrnIn(prnIn []string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentManifestsAPIContentContainerManifestsListRequest) PulpHrefIn(pulpHrefIn []string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentManifestsAPIContentContainerManifestsListRequest) PulpIdIn(pulpIdIn []string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r ContentManifestsAPIContentContainerManifestsListRequest) PulpLabelSelect(pulpLabelSelect string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r ContentManifestsAPIContentContainerManifestsListRequest) Q(q string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.q = &q
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentManifestsAPIContentContainerManifestsListRequest) RepositoryVersion(repositoryVersion string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentManifestsAPIContentContainerManifestsListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentManifestsAPIContentContainerManifestsListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// A list of fields to include in the response.
func (r ContentManifestsAPIContentContainerManifestsListRequest) Fields(fields []string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentManifestsAPIContentContainerManifestsListRequest) ExcludeFields(excludeFields []string) ContentManifestsAPIContentContainerManifestsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentManifestsAPIContentContainerManifestsListRequest) Execute() (*PaginatedcontainerManifestResponseList, *http.Response, error) {
	return r.ApiService.ContentContainerManifestsListExecute(r)
}

/*
ContentContainerManifestsList List manifests

ViewSet for Manifest.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentManifestsAPIContentContainerManifestsListRequest
*/
func (a *ContentManifestsAPIService) ContentContainerManifestsList(ctx context.Context, pulpDomain string) ContentManifestsAPIContentContainerManifestsListRequest {
	return ContentManifestsAPIContentContainerManifestsListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedcontainerManifestResponseList
func (a *ContentManifestsAPIService) ContentContainerManifestsListExecute(r ContentManifestsAPIContentContainerManifestsListRequest) (*PaginatedcontainerManifestResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedcontainerManifestResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentManifestsAPIService.ContentContainerManifestsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/content/container/manifests/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.digest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digest", r.digest, "form", "")
	}
	if r.digestIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "digest__in", r.digestIn, "form", "csv")
	}
	if r.isBootable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_bootable", r.isBootable, "form", "")
	}
	if r.isFlatpak != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_flatpak", r.isFlatpak, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.mediaType != nil {
		t := *r.mediaType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "media_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "media_type", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.orphanedFor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphaned_for", r.orphanedFor, "form", "")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "form", "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "form", "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentManifestsAPIContentContainerManifestsReadRequest struct {
	ctx context.Context
	ApiService *ContentManifestsAPIService
	containerManifestHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentManifestsAPIContentContainerManifestsReadRequest) Fields(fields []string) ContentManifestsAPIContentContainerManifestsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentManifestsAPIContentContainerManifestsReadRequest) ExcludeFields(excludeFields []string) ContentManifestsAPIContentContainerManifestsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentManifestsAPIContentContainerManifestsReadRequest) Execute() (*ContainerManifestResponse, *http.Response, error) {
	return r.ApiService.ContentContainerManifestsReadExecute(r)
}

/*
ContentContainerManifestsRead Inspect a manifest

ViewSet for Manifest.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerManifestHref
 @return ContentManifestsAPIContentContainerManifestsReadRequest
*/
func (a *ContentManifestsAPIService) ContentContainerManifestsRead(ctx context.Context, containerManifestHref string) ContentManifestsAPIContentContainerManifestsReadRequest {
	return ContentManifestsAPIContentContainerManifestsReadRequest{
		ApiService: a,
		ctx: ctx,
		containerManifestHref: containerManifestHref,
	}
}

// Execute executes the request
//  @return ContainerManifestResponse
func (a *ContentManifestsAPIService) ContentContainerManifestsReadExecute(r ContentManifestsAPIContentContainerManifestsReadRequest) (*ContainerManifestResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContainerManifestResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentManifestsAPIService.ContentContainerManifestsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_manifest_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_manifest_href"+"}", url.PathEscape(parameterValueToString(r.containerManifestHref, "containerManifestHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentManifestsAPIContentContainerManifestsSetLabelRequest struct {
	ctx context.Context
	ApiService *ContentManifestsAPIService
	containerManifestHref string
	setLabel *SetLabel
}

func (r ContentManifestsAPIContentContainerManifestsSetLabelRequest) SetLabel(setLabel SetLabel) ContentManifestsAPIContentContainerManifestsSetLabelRequest {
	r.setLabel = &setLabel
	return r
}

func (r ContentManifestsAPIContentContainerManifestsSetLabelRequest) Execute() (*SetLabelResponse, *http.Response, error) {
	return r.ApiService.ContentContainerManifestsSetLabelExecute(r)
}

/*
ContentContainerManifestsSetLabel Set a label

Set a single pulp_label on the object to a specific value or null.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerManifestHref
 @return ContentManifestsAPIContentContainerManifestsSetLabelRequest
*/
func (a *ContentManifestsAPIService) ContentContainerManifestsSetLabel(ctx context.Context, containerManifestHref string) ContentManifestsAPIContentContainerManifestsSetLabelRequest {
	return ContentManifestsAPIContentContainerManifestsSetLabelRequest{
		ApiService: a,
		ctx: ctx,
		containerManifestHref: containerManifestHref,
	}
}

// Execute executes the request
//  @return SetLabelResponse
func (a *ContentManifestsAPIService) ContentContainerManifestsSetLabelExecute(r ContentManifestsAPIContentContainerManifestsSetLabelRequest) (*SetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentManifestsAPIService.ContentContainerManifestsSetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_manifest_href}set_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_manifest_href"+"}", url.PathEscape(parameterValueToString(r.containerManifestHref, "containerManifestHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setLabel == nil {
		return localVarReturnValue, nil, reportError("setLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentManifestsAPIContentContainerManifestsUnsetLabelRequest struct {
	ctx context.Context
	ApiService *ContentManifestsAPIService
	containerManifestHref string
	unsetLabel *UnsetLabel
}

func (r ContentManifestsAPIContentContainerManifestsUnsetLabelRequest) UnsetLabel(unsetLabel UnsetLabel) ContentManifestsAPIContentContainerManifestsUnsetLabelRequest {
	r.unsetLabel = &unsetLabel
	return r
}

func (r ContentManifestsAPIContentContainerManifestsUnsetLabelRequest) Execute() (*UnsetLabelResponse, *http.Response, error) {
	return r.ApiService.ContentContainerManifestsUnsetLabelExecute(r)
}

/*
ContentContainerManifestsUnsetLabel Unset a label

Unset a single pulp_label on the object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerManifestHref
 @return ContentManifestsAPIContentContainerManifestsUnsetLabelRequest
*/
func (a *ContentManifestsAPIService) ContentContainerManifestsUnsetLabel(ctx context.Context, containerManifestHref string) ContentManifestsAPIContentContainerManifestsUnsetLabelRequest {
	return ContentManifestsAPIContentContainerManifestsUnsetLabelRequest{
		ApiService: a,
		ctx: ctx,
		containerManifestHref: containerManifestHref,
	}
}

// Execute executes the request
//  @return UnsetLabelResponse
func (a *ContentManifestsAPIService) ContentContainerManifestsUnsetLabelExecute(r ContentManifestsAPIContentContainerManifestsUnsetLabelRequest) (*UnsetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentManifestsAPIService.ContentContainerManifestsUnsetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{container_manifest_href}unset_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"container_manifest_href"+"}", url.PathEscape(parameterValueToString(r.containerManifestHref, "containerManifestHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsetLabel == nil {
		return localVarReturnValue, nil, reportError("unsetLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsetLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
