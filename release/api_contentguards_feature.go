/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentguardsFeatureAPIService ContentguardsFeatureAPI service
type ContentguardsFeatureAPIService service

type ContentguardsFeatureAPIContentguardsServiceFeatureAddRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	serviceFeatureContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureAddRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsFeatureAPIContentguardsServiceFeatureAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureAddRoleExecute(r)
}

/*
ContentguardsServiceFeatureAddRole Add a role

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceFeatureContentGuardHref
 @return ContentguardsFeatureAPIContentguardsServiceFeatureAddRoleRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureAddRole(ctx context.Context, serviceFeatureContentGuardHref string) ContentguardsFeatureAPIContentguardsServiceFeatureAddRoleRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		serviceFeatureContentGuardHref: serviceFeatureContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureAddRoleExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{service_feature_content_guard_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"service_feature_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.serviceFeatureContentGuardHref, "serviceFeatureContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeatureCreateRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	pulpDomain string
	serviceFeatureContentGuard *ServiceFeatureContentGuard
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureCreateRequest) ServiceFeatureContentGuard(serviceFeatureContentGuard ServiceFeatureContentGuard) ContentguardsFeatureAPIContentguardsServiceFeatureCreateRequest {
	r.serviceFeatureContentGuard = &serviceFeatureContentGuard
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureCreateRequest) Execute() (*ServiceFeatureContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureCreateExecute(r)
}

/*
ContentguardsServiceFeatureCreate Create a feature content guard

Content guard to protect the content guarded by Subscription Features.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentguardsFeatureAPIContentguardsServiceFeatureCreateRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureCreate(ctx context.Context, pulpDomain string) ContentguardsFeatureAPIContentguardsServiceFeatureCreateRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return ServiceFeatureContentGuardResponse
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureCreateExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureCreateRequest) (*ServiceFeatureContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceFeatureContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/contentguards/service/feature/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceFeatureContentGuard == nil {
		return localVarReturnValue, nil, reportError("serviceFeatureContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceFeatureContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeatureDeleteRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	serviceFeatureContentGuardHref string
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureDeleteExecute(r)
}

/*
ContentguardsServiceFeatureDelete Delete a feature content guard

Content guard to protect the content guarded by Subscription Features.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceFeatureContentGuardHref
 @return ContentguardsFeatureAPIContentguardsServiceFeatureDeleteRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureDelete(ctx context.Context, serviceFeatureContentGuardHref string) ContentguardsFeatureAPIContentguardsServiceFeatureDeleteRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureDeleteRequest{
		ApiService: a,
		ctx: ctx,
		serviceFeatureContentGuardHref: serviceFeatureContentGuardHref,
	}
}

// Execute executes the request
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureDeleteExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{service_feature_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_feature_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.serviceFeatureContentGuardHref, "serviceFeatureContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeatureListRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	pulpDomain string
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIexact *string
	nameIn *[]string
	nameIregex *string
	nameIstartswith *string
	nameRegex *string
	nameStartswith *string
	offset *int32
	ordering *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	q *string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) Limit(limit int32) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) Name(name string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) NameContains(nameContains string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) NameIcontains(nameIcontains string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name matches value
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) NameIexact(nameIexact string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.nameIexact = &nameIexact
	return r
}

// Filter results where name is in a comma-separated list of values
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) NameIn(nameIn []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name matches regex value
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) NameIregex(nameIregex string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.nameIregex = &nameIregex
	return r
}

// Filter results where name starts with value
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) NameIstartswith(nameIstartswith string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.nameIstartswith = &nameIstartswith
	return r
}

// Filter results where name matches regex value
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) NameRegex(nameRegex string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.nameRegex = &nameRegex
	return r
}

// Filter results where name starts with value
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) NameStartswith(nameStartswith string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) Offset(offset int32) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;description&#x60; - Description* &#x60;-description&#x60; - Description (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) Ordering(ordering []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) PrnIn(prnIn []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) PulpHrefIn(pulpHrefIn []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) PulpIdIn(pulpIdIn []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) Q(q string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.q = &q
	return r
}

// A list of fields to include in the response.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) Fields(fields []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) ExcludeFields(excludeFields []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) Execute() (*PaginatedserviceFeatureContentGuardResponseList, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureListExecute(r)
}

/*
ContentguardsServiceFeatureList List feature content guards

Content guard to protect the content guarded by Subscription Features.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentguardsFeatureAPIContentguardsServiceFeatureListRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureList(ctx context.Context, pulpDomain string) ContentguardsFeatureAPIContentguardsServiceFeatureListRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedserviceFeatureContentGuardResponseList
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureListExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureListRequest) (*PaginatedserviceFeatureContentGuardResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedserviceFeatureContentGuardResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/contentguards/service/feature/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "form", "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "form", "")
	}
	if r.nameIexact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iexact", r.nameIexact, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.nameIregex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iregex", r.nameIregex, "form", "")
	}
	if r.nameIstartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__istartswith", r.nameIstartswith, "form", "")
	}
	if r.nameRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__regex", r.nameRegex, "form", "")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	serviceFeatureContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest) Fields(fields []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest) ExcludeFields(excludeFields []string) ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureListRolesExecute(r)
}

/*
ContentguardsServiceFeatureListRoles List roles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceFeatureContentGuardHref
 @return ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureListRoles(ctx context.Context, serviceFeatureContentGuardHref string) ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest{
		ApiService: a,
		ctx: ctx,
		serviceFeatureContentGuardHref: serviceFeatureContentGuardHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureListRolesExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{service_feature_content_guard_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"service_feature_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.serviceFeatureContentGuardHref, "serviceFeatureContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	serviceFeatureContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest) Fields(fields []string) ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest) ExcludeFields(excludeFields []string) ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureMyPermissionsExecute(r)
}

/*
ContentguardsServiceFeatureMyPermissions List user permissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceFeatureContentGuardHref
 @return ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureMyPermissions(ctx context.Context, serviceFeatureContentGuardHref string) ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		serviceFeatureContentGuardHref: serviceFeatureContentGuardHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureMyPermissionsExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{service_feature_content_guard_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"service_feature_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.serviceFeatureContentGuardHref, "serviceFeatureContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeaturePartialUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	serviceFeatureContentGuardHref string
	patchedserviceFeatureContentGuard *PatchedserviceFeatureContentGuard
}

func (r ContentguardsFeatureAPIContentguardsServiceFeaturePartialUpdateRequest) PatchedserviceFeatureContentGuard(patchedserviceFeatureContentGuard PatchedserviceFeatureContentGuard) ContentguardsFeatureAPIContentguardsServiceFeaturePartialUpdateRequest {
	r.patchedserviceFeatureContentGuard = &patchedserviceFeatureContentGuard
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeaturePartialUpdateRequest) Execute() (*ServiceFeatureContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeaturePartialUpdateExecute(r)
}

/*
ContentguardsServiceFeaturePartialUpdate Update a feature content guard

Content guard to protect the content guarded by Subscription Features.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceFeatureContentGuardHref
 @return ContentguardsFeatureAPIContentguardsServiceFeaturePartialUpdateRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeaturePartialUpdate(ctx context.Context, serviceFeatureContentGuardHref string) ContentguardsFeatureAPIContentguardsServiceFeaturePartialUpdateRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeaturePartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		serviceFeatureContentGuardHref: serviceFeatureContentGuardHref,
	}
}

// Execute executes the request
//  @return ServiceFeatureContentGuardResponse
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeaturePartialUpdateExecute(r ContentguardsFeatureAPIContentguardsServiceFeaturePartialUpdateRequest) (*ServiceFeatureContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceFeatureContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeaturePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{service_feature_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_feature_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.serviceFeatureContentGuardHref, "serviceFeatureContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedserviceFeatureContentGuard == nil {
		return localVarReturnValue, nil, reportError("patchedserviceFeatureContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedserviceFeatureContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	serviceFeatureContentGuardHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest) Fields(fields []string) ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest) ExcludeFields(excludeFields []string) ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest) Execute() (*ServiceFeatureContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureReadExecute(r)
}

/*
ContentguardsServiceFeatureRead Inspect a feature content guard

Content guard to protect the content guarded by Subscription Features.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceFeatureContentGuardHref
 @return ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureRead(ctx context.Context, serviceFeatureContentGuardHref string) ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest{
		ApiService: a,
		ctx: ctx,
		serviceFeatureContentGuardHref: serviceFeatureContentGuardHref,
	}
}

// Execute executes the request
//  @return ServiceFeatureContentGuardResponse
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureReadExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureReadRequest) (*ServiceFeatureContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceFeatureContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{service_feature_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_feature_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.serviceFeatureContentGuardHref, "serviceFeatureContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeatureRemoveRoleRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	serviceFeatureContentGuardHref string
	nestedRole *NestedRole
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureRemoveRoleRequest) NestedRole(nestedRole NestedRole) ContentguardsFeatureAPIContentguardsServiceFeatureRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureRemoveRoleExecute(r)
}

/*
ContentguardsServiceFeatureRemoveRole Remove a role

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceFeatureContentGuardHref
 @return ContentguardsFeatureAPIContentguardsServiceFeatureRemoveRoleRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureRemoveRole(ctx context.Context, serviceFeatureContentGuardHref string) ContentguardsFeatureAPIContentguardsServiceFeatureRemoveRoleRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		serviceFeatureContentGuardHref: serviceFeatureContentGuardHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureRemoveRoleExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{service_feature_content_guard_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"service_feature_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.serviceFeatureContentGuardHref, "serviceFeatureContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentguardsFeatureAPIContentguardsServiceFeatureUpdateRequest struct {
	ctx context.Context
	ApiService *ContentguardsFeatureAPIService
	serviceFeatureContentGuardHref string
	serviceFeatureContentGuard *ServiceFeatureContentGuard
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureUpdateRequest) ServiceFeatureContentGuard(serviceFeatureContentGuard ServiceFeatureContentGuard) ContentguardsFeatureAPIContentguardsServiceFeatureUpdateRequest {
	r.serviceFeatureContentGuard = &serviceFeatureContentGuard
	return r
}

func (r ContentguardsFeatureAPIContentguardsServiceFeatureUpdateRequest) Execute() (*ServiceFeatureContentGuardResponse, *http.Response, error) {
	return r.ApiService.ContentguardsServiceFeatureUpdateExecute(r)
}

/*
ContentguardsServiceFeatureUpdate Update a feature content guard

Content guard to protect the content guarded by Subscription Features.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceFeatureContentGuardHref
 @return ContentguardsFeatureAPIContentguardsServiceFeatureUpdateRequest
*/
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureUpdate(ctx context.Context, serviceFeatureContentGuardHref string) ContentguardsFeatureAPIContentguardsServiceFeatureUpdateRequest {
	return ContentguardsFeatureAPIContentguardsServiceFeatureUpdateRequest{
		ApiService: a,
		ctx: ctx,
		serviceFeatureContentGuardHref: serviceFeatureContentGuardHref,
	}
}

// Execute executes the request
//  @return ServiceFeatureContentGuardResponse
func (a *ContentguardsFeatureAPIService) ContentguardsServiceFeatureUpdateExecute(r ContentguardsFeatureAPIContentguardsServiceFeatureUpdateRequest) (*ServiceFeatureContentGuardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceFeatureContentGuardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentguardsFeatureAPIService.ContentguardsServiceFeatureUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{service_feature_content_guard_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_feature_content_guard_href"+"}", url.PathEscape(parameterValueToString(r.serviceFeatureContentGuardHref, "serviceFeatureContentGuardHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceFeatureContentGuard == nil {
		return localVarReturnValue, nil, reportError("serviceFeatureContentGuard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceFeatureContentGuard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
