/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// UpstreamPulpsApiService UpstreamPulpsApi service
type UpstreamPulpsApiService service

type UpstreamPulpsApiUpstreamPulpsCreateRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsApiService
	upstreamPulp *UpstreamPulp
}

func (r UpstreamPulpsApiUpstreamPulpsCreateRequest) UpstreamPulp(upstreamPulp UpstreamPulp) UpstreamPulpsApiUpstreamPulpsCreateRequest {
	r.upstreamPulp = &upstreamPulp
	return r
}

func (r UpstreamPulpsApiUpstreamPulpsCreateRequest) Execute() (*UpstreamPulpResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsCreateExecute(r)
}

/*
UpstreamPulpsCreate Create an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UpstreamPulpsApiUpstreamPulpsCreateRequest
*/
func (a *UpstreamPulpsApiService) UpstreamPulpsCreate(ctx context.Context) UpstreamPulpsApiUpstreamPulpsCreateRequest {
	return UpstreamPulpsApiUpstreamPulpsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpstreamPulpResponse
func (a *UpstreamPulpsApiService) UpstreamPulpsCreateExecute(r UpstreamPulpsApiUpstreamPulpsCreateRequest) (*UpstreamPulpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamPulpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsApiService.UpstreamPulpsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/upstream-pulps/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.upstreamPulp == nil {
		return localVarReturnValue, nil, reportError("upstreamPulp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPulp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsApiUpstreamPulpsDeleteRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsApiService
	upstreamPulpHref string
}

func (r UpstreamPulpsApiUpstreamPulpsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpstreamPulpsDeleteExecute(r)
}

/*
UpstreamPulpsDelete Delete an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsApiUpstreamPulpsDeleteRequest
*/
func (a *UpstreamPulpsApiService) UpstreamPulpsDelete(ctx context.Context, upstreamPulpHref string) UpstreamPulpsApiUpstreamPulpsDeleteRequest {
	return UpstreamPulpsApiUpstreamPulpsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
func (a *UpstreamPulpsApiService) UpstreamPulpsDeleteExecute(r UpstreamPulpsApiUpstreamPulpsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsApiService.UpstreamPulpsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UpstreamPulpsApiUpstreamPulpsListRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsApiService
	limit *int32
	offset *int32
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r UpstreamPulpsApiUpstreamPulpsListRequest) Limit(limit int32) UpstreamPulpsApiUpstreamPulpsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r UpstreamPulpsApiUpstreamPulpsListRequest) Offset(offset int32) UpstreamPulpsApiUpstreamPulpsListRequest {
	r.offset = &offset
	return r
}

// A list of fields to include in the response.
func (r UpstreamPulpsApiUpstreamPulpsListRequest) Fields(fields []string) UpstreamPulpsApiUpstreamPulpsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r UpstreamPulpsApiUpstreamPulpsListRequest) ExcludeFields(excludeFields []string) UpstreamPulpsApiUpstreamPulpsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r UpstreamPulpsApiUpstreamPulpsListRequest) Execute() (*PaginatedUpstreamPulpResponseList, *http.Response, error) {
	return r.ApiService.UpstreamPulpsListExecute(r)
}

/*
UpstreamPulpsList List upstream pulps

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UpstreamPulpsApiUpstreamPulpsListRequest
*/
func (a *UpstreamPulpsApiService) UpstreamPulpsList(ctx context.Context) UpstreamPulpsApiUpstreamPulpsListRequest {
	return UpstreamPulpsApiUpstreamPulpsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedUpstreamPulpResponseList
func (a *UpstreamPulpsApiService) UpstreamPulpsListExecute(r UpstreamPulpsApiUpstreamPulpsListRequest) (*PaginatedUpstreamPulpResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedUpstreamPulpResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsApiService.UpstreamPulpsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/upstream-pulps/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsApiUpstreamPulpsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsApiService
	upstreamPulpHref string
	patchedUpstreamPulp *PatchedUpstreamPulp
}

func (r UpstreamPulpsApiUpstreamPulpsPartialUpdateRequest) PatchedUpstreamPulp(patchedUpstreamPulp PatchedUpstreamPulp) UpstreamPulpsApiUpstreamPulpsPartialUpdateRequest {
	r.patchedUpstreamPulp = &patchedUpstreamPulp
	return r
}

func (r UpstreamPulpsApiUpstreamPulpsPartialUpdateRequest) Execute() (*UpstreamPulpResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsPartialUpdateExecute(r)
}

/*
UpstreamPulpsPartialUpdate Update an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsApiUpstreamPulpsPartialUpdateRequest
*/
func (a *UpstreamPulpsApiService) UpstreamPulpsPartialUpdate(ctx context.Context, upstreamPulpHref string) UpstreamPulpsApiUpstreamPulpsPartialUpdateRequest {
	return UpstreamPulpsApiUpstreamPulpsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return UpstreamPulpResponse
func (a *UpstreamPulpsApiService) UpstreamPulpsPartialUpdateExecute(r UpstreamPulpsApiUpstreamPulpsPartialUpdateRequest) (*UpstreamPulpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamPulpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsApiService.UpstreamPulpsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedUpstreamPulp == nil {
		return localVarReturnValue, nil, reportError("patchedUpstreamPulp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedUpstreamPulp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsApiUpstreamPulpsReadRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsApiService
	upstreamPulpHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r UpstreamPulpsApiUpstreamPulpsReadRequest) Fields(fields []string) UpstreamPulpsApiUpstreamPulpsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r UpstreamPulpsApiUpstreamPulpsReadRequest) ExcludeFields(excludeFields []string) UpstreamPulpsApiUpstreamPulpsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r UpstreamPulpsApiUpstreamPulpsReadRequest) Execute() (*UpstreamPulpResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsReadExecute(r)
}

/*
UpstreamPulpsRead Inspect an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsApiUpstreamPulpsReadRequest
*/
func (a *UpstreamPulpsApiService) UpstreamPulpsRead(ctx context.Context, upstreamPulpHref string) UpstreamPulpsApiUpstreamPulpsReadRequest {
	return UpstreamPulpsApiUpstreamPulpsReadRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return UpstreamPulpResponse
func (a *UpstreamPulpsApiService) UpstreamPulpsReadExecute(r UpstreamPulpsApiUpstreamPulpsReadRequest) (*UpstreamPulpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamPulpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsApiService.UpstreamPulpsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsApiUpstreamPulpsReplicateRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsApiService
	upstreamPulpHref string
	upstreamPulp *UpstreamPulp
}

func (r UpstreamPulpsApiUpstreamPulpsReplicateRequest) UpstreamPulp(upstreamPulp UpstreamPulp) UpstreamPulpsApiUpstreamPulpsReplicateRequest {
	r.upstreamPulp = &upstreamPulp
	return r
}

func (r UpstreamPulpsApiUpstreamPulpsReplicateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsReplicateExecute(r)
}

/*
UpstreamPulpsReplicate Replicate

Trigger an asynchronous repository replication task group. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsApiUpstreamPulpsReplicateRequest
*/
func (a *UpstreamPulpsApiService) UpstreamPulpsReplicate(ctx context.Context, upstreamPulpHref string) UpstreamPulpsApiUpstreamPulpsReplicateRequest {
	return UpstreamPulpsApiUpstreamPulpsReplicateRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *UpstreamPulpsApiService) UpstreamPulpsReplicateExecute(r UpstreamPulpsApiUpstreamPulpsReplicateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsApiService.UpstreamPulpsReplicate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}replicate/"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.upstreamPulp == nil {
		return localVarReturnValue, nil, reportError("upstreamPulp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPulp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsApiUpstreamPulpsUpdateRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsApiService
	upstreamPulpHref string
	upstreamPulp *UpstreamPulp
}

func (r UpstreamPulpsApiUpstreamPulpsUpdateRequest) UpstreamPulp(upstreamPulp UpstreamPulp) UpstreamPulpsApiUpstreamPulpsUpdateRequest {
	r.upstreamPulp = &upstreamPulp
	return r
}

func (r UpstreamPulpsApiUpstreamPulpsUpdateRequest) Execute() (*UpstreamPulpResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsUpdateExecute(r)
}

/*
UpstreamPulpsUpdate Update an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsApiUpstreamPulpsUpdateRequest
*/
func (a *UpstreamPulpsApiService) UpstreamPulpsUpdate(ctx context.Context, upstreamPulpHref string) UpstreamPulpsApiUpstreamPulpsUpdateRequest {
	return UpstreamPulpsApiUpstreamPulpsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return UpstreamPulpResponse
func (a *UpstreamPulpsApiService) UpstreamPulpsUpdateExecute(r UpstreamPulpsApiUpstreamPulpsUpdateRequest) (*UpstreamPulpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamPulpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsApiService.UpstreamPulpsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.upstreamPulp == nil {
		return localVarReturnValue, nil, reportError("upstreamPulp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPulp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
