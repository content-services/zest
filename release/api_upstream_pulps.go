/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"reflect"
)


// UpstreamPulpsAPIService UpstreamPulpsAPI service
type UpstreamPulpsAPIService service

type UpstreamPulpsAPIUpstreamPulpsAddRoleRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
	nestedRole *NestedRole
}

func (r UpstreamPulpsAPIUpstreamPulpsAddRoleRequest) NestedRole(nestedRole NestedRole) UpstreamPulpsAPIUpstreamPulpsAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsAddRoleExecute(r)
}

/*
UpstreamPulpsAddRole Add a role

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsAddRoleRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsAddRole(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsAddRoleRequest {
	return UpstreamPulpsAPIUpstreamPulpsAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsAddRoleExecute(r UpstreamPulpsAPIUpstreamPulpsAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsCreateRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	pulpDomain string
	upstreamPulp *UpstreamPulp
}

func (r UpstreamPulpsAPIUpstreamPulpsCreateRequest) UpstreamPulp(upstreamPulp UpstreamPulp) UpstreamPulpsAPIUpstreamPulpsCreateRequest {
	r.upstreamPulp = &upstreamPulp
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsCreateRequest) Execute() (*UpstreamPulpResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsCreateExecute(r)
}

/*
UpstreamPulpsCreate Create an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return UpstreamPulpsAPIUpstreamPulpsCreateRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsCreate(ctx context.Context, pulpDomain string) UpstreamPulpsAPIUpstreamPulpsCreateRequest {
	return UpstreamPulpsAPIUpstreamPulpsCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return UpstreamPulpResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsCreateExecute(r UpstreamPulpsAPIUpstreamPulpsCreateRequest) (*UpstreamPulpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamPulpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/upstream-pulps/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.upstreamPulp == nil {
		return localVarReturnValue, nil, reportError("upstreamPulp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPulp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsDeleteRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
}

func (r UpstreamPulpsAPIUpstreamPulpsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpstreamPulpsDeleteExecute(r)
}

/*
UpstreamPulpsDelete Delete an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsDeleteRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsDelete(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsDeleteRequest {
	return UpstreamPulpsAPIUpstreamPulpsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
func (a *UpstreamPulpsAPIService) UpstreamPulpsDeleteExecute(r UpstreamPulpsAPIUpstreamPulpsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsListRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	pulpDomain string
	baseUrl *string
	baseUrlContains *string
	baseUrlIcontains *string
	baseUrlIexact *string
	baseUrlIn *[]string
	baseUrlIregex *string
	baseUrlIstartswith *string
	baseUrlRegex *string
	baseUrlStartswith *string
	lastReplication *time.Time
	lastReplicationGt *time.Time
	lastReplicationGte *time.Time
	lastReplicationLt *time.Time
	lastReplicationLte *time.Time
	lastReplicationRange *[]time.Time
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIexact *string
	nameIn *[]string
	nameIregex *string
	nameIstartswith *string
	nameRegex *string
	nameStartswith *string
	offset *int32
	ordering *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	q *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where base_url matches value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrl(baseUrl string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrl = &baseUrl
	return r
}

// Filter results where base_url contains value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrlContains(baseUrlContains string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrlContains = &baseUrlContains
	return r
}

// Filter results where base_url contains value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrlIcontains(baseUrlIcontains string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrlIcontains = &baseUrlIcontains
	return r
}

// Filter results where base_url matches value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrlIexact(baseUrlIexact string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrlIexact = &baseUrlIexact
	return r
}

// Filter results where base_url is in a comma-separated list of values
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrlIn(baseUrlIn []string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrlIn = &baseUrlIn
	return r
}

// Filter results where base_url matches regex value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrlIregex(baseUrlIregex string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrlIregex = &baseUrlIregex
	return r
}

// Filter results where base_url starts with value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrlIstartswith(baseUrlIstartswith string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrlIstartswith = &baseUrlIstartswith
	return r
}

// Filter results where base_url matches regex value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrlRegex(baseUrlRegex string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrlRegex = &baseUrlRegex
	return r
}

// Filter results where base_url starts with value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) BaseUrlStartswith(baseUrlStartswith string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.baseUrlStartswith = &baseUrlStartswith
	return r
}

// Filter results where last_replication matches value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) LastReplication(lastReplication time.Time) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.lastReplication = &lastReplication
	return r
}

// Filter results where last_replication is greater than value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) LastReplicationGt(lastReplicationGt time.Time) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.lastReplicationGt = &lastReplicationGt
	return r
}

// Filter results where last_replication is greater than or equal to value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) LastReplicationGte(lastReplicationGte time.Time) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.lastReplicationGte = &lastReplicationGte
	return r
}

// Filter results where last_replication is less than value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) LastReplicationLt(lastReplicationLt time.Time) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.lastReplicationLt = &lastReplicationLt
	return r
}

// Filter results where last_replication is less than or equal to value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) LastReplicationLte(lastReplicationLte time.Time) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.lastReplicationLte = &lastReplicationLte
	return r
}

// Filter results where last_replication is between two comma separated values
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) LastReplicationRange(lastReplicationRange []time.Time) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.lastReplicationRange = &lastReplicationRange
	return r
}

// Number of results to return per page.
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) Limit(limit int32) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) Name(name string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) NameContains(nameContains string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) NameIcontains(nameIcontains string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name matches value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) NameIexact(nameIexact string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.nameIexact = &nameIexact
	return r
}

// Filter results where name is in a comma-separated list of values
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) NameIn(nameIn []string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name matches regex value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) NameIregex(nameIregex string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.nameIregex = &nameIregex
	return r
}

// Filter results where name starts with value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) NameIstartswith(nameIstartswith string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.nameIstartswith = &nameIstartswith
	return r
}

// Filter results where name matches regex value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) NameRegex(nameRegex string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.nameRegex = &nameRegex
	return r
}

// Filter results where name starts with value
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) NameStartswith(nameStartswith string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) Offset(offset int32) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;base_url&#x60; - Base url* &#x60;-base_url&#x60; - Base url (descending)* &#x60;api_root&#x60; - Api root* &#x60;-api_root&#x60; - Api root (descending)* &#x60;domain&#x60; - Domain* &#x60;-domain&#x60; - Domain (descending)* &#x60;ca_cert&#x60; - Ca cert* &#x60;-ca_cert&#x60; - Ca cert (descending)* &#x60;client_cert&#x60; - Client cert* &#x60;-client_cert&#x60; - Client cert (descending)* &#x60;client_key&#x60; - Client key* &#x60;-client_key&#x60; - Client key (descending)* &#x60;tls_validation&#x60; - Tls validation* &#x60;-tls_validation&#x60; - Tls validation (descending)* &#x60;username&#x60; - Username* &#x60;-username&#x60; - Username (descending)* &#x60;password&#x60; - Password* &#x60;-password&#x60; - Password (descending)* &#x60;pulp_label_select&#x60; - Pulp label select* &#x60;-pulp_label_select&#x60; - Pulp label select (descending)* &#x60;q_select&#x60; - Q select* &#x60;-q_select&#x60; - Q select (descending)* &#x60;last_replication&#x60; - Last replication* &#x60;-last_replication&#x60; - Last replication (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) Ordering(ordering []string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) PrnIn(prnIn []string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) PulpHrefIn(pulpHrefIn []string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) PulpIdIn(pulpIdIn []string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) Q(q string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.q = &q
	return r
}

// A list of fields to include in the response.
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) Fields(fields []string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r UpstreamPulpsAPIUpstreamPulpsListRequest) ExcludeFields(excludeFields []string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsListRequest) Execute() (*PaginatedUpstreamPulpResponseList, *http.Response, error) {
	return r.ApiService.UpstreamPulpsListExecute(r)
}

/*
UpstreamPulpsList List upstream pulps

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return UpstreamPulpsAPIUpstreamPulpsListRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsList(ctx context.Context, pulpDomain string) UpstreamPulpsAPIUpstreamPulpsListRequest {
	return UpstreamPulpsAPIUpstreamPulpsListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedUpstreamPulpResponseList
func (a *UpstreamPulpsAPIService) UpstreamPulpsListExecute(r UpstreamPulpsAPIUpstreamPulpsListRequest) (*PaginatedUpstreamPulpResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedUpstreamPulpResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/upstream-pulps/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.baseUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url", r.baseUrl, "form", "")
	}
	if r.baseUrlContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url__contains", r.baseUrlContains, "form", "")
	}
	if r.baseUrlIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url__icontains", r.baseUrlIcontains, "form", "")
	}
	if r.baseUrlIexact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url__iexact", r.baseUrlIexact, "form", "")
	}
	if r.baseUrlIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url__in", r.baseUrlIn, "form", "csv")
	}
	if r.baseUrlIregex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url__iregex", r.baseUrlIregex, "form", "")
	}
	if r.baseUrlIstartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url__istartswith", r.baseUrlIstartswith, "form", "")
	}
	if r.baseUrlRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url__regex", r.baseUrlRegex, "form", "")
	}
	if r.baseUrlStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_url__startswith", r.baseUrlStartswith, "form", "")
	}
	if r.lastReplication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_replication", r.lastReplication, "form", "")
	}
	if r.lastReplicationGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_replication__gt", r.lastReplicationGt, "form", "")
	}
	if r.lastReplicationGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_replication__gte", r.lastReplicationGte, "form", "")
	}
	if r.lastReplicationLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_replication__lt", r.lastReplicationLt, "form", "")
	}
	if r.lastReplicationLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_replication__lte", r.lastReplicationLte, "form", "")
	}
	if r.lastReplicationRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_replication__range", r.lastReplicationRange, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "form", "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "form", "")
	}
	if r.nameIexact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iexact", r.nameIexact, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.nameIregex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iregex", r.nameIregex, "form", "")
	}
	if r.nameIstartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__istartswith", r.nameIstartswith, "form", "")
	}
	if r.nameRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__regex", r.nameRegex, "form", "")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsListRolesRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r UpstreamPulpsAPIUpstreamPulpsListRolesRequest) Fields(fields []string) UpstreamPulpsAPIUpstreamPulpsListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r UpstreamPulpsAPIUpstreamPulpsListRolesRequest) ExcludeFields(excludeFields []string) UpstreamPulpsAPIUpstreamPulpsListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsListRolesExecute(r)
}

/*
UpstreamPulpsListRoles List roles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsListRolesRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsListRoles(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsListRolesRequest {
	return UpstreamPulpsAPIUpstreamPulpsListRolesRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsListRolesExecute(r UpstreamPulpsAPIUpstreamPulpsListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest) Fields(fields []string) UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest) ExcludeFields(excludeFields []string) UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsMyPermissionsExecute(r)
}

/*
UpstreamPulpsMyPermissions List user permissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsMyPermissions(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest {
	return UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsMyPermissionsExecute(r UpstreamPulpsAPIUpstreamPulpsMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
	patchedUpstreamPulp *PatchedUpstreamPulp
}

func (r UpstreamPulpsAPIUpstreamPulpsPartialUpdateRequest) PatchedUpstreamPulp(patchedUpstreamPulp PatchedUpstreamPulp) UpstreamPulpsAPIUpstreamPulpsPartialUpdateRequest {
	r.patchedUpstreamPulp = &patchedUpstreamPulp
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsPartialUpdateRequest) Execute() (*UpstreamPulpResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsPartialUpdateExecute(r)
}

/*
UpstreamPulpsPartialUpdate Update an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsPartialUpdateRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsPartialUpdate(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsPartialUpdateRequest {
	return UpstreamPulpsAPIUpstreamPulpsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return UpstreamPulpResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsPartialUpdateExecute(r UpstreamPulpsAPIUpstreamPulpsPartialUpdateRequest) (*UpstreamPulpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamPulpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedUpstreamPulp == nil {
		return localVarReturnValue, nil, reportError("patchedUpstreamPulp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedUpstreamPulp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsReadRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r UpstreamPulpsAPIUpstreamPulpsReadRequest) Fields(fields []string) UpstreamPulpsAPIUpstreamPulpsReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r UpstreamPulpsAPIUpstreamPulpsReadRequest) ExcludeFields(excludeFields []string) UpstreamPulpsAPIUpstreamPulpsReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsReadRequest) Execute() (*UpstreamPulpResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsReadExecute(r)
}

/*
UpstreamPulpsRead Inspect an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsReadRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsRead(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsReadRequest {
	return UpstreamPulpsAPIUpstreamPulpsReadRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return UpstreamPulpResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsReadExecute(r UpstreamPulpsAPIUpstreamPulpsReadRequest) (*UpstreamPulpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamPulpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsRemoveRoleRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
	nestedRole *NestedRole
}

func (r UpstreamPulpsAPIUpstreamPulpsRemoveRoleRequest) NestedRole(nestedRole NestedRole) UpstreamPulpsAPIUpstreamPulpsRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsRemoveRoleExecute(r)
}

/*
UpstreamPulpsRemoveRole Remove a role

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsRemoveRoleRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsRemoveRole(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsRemoveRoleRequest {
	return UpstreamPulpsAPIUpstreamPulpsRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsRemoveRoleExecute(r UpstreamPulpsAPIUpstreamPulpsRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsReplicateRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
}

func (r UpstreamPulpsAPIUpstreamPulpsReplicateRequest) Execute() (*TaskGroupOperationResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsReplicateExecute(r)
}

/*
UpstreamPulpsReplicate Replicate

Trigger an asynchronous repository replication task group. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsReplicateRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsReplicate(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsReplicateRequest {
	return UpstreamPulpsAPIUpstreamPulpsReplicateRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return TaskGroupOperationResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsReplicateExecute(r UpstreamPulpsAPIUpstreamPulpsReplicateRequest) (*TaskGroupOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskGroupOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsReplicate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}replicate/"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UpstreamPulpsAPIUpstreamPulpsUpdateRequest struct {
	ctx context.Context
	ApiService *UpstreamPulpsAPIService
	upstreamPulpHref string
	upstreamPulp *UpstreamPulp
}

func (r UpstreamPulpsAPIUpstreamPulpsUpdateRequest) UpstreamPulp(upstreamPulp UpstreamPulp) UpstreamPulpsAPIUpstreamPulpsUpdateRequest {
	r.upstreamPulp = &upstreamPulp
	return r
}

func (r UpstreamPulpsAPIUpstreamPulpsUpdateRequest) Execute() (*UpstreamPulpResponse, *http.Response, error) {
	return r.ApiService.UpstreamPulpsUpdateExecute(r)
}

/*
UpstreamPulpsUpdate Update an upstream pulp

API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param upstreamPulpHref
 @return UpstreamPulpsAPIUpstreamPulpsUpdateRequest
*/
func (a *UpstreamPulpsAPIService) UpstreamPulpsUpdate(ctx context.Context, upstreamPulpHref string) UpstreamPulpsAPIUpstreamPulpsUpdateRequest {
	return UpstreamPulpsAPIUpstreamPulpsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		upstreamPulpHref: upstreamPulpHref,
	}
}

// Execute executes the request
//  @return UpstreamPulpResponse
func (a *UpstreamPulpsAPIService) UpstreamPulpsUpdateExecute(r UpstreamPulpsAPIUpstreamPulpsUpdateRequest) (*UpstreamPulpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamPulpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpstreamPulpsAPIService.UpstreamPulpsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{upstream_pulp_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"upstream_pulp_href"+"}", url.PathEscape(parameterValueToString(r.upstreamPulpHref, "upstreamPulpHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.upstreamPulp == nil {
		return localVarReturnValue, nil, reportError("upstreamPulp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPulp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
