/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest/release/v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ContentReleaseArchitecturesApiService ContentReleaseArchitecturesApi service
type ContentReleaseArchitecturesApiService service

type ContentReleaseArchitecturesApiContentDebReleaseArchitecturesCreateRequest struct {
	ctx context.Context
	ApiService *ContentReleaseArchitecturesApiService
	debReleaseArchitecture *DebReleaseArchitecture
}

func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesCreateRequest) DebReleaseArchitecture(debReleaseArchitecture DebReleaseArchitecture) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesCreateRequest {
	r.debReleaseArchitecture = &debReleaseArchitecture
	return r
}

func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesCreateRequest) Execute() (*DebReleaseArchitectureResponse, *http.Response, error) {
	return r.ApiService.ContentDebReleaseArchitecturesCreateExecute(r)
}

/*
ContentDebReleaseArchitecturesCreate Create a release architecture

A ReleaseArchitecture represents a single dpkg architecture string.

Associated artifacts: None; contains only metadata.

Every ReleaseArchitecture is always associated with exactly one Release. This indicates that
the release/distribution in question supports this architecture.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentReleaseArchitecturesApiContentDebReleaseArchitecturesCreateRequest
*/
func (a *ContentReleaseArchitecturesApiService) ContentDebReleaseArchitecturesCreate(ctx context.Context) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesCreateRequest {
	return ContentReleaseArchitecturesApiContentDebReleaseArchitecturesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DebReleaseArchitectureResponse
func (a *ContentReleaseArchitecturesApiService) ContentDebReleaseArchitecturesCreateExecute(r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesCreateRequest) (*DebReleaseArchitectureResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebReleaseArchitectureResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseArchitecturesApiService.ContentDebReleaseArchitecturesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/release_architectures/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.debReleaseArchitecture == nil {
		return localVarReturnValue, nil, reportError("debReleaseArchitecture is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.debReleaseArchitecture
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest struct {
	ctx context.Context
	ApiService *ContentReleaseArchitecturesApiService
	architecture *string
	limit *int32
	offset *int32
	ordering *[]string
	release *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where architecture matches value
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) Architecture(architecture string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.architecture = &architecture
	return r
}

// Number of results to return per page.
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) Limit(limit int32) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) Offset(offset int32) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) Ordering(ordering []string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.ordering = &ordering
	return r
}

// Filter results where release matches value
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) Release(release string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.release = &release
	return r
}

// Repository Version referenced by HREF
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) RepositoryVersion(repositoryVersion string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// A list of fields to include in the response.
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) Fields(fields []string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) ExcludeFields(excludeFields []string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) Execute() (*PaginateddebReleaseArchitectureResponseList, *http.Response, error) {
	return r.ApiService.ContentDebReleaseArchitecturesListExecute(r)
}

/*
ContentDebReleaseArchitecturesList List release architectures

A ReleaseArchitecture represents a single dpkg architecture string.

Associated artifacts: None; contains only metadata.

Every ReleaseArchitecture is always associated with exactly one Release. This indicates that
the release/distribution in question supports this architecture.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest
*/
func (a *ContentReleaseArchitecturesApiService) ContentDebReleaseArchitecturesList(ctx context.Context) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest {
	return ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginateddebReleaseArchitectureResponseList
func (a *ContentReleaseArchitecturesApiService) ContentDebReleaseArchitecturesListExecute(r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesListRequest) (*PaginateddebReleaseArchitectureResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginateddebReleaseArchitectureResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseArchitecturesApiService.ContentDebReleaseArchitecturesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/content/deb/release_architectures/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.architecture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "architecture", r.architecture, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.release != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "release", r.release, "")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest struct {
	ctx context.Context
	ApiService *ContentReleaseArchitecturesApiService
	debReleaseArchitectureHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest) Fields(fields []string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest) ExcludeFields(excludeFields []string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest) Execute() (*DebReleaseArchitectureResponse, *http.Response, error) {
	return r.ApiService.ContentDebReleaseArchitecturesReadExecute(r)
}

/*
ContentDebReleaseArchitecturesRead Inspect a release architecture

A ReleaseArchitecture represents a single dpkg architecture string.

Associated artifacts: None; contains only metadata.

Every ReleaseArchitecture is always associated with exactly one Release. This indicates that
the release/distribution in question supports this architecture.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param debReleaseArchitectureHref
 @return ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest
*/
func (a *ContentReleaseArchitecturesApiService) ContentDebReleaseArchitecturesRead(ctx context.Context, debReleaseArchitectureHref string) ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest {
	return ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest{
		ApiService: a,
		ctx: ctx,
		debReleaseArchitectureHref: debReleaseArchitectureHref,
	}
}

// Execute executes the request
//  @return DebReleaseArchitectureResponse
func (a *ContentReleaseArchitecturesApiService) ContentDebReleaseArchitecturesReadExecute(r ContentReleaseArchitecturesApiContentDebReleaseArchitecturesReadRequest) (*DebReleaseArchitectureResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DebReleaseArchitectureResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentReleaseArchitecturesApiService.ContentDebReleaseArchitecturesRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{deb_release_architecture_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"deb_release_architecture_href"+"}", url.PathEscape(parameterValueToString(r.debReleaseArchitectureHref, "debReleaseArchitectureHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
