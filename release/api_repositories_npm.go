/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// RepositoriesNpmAPIService RepositoriesNpmAPI service
type RepositoriesNpmAPIService service

type RepositoriesNpmAPIRepositoriesNpmNpmCreateRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	pulpDomain string
	npmNpmRepository *NpmNpmRepository
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmCreateRequest) NpmNpmRepository(npmNpmRepository NpmNpmRepository) RepositoriesNpmAPIRepositoriesNpmNpmCreateRequest {
	r.npmNpmRepository = &npmNpmRepository
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmCreateRequest) Execute() (*NpmNpmRepositoryResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmCreateExecute(r)
}

/*
RepositoriesNpmNpmCreate Create a npm repository

A ViewSet for NpmRepository.Similar to the PackageViewSet above, define endpoint_name,queryset and serializer, at a minimum.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return RepositoriesNpmAPIRepositoriesNpmNpmCreateRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmCreate(ctx context.Context, pulpDomain string) RepositoriesNpmAPIRepositoriesNpmNpmCreateRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return NpmNpmRepositoryResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmCreateExecute(r RepositoriesNpmAPIRepositoriesNpmNpmCreateRequest) (*NpmNpmRepositoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NpmNpmRepositoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/repositories/npm/npm/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.npmNpmRepository == nil {
		return localVarReturnValue, nil, reportError("npmNpmRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.npmNpmRepository
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmDeleteRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	npmNpmRepositoryHref string
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmDeleteExecute(r)
}

/*
RepositoriesNpmNpmDelete Delete a npm repository

Trigger an asynchronous delete task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmNpmRepositoryHref
 @return RepositoriesNpmAPIRepositoriesNpmNpmDeleteRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmDelete(ctx context.Context, npmNpmRepositoryHref string) RepositoriesNpmAPIRepositoriesNpmNpmDeleteRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmDeleteRequest{
		ApiService: a,
		ctx: ctx,
		npmNpmRepositoryHref: npmNpmRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmDeleteExecute(r RepositoriesNpmAPIRepositoriesNpmNpmDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_npm_repository_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_npm_repository_href"+"}", url.PathEscape(parameterValueToString(r.npmNpmRepositoryHref, "npmNpmRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmListRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	pulpDomain string
	latestWithContent *string
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIexact *string
	nameIn *[]string
	nameIregex *string
	nameIstartswith *string
	nameRegex *string
	nameStartswith *string
	offset *int32
	ordering *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	remote *string
	retainRepoVersions *int32
	retainRepoVersionsGt *int32
	retainRepoVersionsGte *int32
	retainRepoVersionsIsnull *bool
	retainRepoVersionsLt *int32
	retainRepoVersionsLte *int32
	retainRepoVersionsNe *int32
	retainRepoVersionsRange *[]int32
	withContent *string
	fields *[]string
	excludeFields *[]string
}

// Content Unit referenced by HREF/PRN
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) LatestWithContent(latestWithContent string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.latestWithContent = &latestWithContent
	return r
}

// Number of results to return per page.
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) Limit(limit int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) Name(name string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) NameContains(nameContains string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) NameIcontains(nameIcontains string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name matches value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) NameIexact(nameIexact string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.nameIexact = &nameIexact
	return r
}

// Filter results where name is in a comma-separated list of values
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) NameIn(nameIn []string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name matches regex value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) NameIregex(nameIregex string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.nameIregex = &nameIregex
	return r
}

// Filter results where name starts with value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) NameIstartswith(nameIstartswith string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.nameIstartswith = &nameIstartswith
	return r
}

// Filter results where name matches regex value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) NameRegex(nameRegex string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.nameRegex = &nameRegex
	return r
}

// Filter results where name starts with value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) NameStartswith(nameStartswith string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) Offset(offset int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;pulp_labels&#x60; - Pulp labels* &#x60;-pulp_labels&#x60; - Pulp labels (descending)* &#x60;description&#x60; - Description* &#x60;-description&#x60; - Description (descending)* &#x60;next_version&#x60; - Next version* &#x60;-next_version&#x60; - Next version (descending)* &#x60;retain_repo_versions&#x60; - Retain repo versions* &#x60;-retain_repo_versions&#x60; - Retain repo versions (descending)* &#x60;user_hidden&#x60; - User hidden* &#x60;-user_hidden&#x60; - User hidden (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) Ordering(ordering []string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) PrnIn(prnIn []string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) PulpHrefIn(pulpHrefIn []string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) PulpIdIn(pulpIdIn []string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) PulpLabelSelect(pulpLabelSelect string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) Q(q string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.q = &q
	return r
}

// Foreign Key referenced by HREF
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) Remote(remote string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.remote = &remote
	return r
}

// Filter results where retain_repo_versions matches value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) RetainRepoVersions(retainRepoVersions int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.retainRepoVersions = &retainRepoVersions
	return r
}

// Filter results where retain_repo_versions is greater than value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) RetainRepoVersionsGt(retainRepoVersionsGt int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.retainRepoVersionsGt = &retainRepoVersionsGt
	return r
}

// Filter results where retain_repo_versions is greater than or equal to value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) RetainRepoVersionsGte(retainRepoVersionsGte int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.retainRepoVersionsGte = &retainRepoVersionsGte
	return r
}

// Filter results where retain_repo_versions has a null value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) RetainRepoVersionsIsnull(retainRepoVersionsIsnull bool) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.retainRepoVersionsIsnull = &retainRepoVersionsIsnull
	return r
}

// Filter results where retain_repo_versions is less than value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) RetainRepoVersionsLt(retainRepoVersionsLt int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.retainRepoVersionsLt = &retainRepoVersionsLt
	return r
}

// Filter results where retain_repo_versions is less than or equal to value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) RetainRepoVersionsLte(retainRepoVersionsLte int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.retainRepoVersionsLte = &retainRepoVersionsLte
	return r
}

// Filter results where retain_repo_versions not equal to value
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) RetainRepoVersionsNe(retainRepoVersionsNe int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.retainRepoVersionsNe = &retainRepoVersionsNe
	return r
}

// Filter results where retain_repo_versions is between two comma separated values
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) RetainRepoVersionsRange(retainRepoVersionsRange []int32) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.retainRepoVersionsRange = &retainRepoVersionsRange
	return r
}

// Content Unit referenced by HREF/PRN
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) WithContent(withContent string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.withContent = &withContent
	return r
}

// A list of fields to include in the response.
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) Fields(fields []string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) ExcludeFields(excludeFields []string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) Execute() (*PaginatednpmNpmRepositoryResponseList, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmListExecute(r)
}

/*
RepositoriesNpmNpmList List npm repositorys

A ViewSet for NpmRepository.Similar to the PackageViewSet above, define endpoint_name,queryset and serializer, at a minimum.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return RepositoriesNpmAPIRepositoriesNpmNpmListRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmList(ctx context.Context, pulpDomain string) RepositoriesNpmAPIRepositoriesNpmNpmListRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatednpmNpmRepositoryResponseList
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmListExecute(r RepositoriesNpmAPIRepositoriesNpmNpmListRequest) (*PaginatednpmNpmRepositoryResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatednpmNpmRepositoryResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/repositories/npm/npm/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.latestWithContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latest_with_content", r.latestWithContent, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "form", "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "form", "")
	}
	if r.nameIexact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iexact", r.nameIexact, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.nameIregex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iregex", r.nameIregex, "form", "")
	}
	if r.nameIstartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__istartswith", r.nameIstartswith, "form", "")
	}
	if r.nameRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__regex", r.nameRegex, "form", "")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.remote != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote", r.remote, "form", "")
	}
	if r.retainRepoVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions", r.retainRepoVersions, "form", "")
	}
	if r.retainRepoVersionsGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__gt", r.retainRepoVersionsGt, "form", "")
	}
	if r.retainRepoVersionsGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__gte", r.retainRepoVersionsGte, "form", "")
	}
	if r.retainRepoVersionsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__isnull", r.retainRepoVersionsIsnull, "form", "")
	}
	if r.retainRepoVersionsLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__lt", r.retainRepoVersionsLt, "form", "")
	}
	if r.retainRepoVersionsLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__lte", r.retainRepoVersionsLte, "form", "")
	}
	if r.retainRepoVersionsNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__ne", r.retainRepoVersionsNe, "form", "")
	}
	if r.retainRepoVersionsRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__range", r.retainRepoVersionsRange, "form", "csv")
	}
	if r.withContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_content", r.withContent, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmModifyRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	npmNpmRepositoryHref string
	repositoryAddRemoveContent *RepositoryAddRemoveContent
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmModifyRequest) RepositoryAddRemoveContent(repositoryAddRemoveContent RepositoryAddRemoveContent) RepositoriesNpmAPIRepositoriesNpmNpmModifyRequest {
	r.repositoryAddRemoveContent = &repositoryAddRemoveContent
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmModifyRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmModifyExecute(r)
}

/*
RepositoriesNpmNpmModify Modify Repository Content

Trigger an asynchronous task to create a new repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmNpmRepositoryHref
 @return RepositoriesNpmAPIRepositoriesNpmNpmModifyRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmModify(ctx context.Context, npmNpmRepositoryHref string) RepositoriesNpmAPIRepositoriesNpmNpmModifyRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmModifyRequest{
		ApiService: a,
		ctx: ctx,
		npmNpmRepositoryHref: npmNpmRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmModifyExecute(r RepositoriesNpmAPIRepositoriesNpmNpmModifyRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmModify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_npm_repository_href}modify/"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_npm_repository_href"+"}", url.PathEscape(parameterValueToString(r.npmNpmRepositoryHref, "npmNpmRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repositoryAddRemoveContent == nil {
		return localVarReturnValue, nil, reportError("repositoryAddRemoveContent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.repositoryAddRemoveContent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmPartialUpdateRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	npmNpmRepositoryHref string
	patchednpmNpmRepository *PatchednpmNpmRepository
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmPartialUpdateRequest) PatchednpmNpmRepository(patchednpmNpmRepository PatchednpmNpmRepository) RepositoriesNpmAPIRepositoriesNpmNpmPartialUpdateRequest {
	r.patchednpmNpmRepository = &patchednpmNpmRepository
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmPartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmPartialUpdateExecute(r)
}

/*
RepositoriesNpmNpmPartialUpdate Update a npm repository

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmNpmRepositoryHref
 @return RepositoriesNpmAPIRepositoriesNpmNpmPartialUpdateRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmPartialUpdate(ctx context.Context, npmNpmRepositoryHref string) RepositoriesNpmAPIRepositoriesNpmNpmPartialUpdateRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		npmNpmRepositoryHref: npmNpmRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmPartialUpdateExecute(r RepositoriesNpmAPIRepositoriesNpmNpmPartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_npm_repository_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_npm_repository_href"+"}", url.PathEscape(parameterValueToString(r.npmNpmRepositoryHref, "npmNpmRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchednpmNpmRepository == nil {
		return localVarReturnValue, nil, reportError("patchednpmNpmRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchednpmNpmRepository
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmReadRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	npmNpmRepositoryHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RepositoriesNpmAPIRepositoriesNpmNpmReadRequest) Fields(fields []string) RepositoriesNpmAPIRepositoriesNpmNpmReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesNpmAPIRepositoriesNpmNpmReadRequest) ExcludeFields(excludeFields []string) RepositoriesNpmAPIRepositoriesNpmNpmReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmReadRequest) Execute() (*NpmNpmRepositoryResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmReadExecute(r)
}

/*
RepositoriesNpmNpmRead Inspect a npm repository

A ViewSet for NpmRepository.Similar to the PackageViewSet above, define endpoint_name,queryset and serializer, at a minimum.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmNpmRepositoryHref
 @return RepositoriesNpmAPIRepositoriesNpmNpmReadRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmRead(ctx context.Context, npmNpmRepositoryHref string) RepositoriesNpmAPIRepositoriesNpmNpmReadRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmReadRequest{
		ApiService: a,
		ctx: ctx,
		npmNpmRepositoryHref: npmNpmRepositoryHref,
	}
}

// Execute executes the request
//  @return NpmNpmRepositoryResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmReadExecute(r RepositoriesNpmAPIRepositoriesNpmNpmReadRequest) (*NpmNpmRepositoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NpmNpmRepositoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_npm_repository_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_npm_repository_href"+"}", url.PathEscape(parameterValueToString(r.npmNpmRepositoryHref, "npmNpmRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmSetLabelRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	npmNpmRepositoryHref string
	setLabel *SetLabel
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmSetLabelRequest) SetLabel(setLabel SetLabel) RepositoriesNpmAPIRepositoriesNpmNpmSetLabelRequest {
	r.setLabel = &setLabel
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmSetLabelRequest) Execute() (*SetLabelResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmSetLabelExecute(r)
}

/*
RepositoriesNpmNpmSetLabel Set a label

Set a single pulp_label on the object to a specific value or null.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmNpmRepositoryHref
 @return RepositoriesNpmAPIRepositoriesNpmNpmSetLabelRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmSetLabel(ctx context.Context, npmNpmRepositoryHref string) RepositoriesNpmAPIRepositoriesNpmNpmSetLabelRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmSetLabelRequest{
		ApiService: a,
		ctx: ctx,
		npmNpmRepositoryHref: npmNpmRepositoryHref,
	}
}

// Execute executes the request
//  @return SetLabelResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmSetLabelExecute(r RepositoriesNpmAPIRepositoriesNpmNpmSetLabelRequest) (*SetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmSetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_npm_repository_href}set_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_npm_repository_href"+"}", url.PathEscape(parameterValueToString(r.npmNpmRepositoryHref, "npmNpmRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setLabel == nil {
		return localVarReturnValue, nil, reportError("setLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmSyncRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	npmNpmRepositoryHref string
	repositorySyncURL *RepositorySyncURL
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmSyncRequest) RepositorySyncURL(repositorySyncURL RepositorySyncURL) RepositoriesNpmAPIRepositoriesNpmNpmSyncRequest {
	r.repositorySyncURL = &repositorySyncURL
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmSyncRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmSyncExecute(r)
}

/*
RepositoriesNpmNpmSync Sync from remote

Trigger an asynchronous task to sync content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmNpmRepositoryHref
 @return RepositoriesNpmAPIRepositoriesNpmNpmSyncRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmSync(ctx context.Context, npmNpmRepositoryHref string) RepositoriesNpmAPIRepositoriesNpmNpmSyncRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmSyncRequest{
		ApiService: a,
		ctx: ctx,
		npmNpmRepositoryHref: npmNpmRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmSyncExecute(r RepositoriesNpmAPIRepositoriesNpmNpmSyncRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmSync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_npm_repository_href}sync/"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_npm_repository_href"+"}", url.PathEscape(parameterValueToString(r.npmNpmRepositoryHref, "npmNpmRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repositorySyncURL == nil {
		return localVarReturnValue, nil, reportError("repositorySyncURL is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.repositorySyncURL
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmUnsetLabelRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	npmNpmRepositoryHref string
	unsetLabel *UnsetLabel
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmUnsetLabelRequest) UnsetLabel(unsetLabel UnsetLabel) RepositoriesNpmAPIRepositoriesNpmNpmUnsetLabelRequest {
	r.unsetLabel = &unsetLabel
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmUnsetLabelRequest) Execute() (*UnsetLabelResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmUnsetLabelExecute(r)
}

/*
RepositoriesNpmNpmUnsetLabel Unset a label

Unset a single pulp_label on the object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmNpmRepositoryHref
 @return RepositoriesNpmAPIRepositoriesNpmNpmUnsetLabelRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmUnsetLabel(ctx context.Context, npmNpmRepositoryHref string) RepositoriesNpmAPIRepositoriesNpmNpmUnsetLabelRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmUnsetLabelRequest{
		ApiService: a,
		ctx: ctx,
		npmNpmRepositoryHref: npmNpmRepositoryHref,
	}
}

// Execute executes the request
//  @return UnsetLabelResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmUnsetLabelExecute(r RepositoriesNpmAPIRepositoriesNpmNpmUnsetLabelRequest) (*UnsetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmUnsetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_npm_repository_href}unset_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_npm_repository_href"+"}", url.PathEscape(parameterValueToString(r.npmNpmRepositoryHref, "npmNpmRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsetLabel == nil {
		return localVarReturnValue, nil, reportError("unsetLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsetLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesNpmAPIRepositoriesNpmNpmUpdateRequest struct {
	ctx context.Context
	ApiService *RepositoriesNpmAPIService
	npmNpmRepositoryHref string
	npmNpmRepository *NpmNpmRepository
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmUpdateRequest) NpmNpmRepository(npmNpmRepository NpmNpmRepository) RepositoriesNpmAPIRepositoriesNpmNpmUpdateRequest {
	r.npmNpmRepository = &npmNpmRepository
	return r
}

func (r RepositoriesNpmAPIRepositoriesNpmNpmUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesNpmNpmUpdateExecute(r)
}

/*
RepositoriesNpmNpmUpdate Update a npm repository

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmNpmRepositoryHref
 @return RepositoriesNpmAPIRepositoriesNpmNpmUpdateRequest
*/
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmUpdate(ctx context.Context, npmNpmRepositoryHref string) RepositoriesNpmAPIRepositoriesNpmNpmUpdateRequest {
	return RepositoriesNpmAPIRepositoriesNpmNpmUpdateRequest{
		ApiService: a,
		ctx: ctx,
		npmNpmRepositoryHref: npmNpmRepositoryHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesNpmAPIService) RepositoriesNpmNpmUpdateExecute(r RepositoriesNpmAPIRepositoriesNpmNpmUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesNpmAPIService.RepositoriesNpmNpmUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_npm_repository_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_npm_repository_href"+"}", url.PathEscape(parameterValueToString(r.npmNpmRepositoryHref, "npmNpmRepositoryHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.npmNpmRepository == nil {
		return localVarReturnValue, nil, reportError("npmNpmRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.npmNpmRepository
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
