/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"fmt"
)

// Policy357Enum * `all` - Replicate manages ALL local objects within the domain.* `labeled` - Replicate will only manage the objects created from a previous replication, unlabled local objects will be untouched.* `nodelete` - Replicate will not delete any local object whether they were created by replication or not.
type Policy357Enum string

// List of Policy357Enum
const (
	POLICY357ENUM_ALL Policy357Enum = "all"
	POLICY357ENUM_LABELED Policy357Enum = "labeled"
	POLICY357ENUM_NODELETE Policy357Enum = "nodelete"
)

// All allowed values of Policy357Enum enum
var AllowedPolicy357EnumEnumValues = []Policy357Enum{
	"all",
	"labeled",
	"nodelete",
}

func (v *Policy357Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Policy357Enum(value)
	for _, existing := range AllowedPolicy357EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Policy357Enum", value)
}

// NewPolicy357EnumFromValue returns a pointer to a valid Policy357Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicy357EnumFromValue(v string) (*Policy357Enum, error) {
	ev := Policy357Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Policy357Enum: valid values are %v", v, AllowedPolicy357EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Policy357Enum) IsValid() bool {
	for _, existing := range AllowedPolicy357EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Policy357Enum value
func (v Policy357Enum) Ptr() *Policy357Enum {
	return &v
}

type NullablePolicy357Enum struct {
	value *Policy357Enum
	isSet bool
}

func (v NullablePolicy357Enum) Get() *Policy357Enum {
	return v.value
}

func (v *NullablePolicy357Enum) Set(val *Policy357Enum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy357Enum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy357Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy357Enum(val *Policy357Enum) *NullablePolicy357Enum {
	return &NullablePolicy357Enum{value: val, isSet: true}
}

func (v NullablePolicy357Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy357Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

