/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// RepositoriesOpenpgpKeyringAPIService RepositoriesOpenpgpKeyringAPI service
type RepositoriesOpenpgpKeyringAPIService service

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringAddRoleRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	nestedRole *NestedRole
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringAddRoleRequest) NestedRole(nestedRole NestedRole) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringAddRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringAddRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringAddRoleExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringAddRole Add a role

Add a role for this object to users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringAddRoleRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringAddRole(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringAddRoleRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringAddRoleRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringAddRoleExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringAddRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringAddRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}add_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringCreateRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	pulpDomain string
	openPGPKeyring *OpenPGPKeyring
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringCreateRequest) OpenPGPKeyring(openPGPKeyring OpenPGPKeyring) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringCreateRequest {
	r.openPGPKeyring = &openPGPKeyring
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringCreateRequest) Execute() (*OpenPGPKeyringResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringCreateExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringCreate Create an open pgp keyring

A ViewSet for an ordinary repository.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringCreateRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringCreate(ctx context.Context, pulpDomain string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringCreateRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return OpenPGPKeyringResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringCreateExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringCreateRequest) (*OpenPGPKeyringResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenPGPKeyringResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/repositories/core/openpgp_keyring/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.openPGPKeyring == nil {
		return localVarReturnValue, nil, reportError("openPGPKeyring is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.openPGPKeyring
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringDeleteRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringDeleteExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringDelete Delete an open pgp keyring

Trigger an asynchronous delete task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringDeleteRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringDelete(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringDeleteRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringDeleteRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringDeleteExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	pulpDomain string
	latestWithContent *string
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIexact *string
	nameIn *[]string
	nameIregex *string
	nameIstartswith *string
	nameRegex *string
	nameStartswith *string
	offset *int32
	ordering *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	remote *string
	retainRepoVersions *int32
	retainRepoVersionsGt *int32
	retainRepoVersionsGte *int32
	retainRepoVersionsIsnull *bool
	retainRepoVersionsLt *int32
	retainRepoVersionsLte *int32
	retainRepoVersionsNe *int32
	retainRepoVersionsRange *[]int32
	withContent *string
	fields *[]string
	excludeFields *[]string
}

// Content Unit referenced by HREF/PRN
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) LatestWithContent(latestWithContent string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.latestWithContent = &latestWithContent
	return r
}

// Number of results to return per page.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) Limit(limit int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) Name(name string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) NameContains(nameContains string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) NameIcontains(nameIcontains string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name matches value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) NameIexact(nameIexact string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.nameIexact = &nameIexact
	return r
}

// Filter results where name is in a comma-separated list of values
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) NameIn(nameIn []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name matches regex value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) NameIregex(nameIregex string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.nameIregex = &nameIregex
	return r
}

// Filter results where name starts with value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) NameIstartswith(nameIstartswith string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.nameIstartswith = &nameIstartswith
	return r
}

// Filter results where name matches regex value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) NameRegex(nameRegex string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.nameRegex = &nameRegex
	return r
}

// Filter results where name starts with value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) NameStartswith(nameStartswith string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) Offset(offset int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;pulp_labels&#x60; - Pulp labels* &#x60;-pulp_labels&#x60; - Pulp labels (descending)* &#x60;description&#x60; - Description* &#x60;-description&#x60; - Description (descending)* &#x60;next_version&#x60; - Next version* &#x60;-next_version&#x60; - Next version (descending)* &#x60;retain_repo_versions&#x60; - Retain repo versions* &#x60;-retain_repo_versions&#x60; - Retain repo versions (descending)* &#x60;user_hidden&#x60; - User hidden* &#x60;-user_hidden&#x60; - User hidden (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) Ordering(ordering []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) PrnIn(prnIn []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) PulpHrefIn(pulpHrefIn []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) PulpIdIn(pulpIdIn []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) PulpLabelSelect(pulpLabelSelect string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) Q(q string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.q = &q
	return r
}

// Foreign Key referenced by HREF
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) Remote(remote string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.remote = &remote
	return r
}

// Filter results where retain_repo_versions matches value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) RetainRepoVersions(retainRepoVersions int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.retainRepoVersions = &retainRepoVersions
	return r
}

// Filter results where retain_repo_versions is greater than value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) RetainRepoVersionsGt(retainRepoVersionsGt int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.retainRepoVersionsGt = &retainRepoVersionsGt
	return r
}

// Filter results where retain_repo_versions is greater than or equal to value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) RetainRepoVersionsGte(retainRepoVersionsGte int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.retainRepoVersionsGte = &retainRepoVersionsGte
	return r
}

// Filter results where retain_repo_versions has a null value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) RetainRepoVersionsIsnull(retainRepoVersionsIsnull bool) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.retainRepoVersionsIsnull = &retainRepoVersionsIsnull
	return r
}

// Filter results where retain_repo_versions is less than value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) RetainRepoVersionsLt(retainRepoVersionsLt int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.retainRepoVersionsLt = &retainRepoVersionsLt
	return r
}

// Filter results where retain_repo_versions is less than or equal to value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) RetainRepoVersionsLte(retainRepoVersionsLte int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.retainRepoVersionsLte = &retainRepoVersionsLte
	return r
}

// Filter results where retain_repo_versions not equal to value
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) RetainRepoVersionsNe(retainRepoVersionsNe int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.retainRepoVersionsNe = &retainRepoVersionsNe
	return r
}

// Filter results where retain_repo_versions is between two comma separated values
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) RetainRepoVersionsRange(retainRepoVersionsRange []int32) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.retainRepoVersionsRange = &retainRepoVersionsRange
	return r
}

// Content Unit referenced by HREF/PRN
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) WithContent(withContent string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.withContent = &withContent
	return r
}

// A list of fields to include in the response.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) Fields(fields []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) ExcludeFields(excludeFields []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) Execute() (*PaginatedOpenPGPKeyringResponseList, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringListExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringList List open pgp keyrings

A ViewSet for an ordinary repository.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringList(ctx context.Context, pulpDomain string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedOpenPGPKeyringResponseList
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringListExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRequest) (*PaginatedOpenPGPKeyringResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedOpenPGPKeyringResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/repositories/core/openpgp_keyring/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.latestWithContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latest_with_content", r.latestWithContent, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "form", "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "form", "")
	}
	if r.nameIexact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iexact", r.nameIexact, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.nameIregex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__iregex", r.nameIregex, "form", "")
	}
	if r.nameIstartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__istartswith", r.nameIstartswith, "form", "")
	}
	if r.nameRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__regex", r.nameRegex, "form", "")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.remote != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote", r.remote, "form", "")
	}
	if r.retainRepoVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions", r.retainRepoVersions, "form", "")
	}
	if r.retainRepoVersionsGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__gt", r.retainRepoVersionsGt, "form", "")
	}
	if r.retainRepoVersionsGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__gte", r.retainRepoVersionsGte, "form", "")
	}
	if r.retainRepoVersionsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__isnull", r.retainRepoVersionsIsnull, "form", "")
	}
	if r.retainRepoVersionsLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__lt", r.retainRepoVersionsLt, "form", "")
	}
	if r.retainRepoVersionsLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__lte", r.retainRepoVersionsLte, "form", "")
	}
	if r.retainRepoVersionsNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__ne", r.retainRepoVersionsNe, "form", "")
	}
	if r.retainRepoVersionsRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_repo_versions__range", r.retainRepoVersionsRange, "form", "csv")
	}
	if r.withContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_content", r.withContent, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest) Fields(fields []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest) ExcludeFields(excludeFields []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest) Execute() (*ObjectRolesResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringListRolesExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringListRoles List roles

List roles assigned to this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringListRoles(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return ObjectRolesResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringListRolesExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringListRolesRequest) (*ObjectRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringListRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}list_roles/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringModifyRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	repositoryAddRemoveContent *RepositoryAddRemoveContent
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringModifyRequest) RepositoryAddRemoveContent(repositoryAddRemoveContent RepositoryAddRemoveContent) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringModifyRequest {
	r.repositoryAddRemoveContent = &repositoryAddRemoveContent
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringModifyRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringModifyExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringModify Modify Repository Content

Trigger an asynchronous task to create a new repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringModifyRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringModify(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringModifyRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringModifyRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringModifyExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringModifyRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringModify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}modify/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repositoryAddRemoveContent == nil {
		return localVarReturnValue, nil, reportError("repositoryAddRemoveContent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.repositoryAddRemoveContent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest) Fields(fields []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest) ExcludeFields(excludeFields []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest) Execute() (*MyPermissionsResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringMyPermissionsExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringMyPermissions List user permissions

List permissions available to the current user on this object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringMyPermissions(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return MyPermissionsResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringMyPermissionsExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringMyPermissionsRequest) (*MyPermissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MyPermissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringMyPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}my_permissions/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringPartialUpdateRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	patchedOpenPGPKeyring *PatchedOpenPGPKeyring
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringPartialUpdateRequest) PatchedOpenPGPKeyring(patchedOpenPGPKeyring PatchedOpenPGPKeyring) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringPartialUpdateRequest {
	r.patchedOpenPGPKeyring = &patchedOpenPGPKeyring
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringPartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringPartialUpdateExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringPartialUpdate Update an open pgp keyring

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringPartialUpdateRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringPartialUpdate(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringPartialUpdateRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringPartialUpdateExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringPartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedOpenPGPKeyring == nil {
		return localVarReturnValue, nil, reportError("patchedOpenPGPKeyring is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedOpenPGPKeyring
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest) Fields(fields []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest) ExcludeFields(excludeFields []string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest) Execute() (*OpenPGPKeyringResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringReadExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringRead Inspect an open pgp keyring

A ViewSet for an ordinary repository.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringRead(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return OpenPGPKeyringResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringReadExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringReadRequest) (*OpenPGPKeyringResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenPGPKeyringResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringRemoveRoleRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	nestedRole *NestedRole
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringRemoveRoleRequest) NestedRole(nestedRole NestedRole) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringRemoveRoleRequest {
	r.nestedRole = &nestedRole
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringRemoveRoleRequest) Execute() (*NestedRoleResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringRemoveRoleExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringRemoveRole Remove a role

Remove a role for this object from users/groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringRemoveRoleRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringRemoveRole(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringRemoveRoleRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringRemoveRoleRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return NestedRoleResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringRemoveRoleExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringRemoveRoleRequest) (*NestedRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NestedRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringRemoveRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}remove_role/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nestedRole == nil {
		return localVarReturnValue, nil, reportError("nestedRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nestedRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringSetLabelRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	setLabel *SetLabel
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringSetLabelRequest) SetLabel(setLabel SetLabel) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringSetLabelRequest {
	r.setLabel = &setLabel
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringSetLabelRequest) Execute() (*SetLabelResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringSetLabelExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringSetLabel Set a label

Set a single pulp_label on the object to a specific value or null.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringSetLabelRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringSetLabel(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringSetLabelRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringSetLabelRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return SetLabelResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringSetLabelExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringSetLabelRequest) (*SetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringSetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}set_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setLabel == nil {
		return localVarReturnValue, nil, reportError("setLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUnsetLabelRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	unsetLabel *UnsetLabel
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUnsetLabelRequest) UnsetLabel(unsetLabel UnsetLabel) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUnsetLabelRequest {
	r.unsetLabel = &unsetLabel
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUnsetLabelRequest) Execute() (*UnsetLabelResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringUnsetLabelExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringUnsetLabel Unset a label

Unset a single pulp_label on the object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUnsetLabelRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringUnsetLabel(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUnsetLabelRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUnsetLabelRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return UnsetLabelResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringUnsetLabelExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUnsetLabelRequest) (*UnsetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringUnsetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}unset_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsetLabel == nil {
		return localVarReturnValue, nil, reportError("unsetLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsetLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUpdateRequest struct {
	ctx context.Context
	ApiService *RepositoriesOpenpgpKeyringAPIService
	openPGPKeyringHref string
	openPGPKeyring *OpenPGPKeyring
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUpdateRequest) OpenPGPKeyring(openPGPKeyring OpenPGPKeyring) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUpdateRequest {
	r.openPGPKeyring = &openPGPKeyring
	return r
}

func (r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.RepositoriesCoreOpenpgpKeyringUpdateExecute(r)
}

/*
RepositoriesCoreOpenpgpKeyringUpdate Update an open pgp keyring

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param openPGPKeyringHref
 @return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUpdateRequest
*/
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringUpdate(ctx context.Context, openPGPKeyringHref string) RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUpdateRequest {
	return RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUpdateRequest{
		ApiService: a,
		ctx: ctx,
		openPGPKeyringHref: openPGPKeyringHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *RepositoriesOpenpgpKeyringAPIService) RepositoriesCoreOpenpgpKeyringUpdateExecute(r RepositoriesOpenpgpKeyringAPIRepositoriesCoreOpenpgpKeyringUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesOpenpgpKeyringAPIService.RepositoriesCoreOpenpgpKeyringUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{open_p_g_p_keyring_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"open_p_g_p_keyring_href"+"}", url.PathEscape(parameterValueToString(r.openPGPKeyringHref, "openPGPKeyringHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.openPGPKeyring == nil {
		return localVarReturnValue, nil, reportError("openPGPKeyring is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.openPGPKeyring
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
