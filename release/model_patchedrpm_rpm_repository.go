/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
)

// checks if the PatchedrpmRpmRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedrpmRpmRepository{}

// PatchedrpmRpmRepository Serializer for Rpm Repositories.
type PatchedrpmRpmRepository struct {
	PulpLabels *map[string]string `json:"pulp_labels,omitempty"`
	// A unique name for this repository.
	Name *string `json:"name,omitempty"`
	// An optional description.
	Description NullableString `json:"description,omitempty"`
	// Retain X versions of the repository. Default is null which retains all versions.
	RetainRepoVersions NullableInt64 `json:"retain_repo_versions,omitempty"`
	// An optional remote to use by default when syncing.
	Remote NullableString `json:"remote,omitempty"`
	// Whether to automatically create publications for new repository versions, and update any distributions pointing to this repository.
	Autopublish *bool `json:"autopublish,omitempty"`
	// A reference to an associated signing service.
	MetadataSigningService NullableString `json:"metadata_signing_service,omitempty"`
	// A reference to an associated package signing service.
	PackageSigningService NullableString `json:"package_signing_service,omitempty"`
	// The pubkey V4 fingerprint (160 bits) to be passed to the package signing service.The signing service will use that on signing operations related to this repository.
	PackageSigningFingerprint *string `json:"package_signing_fingerprint,omitempty"`
	// The number of versions of each package to keep in the repository; older versions will be purged. The default is '0', which will disable this feature and keep all versions of each package.
	RetainPackageVersions *int64 `json:"retain_package_versions,omitempty"`
	// The preferred checksum type during repo publish.* `unknown` - unknown* `md5` - md5* `sha1` - sha1* `sha224` - sha224* `sha256` - sha256* `sha384` - sha384* `sha512` - sha512
	ChecksumType NullablePackageChecksumTypeEnum `json:"checksum_type,omitempty"`
	// A JSON document describing the config.repo file Pulp should generate for this repo
	RepoConfig interface{} `json:"repo_config,omitempty"`
	// The compression type to use for metadata files.* `zstd` - zstd* `gz` - gz
	CompressionType NullableCompressionTypeEnum `json:"compression_type,omitempty"`
	// How to layout the packages within the published repository.* `nested_alphabetically` - nested_alphabetically* `flat` - flat
	Layout NullableLayoutEnum `json:"layout,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedrpmRpmRepository PatchedrpmRpmRepository

// NewPatchedrpmRpmRepository instantiates a new PatchedrpmRpmRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedrpmRpmRepository() *PatchedrpmRpmRepository {
	this := PatchedrpmRpmRepository{}
	var autopublish bool = false
	this.Autopublish = &autopublish
	var packageSigningFingerprint string = ""
	this.PackageSigningFingerprint = &packageSigningFingerprint
	return &this
}

// NewPatchedrpmRpmRepositoryWithDefaults instantiates a new PatchedrpmRpmRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedrpmRpmRepositoryWithDefaults() *PatchedrpmRpmRepository {
	this := PatchedrpmRpmRepository{}
	var autopublish bool = false
	this.Autopublish = &autopublish
	var packageSigningFingerprint string = ""
	this.PackageSigningFingerprint = &packageSigningFingerprint
	return &this
}

// GetPulpLabels returns the PulpLabels field value if set, zero value otherwise.
func (o *PatchedrpmRpmRepository) GetPulpLabels() map[string]string {
	if o == nil || IsNil(o.PulpLabels) {
		var ret map[string]string
		return ret
	}
	return *o.PulpLabels
}

// GetPulpLabelsOk returns a tuple with the PulpLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedrpmRpmRepository) GetPulpLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.PulpLabels) {
		return nil, false
	}
	return o.PulpLabels, true
}

// HasPulpLabels returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasPulpLabels() bool {
	if o != nil && !IsNil(o.PulpLabels) {
		return true
	}

	return false
}

// SetPulpLabels gets a reference to the given map[string]string and assigns it to the PulpLabels field.
func (o *PatchedrpmRpmRepository) SetPulpLabels(v map[string]string) {
	o.PulpLabels = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedrpmRpmRepository) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedrpmRpmRepository) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedrpmRpmRepository) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PatchedrpmRpmRepository) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PatchedrpmRpmRepository) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PatchedrpmRpmRepository) UnsetDescription() {
	o.Description.Unset()
}

// GetRetainRepoVersions returns the RetainRepoVersions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetRetainRepoVersions() int64 {
	if o == nil || IsNil(o.RetainRepoVersions.Get()) {
		var ret int64
		return ret
	}
	return *o.RetainRepoVersions.Get()
}

// GetRetainRepoVersionsOk returns a tuple with the RetainRepoVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetRetainRepoVersionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetainRepoVersions.Get(), o.RetainRepoVersions.IsSet()
}

// HasRetainRepoVersions returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasRetainRepoVersions() bool {
	if o != nil && o.RetainRepoVersions.IsSet() {
		return true
	}

	return false
}

// SetRetainRepoVersions gets a reference to the given NullableInt64 and assigns it to the RetainRepoVersions field.
func (o *PatchedrpmRpmRepository) SetRetainRepoVersions(v int64) {
	o.RetainRepoVersions.Set(&v)
}
// SetRetainRepoVersionsNil sets the value for RetainRepoVersions to be an explicit nil
func (o *PatchedrpmRpmRepository) SetRetainRepoVersionsNil() {
	o.RetainRepoVersions.Set(nil)
}

// UnsetRetainRepoVersions ensures that no value is present for RetainRepoVersions, not even an explicit nil
func (o *PatchedrpmRpmRepository) UnsetRetainRepoVersions() {
	o.RetainRepoVersions.Unset()
}

// GetRemote returns the Remote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetRemote() string {
	if o == nil || IsNil(o.Remote.Get()) {
		var ret string
		return ret
	}
	return *o.Remote.Get()
}

// GetRemoteOk returns a tuple with the Remote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetRemoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Remote.Get(), o.Remote.IsSet()
}

// HasRemote returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasRemote() bool {
	if o != nil && o.Remote.IsSet() {
		return true
	}

	return false
}

// SetRemote gets a reference to the given NullableString and assigns it to the Remote field.
func (o *PatchedrpmRpmRepository) SetRemote(v string) {
	o.Remote.Set(&v)
}
// SetRemoteNil sets the value for Remote to be an explicit nil
func (o *PatchedrpmRpmRepository) SetRemoteNil() {
	o.Remote.Set(nil)
}

// UnsetRemote ensures that no value is present for Remote, not even an explicit nil
func (o *PatchedrpmRpmRepository) UnsetRemote() {
	o.Remote.Unset()
}

// GetAutopublish returns the Autopublish field value if set, zero value otherwise.
func (o *PatchedrpmRpmRepository) GetAutopublish() bool {
	if o == nil || IsNil(o.Autopublish) {
		var ret bool
		return ret
	}
	return *o.Autopublish
}

// GetAutopublishOk returns a tuple with the Autopublish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedrpmRpmRepository) GetAutopublishOk() (*bool, bool) {
	if o == nil || IsNil(o.Autopublish) {
		return nil, false
	}
	return o.Autopublish, true
}

// HasAutopublish returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasAutopublish() bool {
	if o != nil && !IsNil(o.Autopublish) {
		return true
	}

	return false
}

// SetAutopublish gets a reference to the given bool and assigns it to the Autopublish field.
func (o *PatchedrpmRpmRepository) SetAutopublish(v bool) {
	o.Autopublish = &v
}

// GetMetadataSigningService returns the MetadataSigningService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetMetadataSigningService() string {
	if o == nil || IsNil(o.MetadataSigningService.Get()) {
		var ret string
		return ret
	}
	return *o.MetadataSigningService.Get()
}

// GetMetadataSigningServiceOk returns a tuple with the MetadataSigningService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetMetadataSigningServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataSigningService.Get(), o.MetadataSigningService.IsSet()
}

// HasMetadataSigningService returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasMetadataSigningService() bool {
	if o != nil && o.MetadataSigningService.IsSet() {
		return true
	}

	return false
}

// SetMetadataSigningService gets a reference to the given NullableString and assigns it to the MetadataSigningService field.
func (o *PatchedrpmRpmRepository) SetMetadataSigningService(v string) {
	o.MetadataSigningService.Set(&v)
}
// SetMetadataSigningServiceNil sets the value for MetadataSigningService to be an explicit nil
func (o *PatchedrpmRpmRepository) SetMetadataSigningServiceNil() {
	o.MetadataSigningService.Set(nil)
}

// UnsetMetadataSigningService ensures that no value is present for MetadataSigningService, not even an explicit nil
func (o *PatchedrpmRpmRepository) UnsetMetadataSigningService() {
	o.MetadataSigningService.Unset()
}

// GetPackageSigningService returns the PackageSigningService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetPackageSigningService() string {
	if o == nil || IsNil(o.PackageSigningService.Get()) {
		var ret string
		return ret
	}
	return *o.PackageSigningService.Get()
}

// GetPackageSigningServiceOk returns a tuple with the PackageSigningService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetPackageSigningServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageSigningService.Get(), o.PackageSigningService.IsSet()
}

// HasPackageSigningService returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasPackageSigningService() bool {
	if o != nil && o.PackageSigningService.IsSet() {
		return true
	}

	return false
}

// SetPackageSigningService gets a reference to the given NullableString and assigns it to the PackageSigningService field.
func (o *PatchedrpmRpmRepository) SetPackageSigningService(v string) {
	o.PackageSigningService.Set(&v)
}
// SetPackageSigningServiceNil sets the value for PackageSigningService to be an explicit nil
func (o *PatchedrpmRpmRepository) SetPackageSigningServiceNil() {
	o.PackageSigningService.Set(nil)
}

// UnsetPackageSigningService ensures that no value is present for PackageSigningService, not even an explicit nil
func (o *PatchedrpmRpmRepository) UnsetPackageSigningService() {
	o.PackageSigningService.Unset()
}

// GetPackageSigningFingerprint returns the PackageSigningFingerprint field value if set, zero value otherwise.
func (o *PatchedrpmRpmRepository) GetPackageSigningFingerprint() string {
	if o == nil || IsNil(o.PackageSigningFingerprint) {
		var ret string
		return ret
	}
	return *o.PackageSigningFingerprint
}

// GetPackageSigningFingerprintOk returns a tuple with the PackageSigningFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedrpmRpmRepository) GetPackageSigningFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.PackageSigningFingerprint) {
		return nil, false
	}
	return o.PackageSigningFingerprint, true
}

// HasPackageSigningFingerprint returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasPackageSigningFingerprint() bool {
	if o != nil && !IsNil(o.PackageSigningFingerprint) {
		return true
	}

	return false
}

// SetPackageSigningFingerprint gets a reference to the given string and assigns it to the PackageSigningFingerprint field.
func (o *PatchedrpmRpmRepository) SetPackageSigningFingerprint(v string) {
	o.PackageSigningFingerprint = &v
}

// GetRetainPackageVersions returns the RetainPackageVersions field value if set, zero value otherwise.
func (o *PatchedrpmRpmRepository) GetRetainPackageVersions() int64 {
	if o == nil || IsNil(o.RetainPackageVersions) {
		var ret int64
		return ret
	}
	return *o.RetainPackageVersions
}

// GetRetainPackageVersionsOk returns a tuple with the RetainPackageVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedrpmRpmRepository) GetRetainPackageVersionsOk() (*int64, bool) {
	if o == nil || IsNil(o.RetainPackageVersions) {
		return nil, false
	}
	return o.RetainPackageVersions, true
}

// HasRetainPackageVersions returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasRetainPackageVersions() bool {
	if o != nil && !IsNil(o.RetainPackageVersions) {
		return true
	}

	return false
}

// SetRetainPackageVersions gets a reference to the given int64 and assigns it to the RetainPackageVersions field.
func (o *PatchedrpmRpmRepository) SetRetainPackageVersions(v int64) {
	o.RetainPackageVersions = &v
}

// GetChecksumType returns the ChecksumType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetChecksumType() PackageChecksumTypeEnum {
	if o == nil || IsNil(o.ChecksumType.Get()) {
		var ret PackageChecksumTypeEnum
		return ret
	}
	return *o.ChecksumType.Get()
}

// GetChecksumTypeOk returns a tuple with the ChecksumType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetChecksumTypeOk() (*PackageChecksumTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChecksumType.Get(), o.ChecksumType.IsSet()
}

// HasChecksumType returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasChecksumType() bool {
	if o != nil && o.ChecksumType.IsSet() {
		return true
	}

	return false
}

// SetChecksumType gets a reference to the given NullablePackageChecksumTypeEnum and assigns it to the ChecksumType field.
func (o *PatchedrpmRpmRepository) SetChecksumType(v PackageChecksumTypeEnum) {
	o.ChecksumType.Set(&v)
}
// SetChecksumTypeNil sets the value for ChecksumType to be an explicit nil
func (o *PatchedrpmRpmRepository) SetChecksumTypeNil() {
	o.ChecksumType.Set(nil)
}

// UnsetChecksumType ensures that no value is present for ChecksumType, not even an explicit nil
func (o *PatchedrpmRpmRepository) UnsetChecksumType() {
	o.ChecksumType.Unset()
}

// GetRepoConfig returns the RepoConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetRepoConfig() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RepoConfig
}

// GetRepoConfigOk returns a tuple with the RepoConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetRepoConfigOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RepoConfig) {
		return nil, false
	}
	return &o.RepoConfig, true
}

// HasRepoConfig returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasRepoConfig() bool {
	if o != nil && !IsNil(o.RepoConfig) {
		return true
	}

	return false
}

// SetRepoConfig gets a reference to the given interface{} and assigns it to the RepoConfig field.
func (o *PatchedrpmRpmRepository) SetRepoConfig(v interface{}) {
	o.RepoConfig = v
}

// GetCompressionType returns the CompressionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetCompressionType() CompressionTypeEnum {
	if o == nil || IsNil(o.CompressionType.Get()) {
		var ret CompressionTypeEnum
		return ret
	}
	return *o.CompressionType.Get()
}

// GetCompressionTypeOk returns a tuple with the CompressionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetCompressionTypeOk() (*CompressionTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompressionType.Get(), o.CompressionType.IsSet()
}

// HasCompressionType returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasCompressionType() bool {
	if o != nil && o.CompressionType.IsSet() {
		return true
	}

	return false
}

// SetCompressionType gets a reference to the given NullableCompressionTypeEnum and assigns it to the CompressionType field.
func (o *PatchedrpmRpmRepository) SetCompressionType(v CompressionTypeEnum) {
	o.CompressionType.Set(&v)
}
// SetCompressionTypeNil sets the value for CompressionType to be an explicit nil
func (o *PatchedrpmRpmRepository) SetCompressionTypeNil() {
	o.CompressionType.Set(nil)
}

// UnsetCompressionType ensures that no value is present for CompressionType, not even an explicit nil
func (o *PatchedrpmRpmRepository) UnsetCompressionType() {
	o.CompressionType.Unset()
}

// GetLayout returns the Layout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedrpmRpmRepository) GetLayout() LayoutEnum {
	if o == nil || IsNil(o.Layout.Get()) {
		var ret LayoutEnum
		return ret
	}
	return *o.Layout.Get()
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedrpmRpmRepository) GetLayoutOk() (*LayoutEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Layout.Get(), o.Layout.IsSet()
}

// HasLayout returns a boolean if a field has been set.
func (o *PatchedrpmRpmRepository) HasLayout() bool {
	if o != nil && o.Layout.IsSet() {
		return true
	}

	return false
}

// SetLayout gets a reference to the given NullableLayoutEnum and assigns it to the Layout field.
func (o *PatchedrpmRpmRepository) SetLayout(v LayoutEnum) {
	o.Layout.Set(&v)
}
// SetLayoutNil sets the value for Layout to be an explicit nil
func (o *PatchedrpmRpmRepository) SetLayoutNil() {
	o.Layout.Set(nil)
}

// UnsetLayout ensures that no value is present for Layout, not even an explicit nil
func (o *PatchedrpmRpmRepository) UnsetLayout() {
	o.Layout.Unset()
}

func (o PatchedrpmRpmRepository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedrpmRpmRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PulpLabels) {
		toSerialize["pulp_labels"] = o.PulpLabels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.RetainRepoVersions.IsSet() {
		toSerialize["retain_repo_versions"] = o.RetainRepoVersions.Get()
	}
	if o.Remote.IsSet() {
		toSerialize["remote"] = o.Remote.Get()
	}
	if !IsNil(o.Autopublish) {
		toSerialize["autopublish"] = o.Autopublish
	}
	if o.MetadataSigningService.IsSet() {
		toSerialize["metadata_signing_service"] = o.MetadataSigningService.Get()
	}
	if o.PackageSigningService.IsSet() {
		toSerialize["package_signing_service"] = o.PackageSigningService.Get()
	}
	if !IsNil(o.PackageSigningFingerprint) {
		toSerialize["package_signing_fingerprint"] = o.PackageSigningFingerprint
	}
	if !IsNil(o.RetainPackageVersions) {
		toSerialize["retain_package_versions"] = o.RetainPackageVersions
	}
	if o.ChecksumType.IsSet() {
		toSerialize["checksum_type"] = o.ChecksumType.Get()
	}
	if o.RepoConfig != nil {
		toSerialize["repo_config"] = o.RepoConfig
	}
	if o.CompressionType.IsSet() {
		toSerialize["compression_type"] = o.CompressionType.Get()
	}
	if o.Layout.IsSet() {
		toSerialize["layout"] = o.Layout.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedrpmRpmRepository) UnmarshalJSON(data []byte) (err error) {
	varPatchedrpmRpmRepository := _PatchedrpmRpmRepository{}

	err = json.Unmarshal(data, &varPatchedrpmRpmRepository)

	if err != nil {
		return err
	}

	*o = PatchedrpmRpmRepository(varPatchedrpmRpmRepository)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pulp_labels")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "retain_repo_versions")
		delete(additionalProperties, "remote")
		delete(additionalProperties, "autopublish")
		delete(additionalProperties, "metadata_signing_service")
		delete(additionalProperties, "package_signing_service")
		delete(additionalProperties, "package_signing_fingerprint")
		delete(additionalProperties, "retain_package_versions")
		delete(additionalProperties, "checksum_type")
		delete(additionalProperties, "repo_config")
		delete(additionalProperties, "compression_type")
		delete(additionalProperties, "layout")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedrpmRpmRepository struct {
	value *PatchedrpmRpmRepository
	isSet bool
}

func (v NullablePatchedrpmRpmRepository) Get() *PatchedrpmRpmRepository {
	return v.value
}

func (v *NullablePatchedrpmRpmRepository) Set(val *PatchedrpmRpmRepository) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedrpmRpmRepository) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedrpmRpmRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedrpmRpmRepository(val *PatchedrpmRpmRepository) *NullablePatchedrpmRpmRepository {
	return &NullablePatchedrpmRpmRepository{value: val, isSet: true}
}

func (v NullablePatchedrpmRpmRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedrpmRpmRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


