/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"fmt"
)

// PolicyB5fEnum * `immediate` - When syncing, download all metadata and content now.
type PolicyB5fEnum string

// List of PolicyB5fEnum
const (
	POLICYB5FENUM_IMMEDIATE PolicyB5fEnum = "immediate"
)

// All allowed values of PolicyB5fEnum enum
var AllowedPolicyB5fEnumEnumValues = []PolicyB5fEnum{
	"immediate",
}

func (v *PolicyB5fEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyB5fEnum(value)
	for _, existing := range AllowedPolicyB5fEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyB5fEnum", value)
}

// NewPolicyB5fEnumFromValue returns a pointer to a valid PolicyB5fEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyB5fEnumFromValue(v string) (*PolicyB5fEnum, error) {
	ev := PolicyB5fEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyB5fEnum: valid values are %v", v, AllowedPolicyB5fEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyB5fEnum) IsValid() bool {
	for _, existing := range AllowedPolicyB5fEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyB5fEnum value
func (v PolicyB5fEnum) Ptr() *PolicyB5fEnum {
	return &v
}

type NullablePolicyB5fEnum struct {
	value *PolicyB5fEnum
	isSet bool
}

func (v NullablePolicyB5fEnum) Get() *PolicyB5fEnum {
	return v.value
}

func (v *NullablePolicyB5fEnum) Set(val *PolicyB5fEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyB5fEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyB5fEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyB5fEnum(val *PolicyB5fEnum) *NullablePolicyB5fEnum {
	return &NullablePolicyB5fEnum{value: val, isSet: true}
}

func (v NullablePolicyB5fEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyB5fEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

