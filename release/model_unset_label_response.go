/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"fmt"
)

// checks if the UnsetLabelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnsetLabelResponse{}

// UnsetLabelResponse Serializer for synchronously setting a label.
type UnsetLabelResponse struct {
	Key string `json:"key" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UnsetLabelResponse UnsetLabelResponse

// NewUnsetLabelResponse instantiates a new UnsetLabelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnsetLabelResponse(key string) *UnsetLabelResponse {
	this := UnsetLabelResponse{}
	this.Key = key
	return &this
}

// NewUnsetLabelResponseWithDefaults instantiates a new UnsetLabelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnsetLabelResponseWithDefaults() *UnsetLabelResponse {
	this := UnsetLabelResponse{}
	return &this
}

// GetKey returns the Key field value
func (o *UnsetLabelResponse) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *UnsetLabelResponse) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *UnsetLabelResponse) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UnsetLabelResponse) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsetLabelResponse) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UnsetLabelResponse) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UnsetLabelResponse) SetValue(v string) {
	o.Value = &v
}

func (o UnsetLabelResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnsetLabelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UnsetLabelResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnsetLabelResponse := _UnsetLabelResponse{}

	err = json.Unmarshal(data, &varUnsetLabelResponse)

	if err != nil {
		return err
	}

	*o = UnsetLabelResponse(varUnsetLabelResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUnsetLabelResponse struct {
	value *UnsetLabelResponse
	isSet bool
}

func (v NullableUnsetLabelResponse) Get() *UnsetLabelResponse {
	return v.value
}

func (v *NullableUnsetLabelResponse) Set(val *UnsetLabelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUnsetLabelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUnsetLabelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnsetLabelResponse(val *UnsetLabelResponse) *NullableUnsetLabelResponse {
	return &NullableUnsetLabelResponse{value: val, isSet: true}
}

func (v NullableUnsetLabelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnsetLabelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


