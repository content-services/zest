/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceVulnerabilityReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceVulnerabilityReport{}

// ServiceVulnerabilityReport A serializer for the VulnerabilityReport Model.
type ServiceVulnerabilityReport struct {
	Vulns interface{} `json:"vulns"`
	AdditionalProperties map[string]interface{}
}

type _ServiceVulnerabilityReport ServiceVulnerabilityReport

// NewServiceVulnerabilityReport instantiates a new ServiceVulnerabilityReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceVulnerabilityReport(vulns interface{}) *ServiceVulnerabilityReport {
	this := ServiceVulnerabilityReport{}
	this.Vulns = vulns
	return &this
}

// NewServiceVulnerabilityReportWithDefaults instantiates a new ServiceVulnerabilityReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceVulnerabilityReportWithDefaults() *ServiceVulnerabilityReport {
	this := ServiceVulnerabilityReport{}
	return &this
}

// GetVulns returns the Vulns field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ServiceVulnerabilityReport) GetVulns() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Vulns
}

// GetVulnsOk returns a tuple with the Vulns field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceVulnerabilityReport) GetVulnsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Vulns) {
		return nil, false
	}
	return &o.Vulns, true
}

// SetVulns sets field value
func (o *ServiceVulnerabilityReport) SetVulns(v interface{}) {
	o.Vulns = v
}

func (o ServiceVulnerabilityReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceVulnerabilityReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Vulns != nil {
		toSerialize["vulns"] = o.Vulns
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceVulnerabilityReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vulns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceVulnerabilityReport := _ServiceVulnerabilityReport{}

	err = json.Unmarshal(data, &varServiceVulnerabilityReport)

	if err != nil {
		return err
	}

	*o = ServiceVulnerabilityReport(varServiceVulnerabilityReport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vulns")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceVulnerabilityReport struct {
	value *ServiceVulnerabilityReport
	isSet bool
}

func (v NullableServiceVulnerabilityReport) Get() *ServiceVulnerabilityReport {
	return v.value
}

func (v *NullableServiceVulnerabilityReport) Set(val *ServiceVulnerabilityReport) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceVulnerabilityReport) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceVulnerabilityReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceVulnerabilityReport(val *ServiceVulnerabilityReport) *NullableServiceVulnerabilityReport {
	return &NullableServiceVulnerabilityReport{value: val, isSet: true}
}

func (v NullableServiceVulnerabilityReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceVulnerabilityReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


