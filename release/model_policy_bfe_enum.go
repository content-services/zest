/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"fmt"
)

// PolicyBfeEnum * `immediate` - immediate* `on_demand` - on_demand
type PolicyBfeEnum string

// List of PolicyBfeEnum
const (
	POLICYBFEENUM_IMMEDIATE PolicyBfeEnum = "immediate"
	POLICYBFEENUM_ON_DEMAND PolicyBfeEnum = "on_demand"
)

// All allowed values of PolicyBfeEnum enum
var AllowedPolicyBfeEnumEnumValues = []PolicyBfeEnum{
	"immediate",
	"on_demand",
}

func (v *PolicyBfeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyBfeEnum(value)
	for _, existing := range AllowedPolicyBfeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyBfeEnum", value)
}

// NewPolicyBfeEnumFromValue returns a pointer to a valid PolicyBfeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyBfeEnumFromValue(v string) (*PolicyBfeEnum, error) {
	ev := PolicyBfeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyBfeEnum: valid values are %v", v, AllowedPolicyBfeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyBfeEnum) IsValid() bool {
	for _, existing := range AllowedPolicyBfeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyBfeEnum value
func (v PolicyBfeEnum) Ptr() *PolicyBfeEnum {
	return &v
}

type NullablePolicyBfeEnum struct {
	value *PolicyBfeEnum
	isSet bool
}

func (v NullablePolicyBfeEnum) Get() *PolicyBfeEnum {
	return v.value
}

func (v *NullablePolicyBfeEnum) Set(val *PolicyBfeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyBfeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyBfeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyBfeEnum(val *PolicyBfeEnum) *NullablePolicyBfeEnum {
	return &NullablePolicyBfeEnum{value: val, isSet: true}
}

func (v NullablePolicyBfeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyBfeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

