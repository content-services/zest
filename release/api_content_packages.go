/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


// ContentPackagesAPIService ContentPackagesAPI service
type ContentPackagesAPIService service

type ContentPackagesAPIContentNpmPackagesCreateRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pulpDomain string
	relativePath *string
	name *string
	version *string
	repository *string
	pulpLabels *map[string]string
	artifact *string
	file *os.File
	upload *string
	fileUrl *string
}

func (r ContentPackagesAPIContentNpmPackagesCreateRequest) RelativePath(relativePath string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.relativePath = &relativePath
	return r
}

func (r ContentPackagesAPIContentNpmPackagesCreateRequest) Name(name string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.name = &name
	return r
}

func (r ContentPackagesAPIContentNpmPackagesCreateRequest) Version(version string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.version = &version
	return r
}

// A URI of a repository the new content unit should be associated with.
func (r ContentPackagesAPIContentNpmPackagesCreateRequest) Repository(repository string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.repository = &repository
	return r
}

// A dictionary of arbitrary key/value pairs used to describe a specific Content instance.
func (r ContentPackagesAPIContentNpmPackagesCreateRequest) PulpLabels(pulpLabels map[string]string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.pulpLabels = &pulpLabels
	return r
}

// Artifact file representing the physical content
func (r ContentPackagesAPIContentNpmPackagesCreateRequest) Artifact(artifact string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.artifact = &artifact
	return r
}

// An uploaded file that may be turned into the content unit.
func (r ContentPackagesAPIContentNpmPackagesCreateRequest) File(file *os.File) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.file = file
	return r
}

// An uncommitted upload that may be turned into the content unit.
func (r ContentPackagesAPIContentNpmPackagesCreateRequest) Upload(upload string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.upload = &upload
	return r
}

// A url that Pulp can download and turn into the content unit.
func (r ContentPackagesAPIContentNpmPackagesCreateRequest) FileUrl(fileUrl string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	r.fileUrl = &fileUrl
	return r
}

func (r ContentPackagesAPIContentNpmPackagesCreateRequest) Execute() (*NpmPackageResponse, *http.Response, error) {
	return r.ApiService.ContentNpmPackagesCreateExecute(r)
}

/*
ContentNpmPackagesCreate Create a package

Perform bookkeeping when saving Content."Artifacts" need to be popped off and saved independently, as they are not actually partof the Content model.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentPackagesAPIContentNpmPackagesCreateRequest
*/
func (a *ContentPackagesAPIService) ContentNpmPackagesCreate(ctx context.Context, pulpDomain string) ContentPackagesAPIContentNpmPackagesCreateRequest {
	return ContentPackagesAPIContentNpmPackagesCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return NpmPackageResponse
func (a *ContentPackagesAPIService) ContentNpmPackagesCreateExecute(r ContentPackagesAPIContentNpmPackagesCreateRequest) (*NpmPackageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NpmPackageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentNpmPackagesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/content/npm/packages/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relativePath == nil {
		return localVarReturnValue, nil, reportError("relativePath is required and must be specified")
	}
	if strlen(*r.relativePath) < 1 {
		return localVarReturnValue, nil, reportError("relativePath must have at least 1 elements")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if strlen(*r.name) < 1 {
		return localVarReturnValue, nil, reportError("name must have at least 1 elements")
	}
	if r.version == nil {
		return localVarReturnValue, nil, reportError("version is required and must be specified")
	}
	if strlen(*r.version) < 1 {
		return localVarReturnValue, nil, reportError("version must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "repository", r.repository, "", "")
	}
	if r.pulpLabels != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pulp_labels", r.pulpLabels, "", "")
	}
	if r.artifact != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "artifact", r.artifact, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "relative_path", r.relativePath, "", "")
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"


	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.upload != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload", r.upload, "", "")
	}
	if r.fileUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "file_url", r.fileUrl, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "version", r.version, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentNpmPackagesListRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pulpDomain string
	limit *int32
	name *string
	nameIn *[]string
	offset *int32
	ordering *[]string
	orphanedFor *float32
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	fields *[]string
	excludeFields *[]string
}

// Number of results to return per page.
func (r ContentPackagesAPIContentNpmPackagesListRequest) Limit(limit int32) ContentPackagesAPIContentNpmPackagesListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r ContentPackagesAPIContentNpmPackagesListRequest) Name(name string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.name = &name
	return r
}

// Filter results where name is in a comma-separated list of values
func (r ContentPackagesAPIContentNpmPackagesListRequest) NameIn(nameIn []string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.nameIn = &nameIn
	return r
}

// The initial index from which to return the results.
func (r ContentPackagesAPIContentNpmPackagesListRequest) Offset(offset int32) ContentPackagesAPIContentNpmPackagesListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;upstream_id&#x60; - Upstream id* &#x60;-upstream_id&#x60; - Upstream id (descending)* &#x60;pulp_labels&#x60; - Pulp labels* &#x60;-pulp_labels&#x60; - Pulp labels (descending)* &#x60;timestamp_of_interest&#x60; - Timestamp of interest* &#x60;-timestamp_of_interest&#x60; - Timestamp of interest (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;version&#x60; - Version* &#x60;-version&#x60; - Version (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r ContentPackagesAPIContentNpmPackagesListRequest) Ordering(ordering []string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.ordering = &ordering
	return r
}

// Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
func (r ContentPackagesAPIContentNpmPackagesListRequest) OrphanedFor(orphanedFor float32) ContentPackagesAPIContentNpmPackagesListRequest {
	r.orphanedFor = &orphanedFor
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentNpmPackagesListRequest) PrnIn(prnIn []string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentNpmPackagesListRequest) PulpHrefIn(pulpHrefIn []string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentNpmPackagesListRequest) PulpIdIn(pulpIdIn []string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r ContentPackagesAPIContentNpmPackagesListRequest) PulpLabelSelect(pulpLabelSelect string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r ContentPackagesAPIContentNpmPackagesListRequest) Q(q string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.q = &q
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentNpmPackagesListRequest) RepositoryVersion(repositoryVersion string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentNpmPackagesListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentNpmPackagesListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// A list of fields to include in the response.
func (r ContentPackagesAPIContentNpmPackagesListRequest) Fields(fields []string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentPackagesAPIContentNpmPackagesListRequest) ExcludeFields(excludeFields []string) ContentPackagesAPIContentNpmPackagesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentPackagesAPIContentNpmPackagesListRequest) Execute() (*PaginatednpmPackageResponseList, *http.Response, error) {
	return r.ApiService.ContentNpmPackagesListExecute(r)
}

/*
ContentNpmPackagesList List packages

A ViewSet for Package.Define endpoint name which will appear in the API endpoint for this content type.For example::    http://pulp.example.com/pulp/api/v3/content/npm/units/Also specify queryset and serializer for Package.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentPackagesAPIContentNpmPackagesListRequest
*/
func (a *ContentPackagesAPIService) ContentNpmPackagesList(ctx context.Context, pulpDomain string) ContentPackagesAPIContentNpmPackagesListRequest {
	return ContentPackagesAPIContentNpmPackagesListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatednpmPackageResponseList
func (a *ContentPackagesAPIService) ContentNpmPackagesListExecute(r ContentPackagesAPIContentNpmPackagesListRequest) (*PaginatednpmPackageResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatednpmPackageResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentNpmPackagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/content/npm/packages/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.orphanedFor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphaned_for", r.orphanedFor, "form", "")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "form", "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "form", "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentNpmPackagesReadRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	npmPackageHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentPackagesAPIContentNpmPackagesReadRequest) Fields(fields []string) ContentPackagesAPIContentNpmPackagesReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentPackagesAPIContentNpmPackagesReadRequest) ExcludeFields(excludeFields []string) ContentPackagesAPIContentNpmPackagesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentPackagesAPIContentNpmPackagesReadRequest) Execute() (*NpmPackageResponse, *http.Response, error) {
	return r.ApiService.ContentNpmPackagesReadExecute(r)
}

/*
ContentNpmPackagesRead Inspect a package

A ViewSet for Package.Define endpoint name which will appear in the API endpoint for this content type.For example::    http://pulp.example.com/pulp/api/v3/content/npm/units/Also specify queryset and serializer for Package.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmPackageHref
 @return ContentPackagesAPIContentNpmPackagesReadRequest
*/
func (a *ContentPackagesAPIService) ContentNpmPackagesRead(ctx context.Context, npmPackageHref string) ContentPackagesAPIContentNpmPackagesReadRequest {
	return ContentPackagesAPIContentNpmPackagesReadRequest{
		ApiService: a,
		ctx: ctx,
		npmPackageHref: npmPackageHref,
	}
}

// Execute executes the request
//  @return NpmPackageResponse
func (a *ContentPackagesAPIService) ContentNpmPackagesReadExecute(r ContentPackagesAPIContentNpmPackagesReadRequest) (*NpmPackageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NpmPackageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentNpmPackagesRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_package_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_package_href"+"}", url.PathEscape(parameterValueToString(r.npmPackageHref, "npmPackageHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentNpmPackagesSetLabelRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	npmPackageHref string
	setLabel *SetLabel
}

func (r ContentPackagesAPIContentNpmPackagesSetLabelRequest) SetLabel(setLabel SetLabel) ContentPackagesAPIContentNpmPackagesSetLabelRequest {
	r.setLabel = &setLabel
	return r
}

func (r ContentPackagesAPIContentNpmPackagesSetLabelRequest) Execute() (*SetLabelResponse, *http.Response, error) {
	return r.ApiService.ContentNpmPackagesSetLabelExecute(r)
}

/*
ContentNpmPackagesSetLabel Set a label

Set a single pulp_label on the object to a specific value or null.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmPackageHref
 @return ContentPackagesAPIContentNpmPackagesSetLabelRequest
*/
func (a *ContentPackagesAPIService) ContentNpmPackagesSetLabel(ctx context.Context, npmPackageHref string) ContentPackagesAPIContentNpmPackagesSetLabelRequest {
	return ContentPackagesAPIContentNpmPackagesSetLabelRequest{
		ApiService: a,
		ctx: ctx,
		npmPackageHref: npmPackageHref,
	}
}

// Execute executes the request
//  @return SetLabelResponse
func (a *ContentPackagesAPIService) ContentNpmPackagesSetLabelExecute(r ContentPackagesAPIContentNpmPackagesSetLabelRequest) (*SetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentNpmPackagesSetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_package_href}set_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_package_href"+"}", url.PathEscape(parameterValueToString(r.npmPackageHref, "npmPackageHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setLabel == nil {
		return localVarReturnValue, nil, reportError("setLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentNpmPackagesUnsetLabelRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	npmPackageHref string
	unsetLabel *UnsetLabel
}

func (r ContentPackagesAPIContentNpmPackagesUnsetLabelRequest) UnsetLabel(unsetLabel UnsetLabel) ContentPackagesAPIContentNpmPackagesUnsetLabelRequest {
	r.unsetLabel = &unsetLabel
	return r
}

func (r ContentPackagesAPIContentNpmPackagesUnsetLabelRequest) Execute() (*UnsetLabelResponse, *http.Response, error) {
	return r.ApiService.ContentNpmPackagesUnsetLabelExecute(r)
}

/*
ContentNpmPackagesUnsetLabel Unset a label

Unset a single pulp_label on the object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param npmPackageHref
 @return ContentPackagesAPIContentNpmPackagesUnsetLabelRequest
*/
func (a *ContentPackagesAPIService) ContentNpmPackagesUnsetLabel(ctx context.Context, npmPackageHref string) ContentPackagesAPIContentNpmPackagesUnsetLabelRequest {
	return ContentPackagesAPIContentNpmPackagesUnsetLabelRequest{
		ApiService: a,
		ctx: ctx,
		npmPackageHref: npmPackageHref,
	}
}

// Execute executes the request
//  @return UnsetLabelResponse
func (a *ContentPackagesAPIService) ContentNpmPackagesUnsetLabelExecute(r ContentPackagesAPIContentNpmPackagesUnsetLabelRequest) (*UnsetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentNpmPackagesUnsetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{npm_package_href}unset_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"npm_package_href"+"}", url.PathEscape(parameterValueToString(r.npmPackageHref, "npmPackageHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsetLabel == nil {
		return localVarReturnValue, nil, reportError("unsetLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsetLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentPythonPackagesCreateRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pulpDomain string
	relativePath *string
	repository *string
	pulpLabels *map[string]string
	artifact *string
	file *os.File
	upload *string
	fileUrl *string
	sha256 *string
	summary *string
	description *string
	descriptionContentType *string
	keywords *string
	homePage *string
	downloadUrl *string
	author *string
	authorEmail *string
	maintainer *string
	maintainerEmail *string
	license *string
	requiresPython *string
	projectUrl *string
	projectUrls *interface{}
	platform *string
	supportedPlatform *string
	requiresDist *interface{}
	providesDist *interface{}
	obsoletesDist *interface{}
	requiresExternal *interface{}
	classifiers *interface{}
}

// Path where the artifact is located relative to distributions base_path
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) RelativePath(relativePath string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.relativePath = &relativePath
	return r
}

// A URI of a repository the new content unit should be associated with.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Repository(repository string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.repository = &repository
	return r
}

// A dictionary of arbitrary key/value pairs used to describe a specific Content instance.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) PulpLabels(pulpLabels map[string]string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.pulpLabels = &pulpLabels
	return r
}

// Artifact file representing the physical content
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Artifact(artifact string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.artifact = &artifact
	return r
}

// An uploaded file that may be turned into the content unit.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) File(file *os.File) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.file = file
	return r
}

// An uncommitted upload that may be turned into the content unit.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Upload(upload string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.upload = &upload
	return r
}

// A url that Pulp can download and turn into the content unit.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) FileUrl(fileUrl string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.fileUrl = &fileUrl
	return r
}

// The SHA256 digest of this package.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Sha256(sha256 string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.sha256 = &sha256
	return r
}

// A one-line summary of what the package does.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Summary(summary string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.summary = &summary
	return r
}

// A longer description of the package that can run to several paragraphs.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Description(description string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.description = &description
	return r
}

// A string stating the markup syntax (if any) used in the distribution’s description, so that tools can intelligently render the description.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) DescriptionContentType(descriptionContentType string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.descriptionContentType = &descriptionContentType
	return r
}

// Additional keywords to be used to assist searching for the package in a larger catalog.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Keywords(keywords string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.keywords = &keywords
	return r
}

// The URL for the package&#39;s home page.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) HomePage(homePage string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.homePage = &homePage
	return r
}

// Legacy field denoting the URL from which this package can be downloaded.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) DownloadUrl(downloadUrl string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.downloadUrl = &downloadUrl
	return r
}

// Text containing the author&#39;s name. Contact information can also be added, separated with newlines.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Author(author string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.author = &author
	return r
}

// The author&#39;s e-mail address. 
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) AuthorEmail(authorEmail string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.authorEmail = &authorEmail
	return r
}

// The maintainer&#39;s name at a minimum; additional contact information may be provided.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Maintainer(maintainer string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.maintainer = &maintainer
	return r
}

// The maintainer&#39;s e-mail address.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) MaintainerEmail(maintainerEmail string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.maintainerEmail = &maintainerEmail
	return r
}

// Text indicating the license covering the distribution
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) License(license string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.license = &license
	return r
}

// The Python version(s) that the distribution is guaranteed to be compatible with.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) RequiresPython(requiresPython string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.requiresPython = &requiresPython
	return r
}

// A browsable URL for the project and a label for it, separated by a comma.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) ProjectUrl(projectUrl string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.projectUrl = &projectUrl
	return r
}

// A dictionary of labels and URLs for the project.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) ProjectUrls(projectUrls interface{}) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.projectUrls = &projectUrls
	return r
}

// A comma-separated list of platform specifications, summarizing the operating systems supported by the package.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Platform(platform string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.platform = &platform
	return r
}

// Field to specify the OS and CPU for which the binary package was compiled. 
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) SupportedPlatform(supportedPlatform string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.supportedPlatform = &supportedPlatform
	return r
}

// A JSON list containing names of some other distutils project required by this distribution.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) RequiresDist(requiresDist interface{}) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.requiresDist = &requiresDist
	return r
}

// A JSON list containing names of a Distutils project which is contained within this distribution.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) ProvidesDist(providesDist interface{}) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.providesDist = &providesDist
	return r
}

// A JSON list containing names of a distutils project&#39;s distribution which this distribution renders obsolete, meaning that the two projects should not be installed at the same time.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) ObsoletesDist(obsoletesDist interface{}) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.obsoletesDist = &obsoletesDist
	return r
}

// A JSON list containing some dependency in the system that the distribution is to be used.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) RequiresExternal(requiresExternal interface{}) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.requiresExternal = &requiresExternal
	return r
}

// A JSON list containing classification values for a Python package.
func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Classifiers(classifiers interface{}) ContentPackagesAPIContentPythonPackagesCreateRequest {
	r.classifiers = &classifiers
	return r
}

func (r ContentPackagesAPIContentPythonPackagesCreateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.ContentPythonPackagesCreateExecute(r)
}

/*
ContentPythonPackagesCreate Create a python package content

Trigger an asynchronous task to create content,optionally create new repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentPackagesAPIContentPythonPackagesCreateRequest
*/
func (a *ContentPackagesAPIService) ContentPythonPackagesCreate(ctx context.Context, pulpDomain string) ContentPackagesAPIContentPythonPackagesCreateRequest {
	return ContentPackagesAPIContentPythonPackagesCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *ContentPackagesAPIService) ContentPythonPackagesCreateExecute(r ContentPackagesAPIContentPythonPackagesCreateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentPythonPackagesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/content/python/packages/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relativePath == nil {
		return localVarReturnValue, nil, reportError("relativePath is required and must be specified")
	}
	if strlen(*r.relativePath) < 1 {
		return localVarReturnValue, nil, reportError("relativePath must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "repository", r.repository, "", "")
	}
	if r.pulpLabels != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pulp_labels", r.pulpLabels, "", "")
	}
	if r.artifact != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "artifact", r.artifact, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "relative_path", r.relativePath, "", "")
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"


	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.upload != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload", r.upload, "", "")
	}
	if r.fileUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "file_url", r.fileUrl, "", "")
	}
	if r.sha256 != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "sha256", r.sha256, "", "")
	}
	if r.summary != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "summary", r.summary, "", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "description", r.description, "", "")
	}
	if r.descriptionContentType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "description_content_type", r.descriptionContentType, "", "")
	}
	if r.keywords != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "keywords", r.keywords, "", "")
	}
	if r.homePage != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "home_page", r.homePage, "", "")
	}
	if r.downloadUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "download_url", r.downloadUrl, "", "")
	}
	if r.author != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "author", r.author, "", "")
	}
	if r.authorEmail != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "author_email", r.authorEmail, "", "")
	}
	if r.maintainer != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "maintainer", r.maintainer, "", "")
	}
	if r.maintainerEmail != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "maintainer_email", r.maintainerEmail, "", "")
	}
	if r.license != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "license", r.license, "", "")
	}
	if r.requiresPython != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "requires_python", r.requiresPython, "", "")
	}
	if r.projectUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "project_url", r.projectUrl, "", "")
	}
	if r.projectUrls != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "project_urls", r.projectUrls, "", "")
	}
	if r.platform != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "platform", r.platform, "", "")
	}
	if r.supportedPlatform != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "supported_platform", r.supportedPlatform, "", "")
	}
	if r.requiresDist != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "requires_dist", r.requiresDist, "", "")
	}
	if r.providesDist != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "provides_dist", r.providesDist, "", "")
	}
	if r.obsoletesDist != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "obsoletes_dist", r.obsoletesDist, "", "")
	}
	if r.requiresExternal != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "requires_external", r.requiresExternal, "", "")
	}
	if r.classifiers != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "classifiers", r.classifiers, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentPythonPackagesListRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pulpDomain string
	author *string
	authorIn *[]string
	filename *string
	filenameContains *string
	filenameIn *[]string
	keywordsContains *string
	keywordsIn *[]string
	limit *int32
	name *string
	nameIn *[]string
	offset *int32
	ordering *[]string
	orphanedFor *float32
	packagetype *string
	packagetypeIn *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	requiresPython *string
	requiresPythonContains *string
	requiresPythonIn *[]string
	sha256 *string
	sha256In *[]string
	version *string
	versionGt *string
	versionGte *string
	versionLt *string
	versionLte *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where author matches value
func (r ContentPackagesAPIContentPythonPackagesListRequest) Author(author string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.author = &author
	return r
}

// Filter results where author is in a comma-separated list of values
func (r ContentPackagesAPIContentPythonPackagesListRequest) AuthorIn(authorIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.authorIn = &authorIn
	return r
}

// Filter results where filename matches value
func (r ContentPackagesAPIContentPythonPackagesListRequest) Filename(filename string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.filename = &filename
	return r
}

// Filter results where filename contains value
func (r ContentPackagesAPIContentPythonPackagesListRequest) FilenameContains(filenameContains string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.filenameContains = &filenameContains
	return r
}

// Filter results where filename is in a comma-separated list of values
func (r ContentPackagesAPIContentPythonPackagesListRequest) FilenameIn(filenameIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.filenameIn = &filenameIn
	return r
}

// Filter results where keywords contains value
func (r ContentPackagesAPIContentPythonPackagesListRequest) KeywordsContains(keywordsContains string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.keywordsContains = &keywordsContains
	return r
}

// Filter results where keywords is in a comma-separated list of values
func (r ContentPackagesAPIContentPythonPackagesListRequest) KeywordsIn(keywordsIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.keywordsIn = &keywordsIn
	return r
}

// Number of results to return per page.
func (r ContentPackagesAPIContentPythonPackagesListRequest) Limit(limit int32) ContentPackagesAPIContentPythonPackagesListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r ContentPackagesAPIContentPythonPackagesListRequest) Name(name string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.name = &name
	return r
}

// Filter results where name is in a comma-separated list of values
func (r ContentPackagesAPIContentPythonPackagesListRequest) NameIn(nameIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.nameIn = &nameIn
	return r
}

// The initial index from which to return the results.
func (r ContentPackagesAPIContentPythonPackagesListRequest) Offset(offset int32) ContentPackagesAPIContentPythonPackagesListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;upstream_id&#x60; - Upstream id* &#x60;-upstream_id&#x60; - Upstream id (descending)* &#x60;pulp_labels&#x60; - Pulp labels* &#x60;-pulp_labels&#x60; - Pulp labels (descending)* &#x60;timestamp_of_interest&#x60; - Timestamp of interest* &#x60;-timestamp_of_interest&#x60; - Timestamp of interest (descending)* &#x60;filename&#x60; - Filename* &#x60;-filename&#x60; - Filename (descending)* &#x60;packagetype&#x60; - Packagetype* &#x60;-packagetype&#x60; - Packagetype (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;version&#x60; - Version* &#x60;-version&#x60; - Version (descending)* &#x60;sha256&#x60; - Sha256* &#x60;-sha256&#x60; - Sha256 (descending)* &#x60;python_version&#x60; - Python version* &#x60;-python_version&#x60; - Python version (descending)* &#x60;metadata_version&#x60; - Metadata version* &#x60;-metadata_version&#x60; - Metadata version (descending)* &#x60;summary&#x60; - Summary* &#x60;-summary&#x60; - Summary (descending)* &#x60;description&#x60; - Description* &#x60;-description&#x60; - Description (descending)* &#x60;keywords&#x60; - Keywords* &#x60;-keywords&#x60; - Keywords (descending)* &#x60;home_page&#x60; - Home page* &#x60;-home_page&#x60; - Home page (descending)* &#x60;download_url&#x60; - Download url* &#x60;-download_url&#x60; - Download url (descending)* &#x60;author&#x60; - Author* &#x60;-author&#x60; - Author (descending)* &#x60;author_email&#x60; - Author email* &#x60;-author_email&#x60; - Author email (descending)* &#x60;maintainer&#x60; - Maintainer* &#x60;-maintainer&#x60; - Maintainer (descending)* &#x60;maintainer_email&#x60; - Maintainer email* &#x60;-maintainer_email&#x60; - Maintainer email (descending)* &#x60;license&#x60; - License* &#x60;-license&#x60; - License (descending)* &#x60;requires_python&#x60; - Requires python* &#x60;-requires_python&#x60; - Requires python (descending)* &#x60;project_url&#x60; - Project url* &#x60;-project_url&#x60; - Project url (descending)* &#x60;platform&#x60; - Platform* &#x60;-platform&#x60; - Platform (descending)* &#x60;supported_platform&#x60; - Supported platform* &#x60;-supported_platform&#x60; - Supported platform (descending)* &#x60;requires_dist&#x60; - Requires dist* &#x60;-requires_dist&#x60; - Requires dist (descending)* &#x60;provides_dist&#x60; - Provides dist* &#x60;-provides_dist&#x60; - Provides dist (descending)* &#x60;obsoletes_dist&#x60; - Obsoletes dist* &#x60;-obsoletes_dist&#x60; - Obsoletes dist (descending)* &#x60;requires_external&#x60; - Requires external* &#x60;-requires_external&#x60; - Requires external (descending)* &#x60;classifiers&#x60; - Classifiers* &#x60;-classifiers&#x60; - Classifiers (descending)* &#x60;project_urls&#x60; - Project urls* &#x60;-project_urls&#x60; - Project urls (descending)* &#x60;description_content_type&#x60; - Description content type* &#x60;-description_content_type&#x60; - Description content type (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r ContentPackagesAPIContentPythonPackagesListRequest) Ordering(ordering []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.ordering = &ordering
	return r
}

// Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
func (r ContentPackagesAPIContentPythonPackagesListRequest) OrphanedFor(orphanedFor float32) ContentPackagesAPIContentPythonPackagesListRequest {
	r.orphanedFor = &orphanedFor
	return r
}

// Filter results where packagetype matches value* &#x60;bdist_dmg&#x60; - bdist_dmg* &#x60;bdist_dumb&#x60; - bdist_dumb* &#x60;bdist_egg&#x60; - bdist_egg* &#x60;bdist_msi&#x60; - bdist_msi* &#x60;bdist_rpm&#x60; - bdist_rpm* &#x60;bdist_wheel&#x60; - bdist_wheel* &#x60;bdist_wininst&#x60; - bdist_wininst* &#x60;sdist&#x60; - sdist
func (r ContentPackagesAPIContentPythonPackagesListRequest) Packagetype(packagetype string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.packagetype = &packagetype
	return r
}

// Filter results where packagetype is in a comma-separated list of values
func (r ContentPackagesAPIContentPythonPackagesListRequest) PackagetypeIn(packagetypeIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.packagetypeIn = &packagetypeIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentPythonPackagesListRequest) PrnIn(prnIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentPythonPackagesListRequest) PulpHrefIn(pulpHrefIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentPythonPackagesListRequest) PulpIdIn(pulpIdIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r ContentPackagesAPIContentPythonPackagesListRequest) PulpLabelSelect(pulpLabelSelect string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r ContentPackagesAPIContentPythonPackagesListRequest) Q(q string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.q = &q
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentPythonPackagesListRequest) RepositoryVersion(repositoryVersion string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentPythonPackagesListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentPythonPackagesListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

// Filter results where requires_python matches value
func (r ContentPackagesAPIContentPythonPackagesListRequest) RequiresPython(requiresPython string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.requiresPython = &requiresPython
	return r
}

// Filter results where requires_python contains value
func (r ContentPackagesAPIContentPythonPackagesListRequest) RequiresPythonContains(requiresPythonContains string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.requiresPythonContains = &requiresPythonContains
	return r
}

// Filter results where requires_python is in a comma-separated list of values
func (r ContentPackagesAPIContentPythonPackagesListRequest) RequiresPythonIn(requiresPythonIn []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.requiresPythonIn = &requiresPythonIn
	return r
}

// Filter results where sha256 matches value
func (r ContentPackagesAPIContentPythonPackagesListRequest) Sha256(sha256 string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.sha256 = &sha256
	return r
}

// Filter results where sha256 is in a comma-separated list of values
func (r ContentPackagesAPIContentPythonPackagesListRequest) Sha256In(sha256In []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.sha256In = &sha256In
	return r
}

// Filter results where version matches value
func (r ContentPackagesAPIContentPythonPackagesListRequest) Version(version string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.version = &version
	return r
}

// Filter results where version is greater than value
func (r ContentPackagesAPIContentPythonPackagesListRequest) VersionGt(versionGt string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.versionGt = &versionGt
	return r
}

// Filter results where version is greater than or equal to value
func (r ContentPackagesAPIContentPythonPackagesListRequest) VersionGte(versionGte string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.versionGte = &versionGte
	return r
}

// Filter results where version is less than value
func (r ContentPackagesAPIContentPythonPackagesListRequest) VersionLt(versionLt string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.versionLt = &versionLt
	return r
}

// Filter results where version is less than or equal to value
func (r ContentPackagesAPIContentPythonPackagesListRequest) VersionLte(versionLte string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.versionLte = &versionLte
	return r
}

// A list of fields to include in the response.
func (r ContentPackagesAPIContentPythonPackagesListRequest) Fields(fields []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentPackagesAPIContentPythonPackagesListRequest) ExcludeFields(excludeFields []string) ContentPackagesAPIContentPythonPackagesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentPackagesAPIContentPythonPackagesListRequest) Execute() (*PaginatedpythonPythonPackageContentResponseList, *http.Response, error) {
	return r.ApiService.ContentPythonPackagesListExecute(r)
}

/*
ContentPythonPackagesList List python package contents

PythonPackageContent represents each individually installable Python package. In the Pythonecosystem, this is called a Python Distribution, sometimes (ambiguously) refered to as apackage. In Pulp Python, we refer to it as PythonPackageContent. EachPythonPackageContent corresponds to a single filename, for example`pulpcore-3.0.0rc1-py3-none-any.whl` or `pulpcore-3.0.0rc1.tar.gz`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentPackagesAPIContentPythonPackagesListRequest
*/
func (a *ContentPackagesAPIService) ContentPythonPackagesList(ctx context.Context, pulpDomain string) ContentPackagesAPIContentPythonPackagesListRequest {
	return ContentPackagesAPIContentPythonPackagesListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedpythonPythonPackageContentResponseList
func (a *ContentPackagesAPIService) ContentPythonPackagesListExecute(r ContentPackagesAPIContentPythonPackagesListRequest) (*PaginatedpythonPythonPackageContentResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedpythonPythonPackageContentResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentPythonPackagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/content/python/packages/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.author != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "author", r.author, "form", "")
	}
	if r.authorIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "author__in", r.authorIn, "form", "csv")
	}
	if r.filename != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filename", r.filename, "form", "")
	}
	if r.filenameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filename__contains", r.filenameContains, "form", "")
	}
	if r.filenameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filename__in", r.filenameIn, "form", "csv")
	}
	if r.keywordsContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keywords__contains", r.keywordsContains, "form", "")
	}
	if r.keywordsIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keywords__in", r.keywordsIn, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.orphanedFor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphaned_for", r.orphanedFor, "form", "")
	}
	if r.packagetype != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packagetype", r.packagetype, "form", "")
	}
	if r.packagetypeIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packagetype__in", r.packagetypeIn, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "form", "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "form", "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "form", "")
	}
	if r.requiresPython != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requires_python", r.requiresPython, "form", "")
	}
	if r.requiresPythonContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requires_python__contains", r.requiresPythonContains, "form", "")
	}
	if r.requiresPythonIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requires_python__in", r.requiresPythonIn, "form", "csv")
	}
	if r.sha256 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha256", r.sha256, "form", "")
	}
	if r.sha256In != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha256__in", r.sha256In, "form", "csv")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.versionGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version__gt", r.versionGt, "form", "")
	}
	if r.versionGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version__gte", r.versionGte, "form", "")
	}
	if r.versionLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version__lt", r.versionLt, "form", "")
	}
	if r.versionLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version__lte", r.versionLte, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentPythonPackagesReadRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pythonPythonPackageContentHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r ContentPackagesAPIContentPythonPackagesReadRequest) Fields(fields []string) ContentPackagesAPIContentPythonPackagesReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentPackagesAPIContentPythonPackagesReadRequest) ExcludeFields(excludeFields []string) ContentPackagesAPIContentPythonPackagesReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentPackagesAPIContentPythonPackagesReadRequest) Execute() (*PythonPythonPackageContentResponse, *http.Response, error) {
	return r.ApiService.ContentPythonPackagesReadExecute(r)
}

/*
ContentPythonPackagesRead Inspect a python package content

PythonPackageContent represents each individually installable Python package. In the Pythonecosystem, this is called a Python Distribution, sometimes (ambiguously) refered to as apackage. In Pulp Python, we refer to it as PythonPackageContent. EachPythonPackageContent corresponds to a single filename, for example`pulpcore-3.0.0rc1-py3-none-any.whl` or `pulpcore-3.0.0rc1.tar.gz`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pythonPythonPackageContentHref
 @return ContentPackagesAPIContentPythonPackagesReadRequest
*/
func (a *ContentPackagesAPIService) ContentPythonPackagesRead(ctx context.Context, pythonPythonPackageContentHref string) ContentPackagesAPIContentPythonPackagesReadRequest {
	return ContentPackagesAPIContentPythonPackagesReadRequest{
		ApiService: a,
		ctx: ctx,
		pythonPythonPackageContentHref: pythonPythonPackageContentHref,
	}
}

// Execute executes the request
//  @return PythonPythonPackageContentResponse
func (a *ContentPackagesAPIService) ContentPythonPackagesReadExecute(r ContentPackagesAPIContentPythonPackagesReadRequest) (*PythonPythonPackageContentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PythonPythonPackageContentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentPythonPackagesRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{python_python_package_content_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"python_python_package_content_href"+"}", url.PathEscape(parameterValueToString(r.pythonPythonPackageContentHref, "pythonPythonPackageContentHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentPythonPackagesSetLabelRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pythonPythonPackageContentHref string
	setLabel *SetLabel
}

func (r ContentPackagesAPIContentPythonPackagesSetLabelRequest) SetLabel(setLabel SetLabel) ContentPackagesAPIContentPythonPackagesSetLabelRequest {
	r.setLabel = &setLabel
	return r
}

func (r ContentPackagesAPIContentPythonPackagesSetLabelRequest) Execute() (*SetLabelResponse, *http.Response, error) {
	return r.ApiService.ContentPythonPackagesSetLabelExecute(r)
}

/*
ContentPythonPackagesSetLabel Set a label

Set a single pulp_label on the object to a specific value or null.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pythonPythonPackageContentHref
 @return ContentPackagesAPIContentPythonPackagesSetLabelRequest
*/
func (a *ContentPackagesAPIService) ContentPythonPackagesSetLabel(ctx context.Context, pythonPythonPackageContentHref string) ContentPackagesAPIContentPythonPackagesSetLabelRequest {
	return ContentPackagesAPIContentPythonPackagesSetLabelRequest{
		ApiService: a,
		ctx: ctx,
		pythonPythonPackageContentHref: pythonPythonPackageContentHref,
	}
}

// Execute executes the request
//  @return SetLabelResponse
func (a *ContentPackagesAPIService) ContentPythonPackagesSetLabelExecute(r ContentPackagesAPIContentPythonPackagesSetLabelRequest) (*SetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentPythonPackagesSetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{python_python_package_content_href}set_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"python_python_package_content_href"+"}", url.PathEscape(parameterValueToString(r.pythonPythonPackageContentHref, "pythonPythonPackageContentHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setLabel == nil {
		return localVarReturnValue, nil, reportError("setLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentPythonPackagesUnsetLabelRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pythonPythonPackageContentHref string
	unsetLabel *UnsetLabel
}

func (r ContentPackagesAPIContentPythonPackagesUnsetLabelRequest) UnsetLabel(unsetLabel UnsetLabel) ContentPackagesAPIContentPythonPackagesUnsetLabelRequest {
	r.unsetLabel = &unsetLabel
	return r
}

func (r ContentPackagesAPIContentPythonPackagesUnsetLabelRequest) Execute() (*UnsetLabelResponse, *http.Response, error) {
	return r.ApiService.ContentPythonPackagesUnsetLabelExecute(r)
}

/*
ContentPythonPackagesUnsetLabel Unset a label

Unset a single pulp_label on the object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pythonPythonPackageContentHref
 @return ContentPackagesAPIContentPythonPackagesUnsetLabelRequest
*/
func (a *ContentPackagesAPIService) ContentPythonPackagesUnsetLabel(ctx context.Context, pythonPythonPackageContentHref string) ContentPackagesAPIContentPythonPackagesUnsetLabelRequest {
	return ContentPackagesAPIContentPythonPackagesUnsetLabelRequest{
		ApiService: a,
		ctx: ctx,
		pythonPythonPackageContentHref: pythonPythonPackageContentHref,
	}
}

// Execute executes the request
//  @return UnsetLabelResponse
func (a *ContentPackagesAPIService) ContentPythonPackagesUnsetLabelExecute(r ContentPackagesAPIContentPythonPackagesUnsetLabelRequest) (*UnsetLabelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnsetLabelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentPythonPackagesUnsetLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{python_python_package_content_href}unset_label/"
	localVarPath = strings.Replace(localVarPath, "{"+"python_python_package_content_href"+"}", url.PathEscape(parameterValueToString(r.pythonPythonPackageContentHref, "pythonPythonPackageContentHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unsetLabel == nil {
		return localVarReturnValue, nil, reportError("unsetLabel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unsetLabel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentRpmPackagesCreateRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pulpDomain string
	repository *string
	pulpLabels *map[string]string
	artifact *string
	relativePath *string
	file *os.File
	upload *string
	fileUrl *string
}

// A URI of a repository the new content unit should be associated with.
func (r ContentPackagesAPIContentRpmPackagesCreateRequest) Repository(repository string) ContentPackagesAPIContentRpmPackagesCreateRequest {
	r.repository = &repository
	return r
}

// A dictionary of arbitrary key/value pairs used to describe a specific Content instance.
func (r ContentPackagesAPIContentRpmPackagesCreateRequest) PulpLabels(pulpLabels map[string]string) ContentPackagesAPIContentRpmPackagesCreateRequest {
	r.pulpLabels = &pulpLabels
	return r
}

// Artifact file representing the physical content
func (r ContentPackagesAPIContentRpmPackagesCreateRequest) Artifact(artifact string) ContentPackagesAPIContentRpmPackagesCreateRequest {
	r.artifact = &artifact
	return r
}

// Path where the artifact is located relative to distributions base_path
func (r ContentPackagesAPIContentRpmPackagesCreateRequest) RelativePath(relativePath string) ContentPackagesAPIContentRpmPackagesCreateRequest {
	r.relativePath = &relativePath
	return r
}

// An uploaded file that may be turned into the content unit.
func (r ContentPackagesAPIContentRpmPackagesCreateRequest) File(file *os.File) ContentPackagesAPIContentRpmPackagesCreateRequest {
	r.file = file
	return r
}

// An uncommitted upload that may be turned into the content unit.
func (r ContentPackagesAPIContentRpmPackagesCreateRequest) Upload(upload string) ContentPackagesAPIContentRpmPackagesCreateRequest {
	r.upload = &upload
	return r
}

// A url that Pulp can download and turn into the content unit.
func (r ContentPackagesAPIContentRpmPackagesCreateRequest) FileUrl(fileUrl string) ContentPackagesAPIContentRpmPackagesCreateRequest {
	r.fileUrl = &fileUrl
	return r
}

func (r ContentPackagesAPIContentRpmPackagesCreateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.ContentRpmPackagesCreateExecute(r)
}

/*
ContentRpmPackagesCreate Create a package

Trigger an asynchronous task to create an RPM package,optionally create new repository version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentPackagesAPIContentRpmPackagesCreateRequest
*/
func (a *ContentPackagesAPIService) ContentRpmPackagesCreate(ctx context.Context, pulpDomain string) ContentPackagesAPIContentRpmPackagesCreateRequest {
	return ContentPackagesAPIContentRpmPackagesCreateRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *ContentPackagesAPIService) ContentRpmPackagesCreateExecute(r ContentPackagesAPIContentRpmPackagesCreateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentRpmPackagesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/content/rpm/packages/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "repository", r.repository, "", "")
	}
	if r.pulpLabels != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pulp_labels", r.pulpLabels, "", "")
	}
	if r.artifact != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "artifact", r.artifact, "", "")
	}
	if r.relativePath != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "relative_path", r.relativePath, "", "")
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"


	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.upload != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload", r.upload, "", "")
	}
	if r.fileUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "file_url", r.fileUrl, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ContentPackagesAPIContentRpmPackagesListRequest struct {
	ctx context.Context
	ApiService *ContentPackagesAPIService
	pulpDomain string
	arch *string
	archContains *string
	archIn *[]string
	archNe *string
	archStartswith *string
	checksumType *string
	checksumTypeIn *[]string
	checksumTypeNe *string
	epoch *string
	epochIn *[]string
	epochNe *string
	filename *string
	limit *int32
	name *string
	nameContains *string
	nameIn *[]string
	nameNe *string
	nameStartswith *string
	offset *int32
	ordering *[]string
	orphanedFor *float32
	pkgId *string
	pkgIdIn *[]string
	prnIn *[]string
	pulpHrefIn *[]string
	pulpIdIn *[]string
	pulpLabelSelect *string
	q *string
	release *string
	releaseContains *string
	releaseIn *[]string
	releaseNe *string
	releaseStartswith *string
	repositoryVersion *string
	repositoryVersionAdded *string
	repositoryVersionRemoved *string
	sha256 *string
	version *string
	versionIn *[]string
	versionNe *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where arch matches value
func (r ContentPackagesAPIContentRpmPackagesListRequest) Arch(arch string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.arch = &arch
	return r
}

// Filter results where arch contains value
func (r ContentPackagesAPIContentRpmPackagesListRequest) ArchContains(archContains string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.archContains = &archContains
	return r
}

// Filter results where arch is in a comma-separated list of values
func (r ContentPackagesAPIContentRpmPackagesListRequest) ArchIn(archIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.archIn = &archIn
	return r
}

// Filter results where arch not equal to value
func (r ContentPackagesAPIContentRpmPackagesListRequest) ArchNe(archNe string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.archNe = &archNe
	return r
}

// Filter results where arch starts with value
func (r ContentPackagesAPIContentRpmPackagesListRequest) ArchStartswith(archStartswith string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.archStartswith = &archStartswith
	return r
}

// Filter results where checksum_type matches value* &#x60;unknown&#x60; - unknown* &#x60;md5&#x60; - md5* &#x60;sha1&#x60; - sha1* &#x60;sha1&#x60; - sha1* &#x60;sha224&#x60; - sha224* &#x60;sha256&#x60; - sha256* &#x60;sha384&#x60; - sha384* &#x60;sha512&#x60; - sha512
func (r ContentPackagesAPIContentRpmPackagesListRequest) ChecksumType(checksumType string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.checksumType = &checksumType
	return r
}

// Filter results where checksum_type is in a comma-separated list of values
func (r ContentPackagesAPIContentRpmPackagesListRequest) ChecksumTypeIn(checksumTypeIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.checksumTypeIn = &checksumTypeIn
	return r
}

// Filter results where checksum_type not equal to value
func (r ContentPackagesAPIContentRpmPackagesListRequest) ChecksumTypeNe(checksumTypeNe string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.checksumTypeNe = &checksumTypeNe
	return r
}

// Filter results where epoch matches value
func (r ContentPackagesAPIContentRpmPackagesListRequest) Epoch(epoch string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.epoch = &epoch
	return r
}

// Filter results where epoch is in a comma-separated list of values
func (r ContentPackagesAPIContentRpmPackagesListRequest) EpochIn(epochIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.epochIn = &epochIn
	return r
}

// Filter results where epoch not equal to value
func (r ContentPackagesAPIContentRpmPackagesListRequest) EpochNe(epochNe string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.epochNe = &epochNe
	return r
}

func (r ContentPackagesAPIContentRpmPackagesListRequest) Filename(filename string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.filename = &filename
	return r
}

// Number of results to return per page.
func (r ContentPackagesAPIContentRpmPackagesListRequest) Limit(limit int32) ContentPackagesAPIContentRpmPackagesListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r ContentPackagesAPIContentRpmPackagesListRequest) Name(name string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r ContentPackagesAPIContentRpmPackagesListRequest) NameContains(nameContains string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r ContentPackagesAPIContentRpmPackagesListRequest) NameIn(nameIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name not equal to value
func (r ContentPackagesAPIContentRpmPackagesListRequest) NameNe(nameNe string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.nameNe = &nameNe
	return r
}

// Filter results where name starts with value
func (r ContentPackagesAPIContentRpmPackagesListRequest) NameStartswith(nameStartswith string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r ContentPackagesAPIContentRpmPackagesListRequest) Offset(offset int32) ContentPackagesAPIContentRpmPackagesListRequest {
	r.offset = &offset
	return r
}

// Ordering* &#x60;pulp_id&#x60; - Pulp id* &#x60;-pulp_id&#x60; - Pulp id (descending)* &#x60;pulp_created&#x60; - Pulp created* &#x60;-pulp_created&#x60; - Pulp created (descending)* &#x60;pulp_last_updated&#x60; - Pulp last updated* &#x60;-pulp_last_updated&#x60; - Pulp last updated (descending)* &#x60;pulp_type&#x60; - Pulp type* &#x60;-pulp_type&#x60; - Pulp type (descending)* &#x60;upstream_id&#x60; - Upstream id* &#x60;-upstream_id&#x60; - Upstream id (descending)* &#x60;pulp_labels&#x60; - Pulp labels* &#x60;-pulp_labels&#x60; - Pulp labels (descending)* &#x60;timestamp_of_interest&#x60; - Timestamp of interest* &#x60;-timestamp_of_interest&#x60; - Timestamp of interest (descending)* &#x60;name&#x60; - Name* &#x60;-name&#x60; - Name (descending)* &#x60;epoch&#x60; - Epoch* &#x60;-epoch&#x60; - Epoch (descending)* &#x60;version&#x60; - Version* &#x60;-version&#x60; - Version (descending)* &#x60;release&#x60; - Release* &#x60;-release&#x60; - Release (descending)* &#x60;arch&#x60; - Arch* &#x60;-arch&#x60; - Arch (descending)* &#x60;evr&#x60; - Evr* &#x60;-evr&#x60; - Evr (descending)* &#x60;pkgId&#x60; - Pkgid* &#x60;-pkgId&#x60; - Pkgid (descending)* &#x60;checksum_type&#x60; - Checksum type* &#x60;-checksum_type&#x60; - Checksum type (descending)* &#x60;summary&#x60; - Summary* &#x60;-summary&#x60; - Summary (descending)* &#x60;description&#x60; - Description* &#x60;-description&#x60; - Description (descending)* &#x60;url&#x60; - Url* &#x60;-url&#x60; - Url (descending)* &#x60;changelogs&#x60; - Changelogs* &#x60;-changelogs&#x60; - Changelogs (descending)* &#x60;files&#x60; - Files* &#x60;-files&#x60; - Files (descending)* &#x60;requires&#x60; - Requires* &#x60;-requires&#x60; - Requires (descending)* &#x60;provides&#x60; - Provides* &#x60;-provides&#x60; - Provides (descending)* &#x60;conflicts&#x60; - Conflicts* &#x60;-conflicts&#x60; - Conflicts (descending)* &#x60;obsoletes&#x60; - Obsoletes* &#x60;-obsoletes&#x60; - Obsoletes (descending)* &#x60;suggests&#x60; - Suggests* &#x60;-suggests&#x60; - Suggests (descending)* &#x60;enhances&#x60; - Enhances* &#x60;-enhances&#x60; - Enhances (descending)* &#x60;recommends&#x60; - Recommends* &#x60;-recommends&#x60; - Recommends (descending)* &#x60;supplements&#x60; - Supplements* &#x60;-supplements&#x60; - Supplements (descending)* &#x60;location_base&#x60; - Location base* &#x60;-location_base&#x60; - Location base (descending)* &#x60;location_href&#x60; - Location href* &#x60;-location_href&#x60; - Location href (descending)* &#x60;rpm_buildhost&#x60; - Rpm buildhost* &#x60;-rpm_buildhost&#x60; - Rpm buildhost (descending)* &#x60;rpm_group&#x60; - Rpm group* &#x60;-rpm_group&#x60; - Rpm group (descending)* &#x60;rpm_license&#x60; - Rpm license* &#x60;-rpm_license&#x60; - Rpm license (descending)* &#x60;rpm_packager&#x60; - Rpm packager* &#x60;-rpm_packager&#x60; - Rpm packager (descending)* &#x60;rpm_sourcerpm&#x60; - Rpm sourcerpm* &#x60;-rpm_sourcerpm&#x60; - Rpm sourcerpm (descending)* &#x60;rpm_vendor&#x60; - Rpm vendor* &#x60;-rpm_vendor&#x60; - Rpm vendor (descending)* &#x60;rpm_header_start&#x60; - Rpm header start* &#x60;-rpm_header_start&#x60; - Rpm header start (descending)* &#x60;rpm_header_end&#x60; - Rpm header end* &#x60;-rpm_header_end&#x60; - Rpm header end (descending)* &#x60;size_archive&#x60; - Size archive* &#x60;-size_archive&#x60; - Size archive (descending)* &#x60;size_installed&#x60; - Size installed* &#x60;-size_installed&#x60; - Size installed (descending)* &#x60;size_package&#x60; - Size package* &#x60;-size_package&#x60; - Size package (descending)* &#x60;time_build&#x60; - Time build* &#x60;-time_build&#x60; - Time build (descending)* &#x60;time_file&#x60; - Time file* &#x60;-time_file&#x60; - Time file (descending)* &#x60;is_modular&#x60; - Is modular* &#x60;-is_modular&#x60; - Is modular (descending)* &#x60;pk&#x60; - Pk* &#x60;-pk&#x60; - Pk (descending)
func (r ContentPackagesAPIContentRpmPackagesListRequest) Ordering(ordering []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.ordering = &ordering
	return r
}

// Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
func (r ContentPackagesAPIContentRpmPackagesListRequest) OrphanedFor(orphanedFor float32) ContentPackagesAPIContentRpmPackagesListRequest {
	r.orphanedFor = &orphanedFor
	return r
}

// Filter results where pkgId matches value
func (r ContentPackagesAPIContentRpmPackagesListRequest) PkgId(pkgId string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.pkgId = &pkgId
	return r
}

// Filter results where pkgId is in a comma-separated list of values
func (r ContentPackagesAPIContentRpmPackagesListRequest) PkgIdIn(pkgIdIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.pkgIdIn = &pkgIdIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentRpmPackagesListRequest) PrnIn(prnIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.prnIn = &prnIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentRpmPackagesListRequest) PulpHrefIn(pulpHrefIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.pulpHrefIn = &pulpHrefIn
	return r
}

// Multiple values may be separated by commas.
func (r ContentPackagesAPIContentRpmPackagesListRequest) PulpIdIn(pulpIdIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.pulpIdIn = &pulpIdIn
	return r
}

// Filter labels by search string
func (r ContentPackagesAPIContentRpmPackagesListRequest) PulpLabelSelect(pulpLabelSelect string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results by using NOT, AND and OR operations on other filters
func (r ContentPackagesAPIContentRpmPackagesListRequest) Q(q string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.q = &q
	return r
}

// Filter results where release matches value
func (r ContentPackagesAPIContentRpmPackagesListRequest) Release(release string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.release = &release
	return r
}

// Filter results where release contains value
func (r ContentPackagesAPIContentRpmPackagesListRequest) ReleaseContains(releaseContains string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.releaseContains = &releaseContains
	return r
}

// Filter results where release is in a comma-separated list of values
func (r ContentPackagesAPIContentRpmPackagesListRequest) ReleaseIn(releaseIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.releaseIn = &releaseIn
	return r
}

// Filter results where release not equal to value
func (r ContentPackagesAPIContentRpmPackagesListRequest) ReleaseNe(releaseNe string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.releaseNe = &releaseNe
	return r
}

// Filter results where release starts with value
func (r ContentPackagesAPIContentRpmPackagesListRequest) ReleaseStartswith(releaseStartswith string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.releaseStartswith = &releaseStartswith
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentRpmPackagesListRequest) RepositoryVersion(repositoryVersion string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.repositoryVersion = &repositoryVersion
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentRpmPackagesListRequest) RepositoryVersionAdded(repositoryVersionAdded string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.repositoryVersionAdded = &repositoryVersionAdded
	return r
}

// Repository Version referenced by HREF/PRN
func (r ContentPackagesAPIContentRpmPackagesListRequest) RepositoryVersionRemoved(repositoryVersionRemoved string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.repositoryVersionRemoved = &repositoryVersionRemoved
	return r
}

func (r ContentPackagesAPIContentRpmPackagesListRequest) Sha256(sha256 string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.sha256 = &sha256
	return r
}

// Filter results where version matches value
func (r ContentPackagesAPIContentRpmPackagesListRequest) Version(version string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.version = &version
	return r
}

// Filter results where version is in a comma-separated list of values
func (r ContentPackagesAPIContentRpmPackagesListRequest) VersionIn(versionIn []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.versionIn = &versionIn
	return r
}

// Filter results where version not equal to value
func (r ContentPackagesAPIContentRpmPackagesListRequest) VersionNe(versionNe string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.versionNe = &versionNe
	return r
}

// A list of fields to include in the response.
func (r ContentPackagesAPIContentRpmPackagesListRequest) Fields(fields []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r ContentPackagesAPIContentRpmPackagesListRequest) ExcludeFields(excludeFields []string) ContentPackagesAPIContentRpmPackagesListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ContentPackagesAPIContentRpmPackagesListRequest) Execute() (*PaginatedrpmPackageResponseList, *http.Response, error) {
	return r.ApiService.ContentRpmPackagesListExecute(r)
}

/*
ContentRpmPackagesList List packages

A ViewSet for Package.Define endpoint name which will appear in the API endpoint for this content type.For example::    http://pulp.example.com/pulp/api/v3/content/rpm/packages/Also specify queryset and serializer for Package.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pulpDomain
 @return ContentPackagesAPIContentRpmPackagesListRequest
*/
func (a *ContentPackagesAPIService) ContentRpmPackagesList(ctx context.Context, pulpDomain string) ContentPackagesAPIContentRpmPackagesListRequest {
	return ContentPackagesAPIContentRpmPackagesListRequest{
		ApiService: a,
		ctx: ctx,
		pulpDomain: pulpDomain,
	}
}

// Execute executes the request
//  @return PaginatedrpmPackageResponseList
func (a *ContentPackagesAPIService) ContentRpmPackagesListExecute(r ContentPackagesAPIContentRpmPackagesListRequest) (*PaginatedrpmPackageResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedrpmPackageResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPackagesAPIService.ContentRpmPackagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pulp/{pulp_domain}/api/v3/content/rpm/packages/"
	localVarPath = strings.Replace(localVarPath, "{"+"pulp_domain"+"}", url.PathEscape(parameterValueToString(r.pulpDomain, "pulpDomain")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.arch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arch", r.arch, "form", "")
	}
	if r.archContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arch__contains", r.archContains, "form", "")
	}
	if r.archIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arch__in", r.archIn, "form", "csv")
	}
	if r.archNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arch__ne", r.archNe, "form", "")
	}
	if r.archStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arch__startswith", r.archStartswith, "form", "")
	}
	if r.checksumType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checksum_type", r.checksumType, "form", "")
	}
	if r.checksumTypeIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checksum_type__in", r.checksumTypeIn, "form", "csv")
	}
	if r.checksumTypeNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checksum_type__ne", r.checksumTypeNe, "form", "")
	}
	if r.epoch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "epoch", r.epoch, "form", "")
	}
	if r.epochIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "epoch__in", r.epochIn, "form", "csv")
	}
	if r.epochNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "epoch__ne", r.epochNe, "form", "")
	}
	if r.filename != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filename", r.filename, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "csv")
	}
	if r.nameNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__ne", r.nameNe, "form", "")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "csv")
	}
	if r.orphanedFor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphaned_for", r.orphanedFor, "form", "")
	}
	if r.pkgId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pkgId", r.pkgId, "form", "")
	}
	if r.pkgIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pkgId__in", r.pkgIdIn, "form", "csv")
	}
	if r.prnIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prn__in", r.prnIn, "form", "csv")
	}
	if r.pulpHrefIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_href__in", r.pulpHrefIn, "form", "csv")
	}
	if r.pulpIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_id__in", r.pulpIdIn, "form", "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.release != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "release", r.release, "form", "")
	}
	if r.releaseContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "release__contains", r.releaseContains, "form", "")
	}
	if r.releaseIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "release__in", r.releaseIn, "form", "csv")
	}
	if r.releaseNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "release__ne", r.releaseNe, "form", "")
	}
	if r.releaseStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "release__startswith", r.releaseStartswith, "form", "")
	}
	if r.repositoryVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version", r.repositoryVersion, "form", "")
	}
	if r.repositoryVersionAdded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_added", r.repositoryVersionAdded, "form", "")
	}
	if r.repositoryVersionRemoved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_version_removed", r.repositoryVersionRemoved, "form", "")
	}
	if r.sha256 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha256", r.sha256, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.versionIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version__in", r.versionIn, "form", "csv")
	}
	if r.versionNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version__ne", r.versionNe, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
                               parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
