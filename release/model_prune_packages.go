/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"fmt"
)

// checks if the PrunePackages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrunePackages{}

// PrunePackages Serializer for prune-old-Packages operation.
type PrunePackages struct {
	// Will prune old packages from the specified list of repos. Use ['*'] to specify all repos. Will prune based on the specified repositories' latest_versions.
	RepoHrefs []string `json:"repo_hrefs"`
	// Prune packages introduced *prior-to* this many days ago. Default is 14. A value of 0 implies 'keep latest package only.'
	KeepDays *int64 `json:"keep_days,omitempty"`
	// Determine what would-be-pruned and log the list of packages. Intended as a debugging aid.
	DryRun *bool `json:"dry_run,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrunePackages PrunePackages

// NewPrunePackages instantiates a new PrunePackages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrunePackages(repoHrefs []string) *PrunePackages {
	this := PrunePackages{}
	this.RepoHrefs = repoHrefs
	var keepDays int64 = 14
	this.KeepDays = &keepDays
	var dryRun bool = false
	this.DryRun = &dryRun
	return &this
}

// NewPrunePackagesWithDefaults instantiates a new PrunePackages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrunePackagesWithDefaults() *PrunePackages {
	this := PrunePackages{}
	var keepDays int64 = 14
	this.KeepDays = &keepDays
	var dryRun bool = false
	this.DryRun = &dryRun
	return &this
}

// GetRepoHrefs returns the RepoHrefs field value
func (o *PrunePackages) GetRepoHrefs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RepoHrefs
}

// GetRepoHrefsOk returns a tuple with the RepoHrefs field value
// and a boolean to check if the value has been set.
func (o *PrunePackages) GetRepoHrefsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepoHrefs, true
}

// SetRepoHrefs sets field value
func (o *PrunePackages) SetRepoHrefs(v []string) {
	o.RepoHrefs = v
}

// GetKeepDays returns the KeepDays field value if set, zero value otherwise.
func (o *PrunePackages) GetKeepDays() int64 {
	if o == nil || IsNil(o.KeepDays) {
		var ret int64
		return ret
	}
	return *o.KeepDays
}

// GetKeepDaysOk returns a tuple with the KeepDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrunePackages) GetKeepDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.KeepDays) {
		return nil, false
	}
	return o.KeepDays, true
}

// HasKeepDays returns a boolean if a field has been set.
func (o *PrunePackages) HasKeepDays() bool {
	if o != nil && !IsNil(o.KeepDays) {
		return true
	}

	return false
}

// SetKeepDays gets a reference to the given int64 and assigns it to the KeepDays field.
func (o *PrunePackages) SetKeepDays(v int64) {
	o.KeepDays = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *PrunePackages) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrunePackages) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *PrunePackages) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *PrunePackages) SetDryRun(v bool) {
	o.DryRun = &v
}

func (o PrunePackages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrunePackages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repo_hrefs"] = o.RepoHrefs
	if !IsNil(o.KeepDays) {
		toSerialize["keep_days"] = o.KeepDays
	}
	if !IsNil(o.DryRun) {
		toSerialize["dry_run"] = o.DryRun
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrunePackages) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repo_hrefs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrunePackages := _PrunePackages{}

	err = json.Unmarshal(data, &varPrunePackages)

	if err != nil {
		return err
	}

	*o = PrunePackages(varPrunePackages)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "repo_hrefs")
		delete(additionalProperties, "keep_days")
		delete(additionalProperties, "dry_run")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrunePackages struct {
	value *PrunePackages
	isSet bool
}

func (v NullablePrunePackages) Get() *PrunePackages {
	return v.value
}

func (v *NullablePrunePackages) Set(val *PrunePackages) {
	v.value = val
	v.isSet = true
}

func (v NullablePrunePackages) IsSet() bool {
	return v.isSet
}

func (v *NullablePrunePackages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrunePackages(val *PrunePackages) *NullablePrunePackages {
	return &NullablePrunePackages{value: val, isSet: true}
}

func (v NullablePrunePackages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrunePackages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


