/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest/release/v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DistributionsAnsibleApiService DistributionsAnsibleApi service
type DistributionsAnsibleApiService service

type DistributionsAnsibleApiDistributionsAnsibleAnsibleCreateRequest struct {
	ctx context.Context
	ApiService *DistributionsAnsibleApiService
	ansibleAnsibleDistribution *AnsibleAnsibleDistribution
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleCreateRequest) AnsibleAnsibleDistribution(ansibleAnsibleDistribution AnsibleAnsibleDistribution) DistributionsAnsibleApiDistributionsAnsibleAnsibleCreateRequest {
	r.ansibleAnsibleDistribution = &ansibleAnsibleDistribution
	return r
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleCreateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsAnsibleAnsibleCreateExecute(r)
}

/*
DistributionsAnsibleAnsibleCreate Create an ansible distribution

Trigger an asynchronous create task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DistributionsAnsibleApiDistributionsAnsibleAnsibleCreateRequest
*/
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleCreate(ctx context.Context) DistributionsAnsibleApiDistributionsAnsibleAnsibleCreateRequest {
	return DistributionsAnsibleApiDistributionsAnsibleAnsibleCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleCreateExecute(r DistributionsAnsibleApiDistributionsAnsibleAnsibleCreateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsAnsibleApiService.DistributionsAnsibleAnsibleCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/distributions/ansible/ansible/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleAnsibleDistribution == nil {
		return localVarReturnValue, nil, reportError("ansibleAnsibleDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleAnsibleDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsAnsibleApiDistributionsAnsibleAnsibleDeleteRequest struct {
	ctx context.Context
	ApiService *DistributionsAnsibleApiService
	ansibleAnsibleDistributionHref string
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleDeleteRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsAnsibleAnsibleDeleteExecute(r)
}

/*
DistributionsAnsibleAnsibleDelete Delete an ansible distribution

Trigger an asynchronous delete task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleDistributionHref
 @return DistributionsAnsibleApiDistributionsAnsibleAnsibleDeleteRequest
*/
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleDelete(ctx context.Context, ansibleAnsibleDistributionHref string) DistributionsAnsibleApiDistributionsAnsibleAnsibleDeleteRequest {
	return DistributionsAnsibleApiDistributionsAnsibleAnsibleDeleteRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleDistributionHref: ansibleAnsibleDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleDeleteExecute(r DistributionsAnsibleApiDistributionsAnsibleAnsibleDeleteRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsAnsibleApiService.DistributionsAnsibleAnsibleDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_distribution_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleDistributionHref, "ansibleAnsibleDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest struct {
	ctx context.Context
	ApiService *DistributionsAnsibleApiService
	basePath *string
	basePathContains *string
	basePathIcontains *string
	basePathIn *[]string
	limit *int32
	name *string
	nameContains *string
	nameIcontains *string
	nameIn *[]string
	nameStartswith *string
	offset *int32
	ordering *[]string
	pulpLabelSelect *string
	repository *string
	repositoryIn *[]string
	withContent *string
	fields *[]string
	excludeFields *[]string
}

// Filter results where base_path matches value
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) BasePath(basePath string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.basePath = &basePath
	return r
}

// Filter results where base_path contains value
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) BasePathContains(basePathContains string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.basePathContains = &basePathContains
	return r
}

// Filter results where base_path contains value
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) BasePathIcontains(basePathIcontains string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.basePathIcontains = &basePathIcontains
	return r
}

// Filter results where base_path is in a comma-separated list of values
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) BasePathIn(basePathIn []string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.basePathIn = &basePathIn
	return r
}

// Number of results to return per page.
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) Limit(limit int32) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.limit = &limit
	return r
}

// Filter results where name matches value
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) Name(name string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.name = &name
	return r
}

// Filter results where name contains value
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) NameContains(nameContains string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.nameContains = &nameContains
	return r
}

// Filter results where name contains value
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) NameIcontains(nameIcontains string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.nameIcontains = &nameIcontains
	return r
}

// Filter results where name is in a comma-separated list of values
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) NameIn(nameIn []string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.nameIn = &nameIn
	return r
}

// Filter results where name starts with value
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) NameStartswith(nameStartswith string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.nameStartswith = &nameStartswith
	return r
}

// The initial index from which to return the results.
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) Offset(offset int32) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.offset = &offset
	return r
}

// Ordering
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) Ordering(ordering []string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.ordering = &ordering
	return r
}

// Filter labels by search string
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) PulpLabelSelect(pulpLabelSelect string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.pulpLabelSelect = &pulpLabelSelect
	return r
}

// Filter results where repository matches value
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) Repository(repository string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.repository = &repository
	return r
}

// Filter results where repository is in a comma-separated list of values
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) RepositoryIn(repositoryIn []string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.repositoryIn = &repositoryIn
	return r
}

// Filter distributions based on the content served by them
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) WithContent(withContent string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.withContent = &withContent
	return r
}

// A list of fields to include in the response.
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) Fields(fields []string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) ExcludeFields(excludeFields []string) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) Execute() (*PaginatedansibleAnsibleDistributionResponseList, *http.Response, error) {
	return r.ApiService.DistributionsAnsibleAnsibleListExecute(r)
}

/*
DistributionsAnsibleAnsibleList List ansible distributions

ViewSet for Ansible Distributions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest
*/
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleList(ctx context.Context) DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest {
	return DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedansibleAnsibleDistributionResponseList
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleListExecute(r DistributionsAnsibleApiDistributionsAnsibleAnsibleListRequest) (*PaginatedansibleAnsibleDistributionResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedansibleAnsibleDistributionResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsAnsibleApiService.DistributionsAnsibleAnsibleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pulp/api/v3/distributions/ansible/ansible/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.basePath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_path", r.basePath, "")
	}
	if r.basePathContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_path__contains", r.basePathContains, "")
	}
	if r.basePathIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_path__icontains", r.basePathIcontains, "")
	}
	if r.basePathIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_path__in", r.basePathIn, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.nameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__contains", r.nameContains, "")
	}
	if r.nameIcontains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__icontains", r.nameIcontains, "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "csv")
	}
	if r.nameStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__startswith", r.nameStartswith, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "csv")
	}
	if r.pulpLabelSelect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pulp_label_select", r.pulpLabelSelect, "")
	}
	if r.repository != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository", r.repository, "")
	}
	if r.repositoryIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository__in", r.repositoryIn, "csv")
	}
	if r.withContent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_content", r.withContent, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsAnsibleApiDistributionsAnsibleAnsiblePartialUpdateRequest struct {
	ctx context.Context
	ApiService *DistributionsAnsibleApiService
	ansibleAnsibleDistributionHref string
	patchedansibleAnsibleDistribution *PatchedansibleAnsibleDistribution
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsiblePartialUpdateRequest) PatchedansibleAnsibleDistribution(patchedansibleAnsibleDistribution PatchedansibleAnsibleDistribution) DistributionsAnsibleApiDistributionsAnsibleAnsiblePartialUpdateRequest {
	r.patchedansibleAnsibleDistribution = &patchedansibleAnsibleDistribution
	return r
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsiblePartialUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsAnsibleAnsiblePartialUpdateExecute(r)
}

/*
DistributionsAnsibleAnsiblePartialUpdate Update an ansible distribution

Trigger an asynchronous partial update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleDistributionHref
 @return DistributionsAnsibleApiDistributionsAnsibleAnsiblePartialUpdateRequest
*/
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsiblePartialUpdate(ctx context.Context, ansibleAnsibleDistributionHref string) DistributionsAnsibleApiDistributionsAnsibleAnsiblePartialUpdateRequest {
	return DistributionsAnsibleApiDistributionsAnsibleAnsiblePartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleDistributionHref: ansibleAnsibleDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsiblePartialUpdateExecute(r DistributionsAnsibleApiDistributionsAnsibleAnsiblePartialUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsAnsibleApiService.DistributionsAnsibleAnsiblePartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_distribution_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleDistributionHref, "ansibleAnsibleDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedansibleAnsibleDistribution == nil {
		return localVarReturnValue, nil, reportError("patchedansibleAnsibleDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedansibleAnsibleDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest struct {
	ctx context.Context
	ApiService *DistributionsAnsibleApiService
	ansibleAnsibleDistributionHref string
	fields *[]string
	excludeFields *[]string
}

// A list of fields to include in the response.
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest) Fields(fields []string) DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest {
	r.fields = &fields
	return r
}

// A list of fields to exclude from the response.
func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest) ExcludeFields(excludeFields []string) DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest) Execute() (*AnsibleAnsibleDistributionResponse, *http.Response, error) {
	return r.ApiService.DistributionsAnsibleAnsibleReadExecute(r)
}

/*
DistributionsAnsibleAnsibleRead Inspect an ansible distribution

ViewSet for Ansible Distributions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleDistributionHref
 @return DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest
*/
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleRead(ctx context.Context, ansibleAnsibleDistributionHref string) DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest {
	return DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleDistributionHref: ansibleAnsibleDistributionHref,
	}
}

// Execute executes the request
//  @return AnsibleAnsibleDistributionResponse
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleReadExecute(r DistributionsAnsibleApiDistributionsAnsibleAnsibleReadRequest) (*AnsibleAnsibleDistributionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnsibleAnsibleDistributionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsAnsibleApiService.DistributionsAnsibleAnsibleRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_distribution_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleDistributionHref, "ansibleAnsibleDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.excludeFields != nil {
		t := *r.excludeFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DistributionsAnsibleApiDistributionsAnsibleAnsibleUpdateRequest struct {
	ctx context.Context
	ApiService *DistributionsAnsibleApiService
	ansibleAnsibleDistributionHref string
	ansibleAnsibleDistribution *AnsibleAnsibleDistribution
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleUpdateRequest) AnsibleAnsibleDistribution(ansibleAnsibleDistribution AnsibleAnsibleDistribution) DistributionsAnsibleApiDistributionsAnsibleAnsibleUpdateRequest {
	r.ansibleAnsibleDistribution = &ansibleAnsibleDistribution
	return r
}

func (r DistributionsAnsibleApiDistributionsAnsibleAnsibleUpdateRequest) Execute() (*AsyncOperationResponse, *http.Response, error) {
	return r.ApiService.DistributionsAnsibleAnsibleUpdateExecute(r)
}

/*
DistributionsAnsibleAnsibleUpdate Update an ansible distribution

Trigger an asynchronous update task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ansibleAnsibleDistributionHref
 @return DistributionsAnsibleApiDistributionsAnsibleAnsibleUpdateRequest
*/
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleUpdate(ctx context.Context, ansibleAnsibleDistributionHref string) DistributionsAnsibleApiDistributionsAnsibleAnsibleUpdateRequest {
	return DistributionsAnsibleApiDistributionsAnsibleAnsibleUpdateRequest{
		ApiService: a,
		ctx: ctx,
		ansibleAnsibleDistributionHref: ansibleAnsibleDistributionHref,
	}
}

// Execute executes the request
//  @return AsyncOperationResponse
func (a *DistributionsAnsibleApiService) DistributionsAnsibleAnsibleUpdateExecute(r DistributionsAnsibleApiDistributionsAnsibleAnsibleUpdateRequest) (*AsyncOperationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncOperationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionsAnsibleApiService.DistributionsAnsibleAnsibleUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{ansible_ansible_distribution_href}"
	localVarPath = strings.Replace(localVarPath, "{"+"ansible_ansible_distribution_href"+"}", url.PathEscape(parameterValueToString(r.ansibleAnsibleDistributionHref, "ansibleAnsibleDistributionHref")), -1)
        localVarPath = strings.Replace(localVarPath, "/%2F", "/", -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ansibleAnsibleDistribution == nil {
		return localVarReturnValue, nil, reportError("ansibleAnsibleDistribution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleAnsibleDistribution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
