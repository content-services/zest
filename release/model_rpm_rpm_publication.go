/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
)

// checks if the RpmRpmPublication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RpmRpmPublication{}

// RpmRpmPublication A Serializer for RpmPublication.
type RpmRpmPublication struct {
	RepositoryVersion *string `json:"repository_version,omitempty"`
	// A URI of the repository to be published.
	Repository *string `json:"repository,omitempty"`
	Checkpoint *bool `json:"checkpoint,omitempty"`
	// The preferred checksum type used during repo publishes.* `unknown` - unknown* `md5` - md5* `sha1` - sha1* `sha224` - sha224* `sha256` - sha256* `sha384` - sha384* `sha512` - sha512
	ChecksumType *PackageChecksumTypeEnum `json:"checksum_type,omitempty"`
	// A JSON document describing the config.repo file Pulp should generate for this repo
	RepoConfig interface{} `json:"repo_config,omitempty"`
	// The compression type to use for metadata files.* `zstd` - zstd* `gz` - gz
	CompressionType *CompressionTypeEnum `json:"compression_type,omitempty"`
	// How to layout the packages within the published repository.* `nested_alphabetically` - nested_alphabetically* `flat` - flat
	Layout NullableLayoutEnum `json:"layout,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RpmRpmPublication RpmRpmPublication

// NewRpmRpmPublication instantiates a new RpmRpmPublication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRpmRpmPublication() *RpmRpmPublication {
	this := RpmRpmPublication{}
	return &this
}

// NewRpmRpmPublicationWithDefaults instantiates a new RpmRpmPublication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRpmRpmPublicationWithDefaults() *RpmRpmPublication {
	this := RpmRpmPublication{}
	return &this
}

// GetRepositoryVersion returns the RepositoryVersion field value if set, zero value otherwise.
func (o *RpmRpmPublication) GetRepositoryVersion() string {
	if o == nil || IsNil(o.RepositoryVersion) {
		var ret string
		return ret
	}
	return *o.RepositoryVersion
}

// GetRepositoryVersionOk returns a tuple with the RepositoryVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpmRpmPublication) GetRepositoryVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryVersion) {
		return nil, false
	}
	return o.RepositoryVersion, true
}

// HasRepositoryVersion returns a boolean if a field has been set.
func (o *RpmRpmPublication) HasRepositoryVersion() bool {
	if o != nil && !IsNil(o.RepositoryVersion) {
		return true
	}

	return false
}

// SetRepositoryVersion gets a reference to the given string and assigns it to the RepositoryVersion field.
func (o *RpmRpmPublication) SetRepositoryVersion(v string) {
	o.RepositoryVersion = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *RpmRpmPublication) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpmRpmPublication) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *RpmRpmPublication) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *RpmRpmPublication) SetRepository(v string) {
	o.Repository = &v
}

// GetCheckpoint returns the Checkpoint field value if set, zero value otherwise.
func (o *RpmRpmPublication) GetCheckpoint() bool {
	if o == nil || IsNil(o.Checkpoint) {
		var ret bool
		return ret
	}
	return *o.Checkpoint
}

// GetCheckpointOk returns a tuple with the Checkpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpmRpmPublication) GetCheckpointOk() (*bool, bool) {
	if o == nil || IsNil(o.Checkpoint) {
		return nil, false
	}
	return o.Checkpoint, true
}

// HasCheckpoint returns a boolean if a field has been set.
func (o *RpmRpmPublication) HasCheckpoint() bool {
	if o != nil && !IsNil(o.Checkpoint) {
		return true
	}

	return false
}

// SetCheckpoint gets a reference to the given bool and assigns it to the Checkpoint field.
func (o *RpmRpmPublication) SetCheckpoint(v bool) {
	o.Checkpoint = &v
}

// GetChecksumType returns the ChecksumType field value if set, zero value otherwise.
func (o *RpmRpmPublication) GetChecksumType() PackageChecksumTypeEnum {
	if o == nil || IsNil(o.ChecksumType) {
		var ret PackageChecksumTypeEnum
		return ret
	}
	return *o.ChecksumType
}

// GetChecksumTypeOk returns a tuple with the ChecksumType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpmRpmPublication) GetChecksumTypeOk() (*PackageChecksumTypeEnum, bool) {
	if o == nil || IsNil(o.ChecksumType) {
		return nil, false
	}
	return o.ChecksumType, true
}

// HasChecksumType returns a boolean if a field has been set.
func (o *RpmRpmPublication) HasChecksumType() bool {
	if o != nil && !IsNil(o.ChecksumType) {
		return true
	}

	return false
}

// SetChecksumType gets a reference to the given PackageChecksumTypeEnum and assigns it to the ChecksumType field.
func (o *RpmRpmPublication) SetChecksumType(v PackageChecksumTypeEnum) {
	o.ChecksumType = &v
}

// GetRepoConfig returns the RepoConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpmRpmPublication) GetRepoConfig() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RepoConfig
}

// GetRepoConfigOk returns a tuple with the RepoConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpmRpmPublication) GetRepoConfigOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RepoConfig) {
		return nil, false
	}
	return &o.RepoConfig, true
}

// HasRepoConfig returns a boolean if a field has been set.
func (o *RpmRpmPublication) HasRepoConfig() bool {
	if o != nil && !IsNil(o.RepoConfig) {
		return true
	}

	return false
}

// SetRepoConfig gets a reference to the given interface{} and assigns it to the RepoConfig field.
func (o *RpmRpmPublication) SetRepoConfig(v interface{}) {
	o.RepoConfig = v
}

// GetCompressionType returns the CompressionType field value if set, zero value otherwise.
func (o *RpmRpmPublication) GetCompressionType() CompressionTypeEnum {
	if o == nil || IsNil(o.CompressionType) {
		var ret CompressionTypeEnum
		return ret
	}
	return *o.CompressionType
}

// GetCompressionTypeOk returns a tuple with the CompressionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpmRpmPublication) GetCompressionTypeOk() (*CompressionTypeEnum, bool) {
	if o == nil || IsNil(o.CompressionType) {
		return nil, false
	}
	return o.CompressionType, true
}

// HasCompressionType returns a boolean if a field has been set.
func (o *RpmRpmPublication) HasCompressionType() bool {
	if o != nil && !IsNil(o.CompressionType) {
		return true
	}

	return false
}

// SetCompressionType gets a reference to the given CompressionTypeEnum and assigns it to the CompressionType field.
func (o *RpmRpmPublication) SetCompressionType(v CompressionTypeEnum) {
	o.CompressionType = &v
}

// GetLayout returns the Layout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpmRpmPublication) GetLayout() LayoutEnum {
	if o == nil || IsNil(o.Layout.Get()) {
		var ret LayoutEnum
		return ret
	}
	return *o.Layout.Get()
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpmRpmPublication) GetLayoutOk() (*LayoutEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Layout.Get(), o.Layout.IsSet()
}

// HasLayout returns a boolean if a field has been set.
func (o *RpmRpmPublication) HasLayout() bool {
	if o != nil && o.Layout.IsSet() {
		return true
	}

	return false
}

// SetLayout gets a reference to the given NullableLayoutEnum and assigns it to the Layout field.
func (o *RpmRpmPublication) SetLayout(v LayoutEnum) {
	o.Layout.Set(&v)
}
// SetLayoutNil sets the value for Layout to be an explicit nil
func (o *RpmRpmPublication) SetLayoutNil() {
	o.Layout.Set(nil)
}

// UnsetLayout ensures that no value is present for Layout, not even an explicit nil
func (o *RpmRpmPublication) UnsetLayout() {
	o.Layout.Unset()
}

func (o RpmRpmPublication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RpmRpmPublication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RepositoryVersion) {
		toSerialize["repository_version"] = o.RepositoryVersion
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.Checkpoint) {
		toSerialize["checkpoint"] = o.Checkpoint
	}
	if !IsNil(o.ChecksumType) {
		toSerialize["checksum_type"] = o.ChecksumType
	}
	if o.RepoConfig != nil {
		toSerialize["repo_config"] = o.RepoConfig
	}
	if !IsNil(o.CompressionType) {
		toSerialize["compression_type"] = o.CompressionType
	}
	if o.Layout.IsSet() {
		toSerialize["layout"] = o.Layout.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RpmRpmPublication) UnmarshalJSON(data []byte) (err error) {
	varRpmRpmPublication := _RpmRpmPublication{}

	err = json.Unmarshal(data, &varRpmRpmPublication)

	if err != nil {
		return err
	}

	*o = RpmRpmPublication(varRpmRpmPublication)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "repository_version")
		delete(additionalProperties, "repository")
		delete(additionalProperties, "checkpoint")
		delete(additionalProperties, "checksum_type")
		delete(additionalProperties, "repo_config")
		delete(additionalProperties, "compression_type")
		delete(additionalProperties, "layout")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRpmRpmPublication struct {
	value *RpmRpmPublication
	isSet bool
}

func (v NullableRpmRpmPublication) Get() *RpmRpmPublication {
	return v.value
}

func (v *NullableRpmRpmPublication) Set(val *RpmRpmPublication) {
	v.value = val
	v.isSet = true
}

func (v NullableRpmRpmPublication) IsSet() bool {
	return v.isSet
}

func (v *NullableRpmRpmPublication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRpmRpmPublication(val *RpmRpmPublication) *NullableRpmRpmPublication {
	return &NullableRpmRpmPublication{value: val, isSet: true}
}

func (v NullableRpmRpmPublication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRpmRpmPublication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


