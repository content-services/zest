/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zest

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ContainerManifestResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerManifestResponse{}

// ContainerManifestResponse Serializer for Manifests.
type ContainerManifestResponse struct {
	PulpHref *string `json:"pulp_href,omitempty"`
	// The Pulp Resource Name (PRN).
	Prn *string `json:"prn,omitempty"`
	// Timestamp of creation.
	PulpCreated *time.Time `json:"pulp_created,omitempty"`
	// Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.
	PulpLastUpdated *time.Time `json:"pulp_last_updated,omitempty"`
	// A dictionary of arbitrary key/value pairs used to describe a specific Content instance.
	PulpLabels *map[string]string `json:"pulp_labels,omitempty"`
	// sha256 of the Manifest file
	Digest string `json:"digest"`
	// Manifest schema version
	SchemaVersion int64 `json:"schema_version"`
	// Manifest media type of the file
	MediaType string `json:"media_type"`
	// Manifests that are referenced by this Manifest List
	ListedManifests []string `json:"listed_manifests"`
	// Blob that contains configuration for this Manifest
	ConfigBlob *string `json:"config_blob,omitempty"`
	// Blobs that are referenced by this Manifest
	Blobs []string `json:"blobs"`
	// Property that contains arbitrary metadata stored inside the image manifest.
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// Property describing metadata stored inside the image configuration
	Labels map[string]interface{} `json:"labels,omitempty"`
	// A boolean determining whether users can boot from an image or not.[deprecated] check type field instead
	IsBootable *bool `json:"is_bootable,omitempty"`
	// A boolean determining whether the image bundles a Flatpak application.[deprecated] check type field instead
	IsFlatpak *bool `json:"is_flatpak,omitempty"`
	// Manifest type (flatpak, bootable, signature, etc.).
	Type *string `json:"type,omitempty"`
	// The CPU architecture which the binaries in this image are built to run on.
	Architecture *string `json:"architecture,omitempty"`
	// The name of the operating system which the image is built to run on.
	Os *string `json:"os,omitempty"`
	// Specifies the sum of the sizes, in bytes, of all compressed layers
	CompressedImageSize *int64 `json:"compressed_image_size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContainerManifestResponse ContainerManifestResponse

// NewContainerManifestResponse instantiates a new ContainerManifestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerManifestResponse(digest string, schemaVersion int64, mediaType string, listedManifests []string, blobs []string) *ContainerManifestResponse {
	this := ContainerManifestResponse{}
	this.Digest = digest
	this.SchemaVersion = schemaVersion
	this.MediaType = mediaType
	this.ListedManifests = listedManifests
	this.Blobs = blobs
	var isBootable bool = false
	this.IsBootable = &isBootable
	var isFlatpak bool = false
	this.IsFlatpak = &isFlatpak
	return &this
}

// NewContainerManifestResponseWithDefaults instantiates a new ContainerManifestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerManifestResponseWithDefaults() *ContainerManifestResponse {
	this := ContainerManifestResponse{}
	var isBootable bool = false
	this.IsBootable = &isBootable
	var isFlatpak bool = false
	this.IsFlatpak = &isFlatpak
	return &this
}

// GetPulpHref returns the PulpHref field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetPulpHref() string {
	if o == nil || IsNil(o.PulpHref) {
		var ret string
		return ret
	}
	return *o.PulpHref
}

// GetPulpHrefOk returns a tuple with the PulpHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetPulpHrefOk() (*string, bool) {
	if o == nil || IsNil(o.PulpHref) {
		return nil, false
	}
	return o.PulpHref, true
}

// HasPulpHref returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasPulpHref() bool {
	if o != nil && !IsNil(o.PulpHref) {
		return true
	}

	return false
}

// SetPulpHref gets a reference to the given string and assigns it to the PulpHref field.
func (o *ContainerManifestResponse) SetPulpHref(v string) {
	o.PulpHref = &v
}

// GetPrn returns the Prn field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetPrn() string {
	if o == nil || IsNil(o.Prn) {
		var ret string
		return ret
	}
	return *o.Prn
}

// GetPrnOk returns a tuple with the Prn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetPrnOk() (*string, bool) {
	if o == nil || IsNil(o.Prn) {
		return nil, false
	}
	return o.Prn, true
}

// HasPrn returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasPrn() bool {
	if o != nil && !IsNil(o.Prn) {
		return true
	}

	return false
}

// SetPrn gets a reference to the given string and assigns it to the Prn field.
func (o *ContainerManifestResponse) SetPrn(v string) {
	o.Prn = &v
}

// GetPulpCreated returns the PulpCreated field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetPulpCreated() time.Time {
	if o == nil || IsNil(o.PulpCreated) {
		var ret time.Time
		return ret
	}
	return *o.PulpCreated
}

// GetPulpCreatedOk returns a tuple with the PulpCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetPulpCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PulpCreated) {
		return nil, false
	}
	return o.PulpCreated, true
}

// HasPulpCreated returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasPulpCreated() bool {
	if o != nil && !IsNil(o.PulpCreated) {
		return true
	}

	return false
}

// SetPulpCreated gets a reference to the given time.Time and assigns it to the PulpCreated field.
func (o *ContainerManifestResponse) SetPulpCreated(v time.Time) {
	o.PulpCreated = &v
}

// GetPulpLastUpdated returns the PulpLastUpdated field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetPulpLastUpdated() time.Time {
	if o == nil || IsNil(o.PulpLastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.PulpLastUpdated
}

// GetPulpLastUpdatedOk returns a tuple with the PulpLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetPulpLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PulpLastUpdated) {
		return nil, false
	}
	return o.PulpLastUpdated, true
}

// HasPulpLastUpdated returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasPulpLastUpdated() bool {
	if o != nil && !IsNil(o.PulpLastUpdated) {
		return true
	}

	return false
}

// SetPulpLastUpdated gets a reference to the given time.Time and assigns it to the PulpLastUpdated field.
func (o *ContainerManifestResponse) SetPulpLastUpdated(v time.Time) {
	o.PulpLastUpdated = &v
}

// GetPulpLabels returns the PulpLabels field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetPulpLabels() map[string]string {
	if o == nil || IsNil(o.PulpLabels) {
		var ret map[string]string
		return ret
	}
	return *o.PulpLabels
}

// GetPulpLabelsOk returns a tuple with the PulpLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetPulpLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.PulpLabels) {
		return nil, false
	}
	return o.PulpLabels, true
}

// HasPulpLabels returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasPulpLabels() bool {
	if o != nil && !IsNil(o.PulpLabels) {
		return true
	}

	return false
}

// SetPulpLabels gets a reference to the given map[string]string and assigns it to the PulpLabels field.
func (o *ContainerManifestResponse) SetPulpLabels(v map[string]string) {
	o.PulpLabels = &v
}

// GetDigest returns the Digest field value
func (o *ContainerManifestResponse) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *ContainerManifestResponse) SetDigest(v string) {
	o.Digest = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *ContainerManifestResponse) GetSchemaVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetSchemaVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *ContainerManifestResponse) SetSchemaVersion(v int64) {
	o.SchemaVersion = v
}

// GetMediaType returns the MediaType field value
func (o *ContainerManifestResponse) GetMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *ContainerManifestResponse) SetMediaType(v string) {
	o.MediaType = v
}

// GetListedManifests returns the ListedManifests field value
func (o *ContainerManifestResponse) GetListedManifests() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ListedManifests
}

// GetListedManifestsOk returns a tuple with the ListedManifests field value
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetListedManifestsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ListedManifests, true
}

// SetListedManifests sets field value
func (o *ContainerManifestResponse) SetListedManifests(v []string) {
	o.ListedManifests = v
}

// GetConfigBlob returns the ConfigBlob field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetConfigBlob() string {
	if o == nil || IsNil(o.ConfigBlob) {
		var ret string
		return ret
	}
	return *o.ConfigBlob
}

// GetConfigBlobOk returns a tuple with the ConfigBlob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetConfigBlobOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigBlob) {
		return nil, false
	}
	return o.ConfigBlob, true
}

// HasConfigBlob returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasConfigBlob() bool {
	if o != nil && !IsNil(o.ConfigBlob) {
		return true
	}

	return false
}

// SetConfigBlob gets a reference to the given string and assigns it to the ConfigBlob field.
func (o *ContainerManifestResponse) SetConfigBlob(v string) {
	o.ConfigBlob = &v
}

// GetBlobs returns the Blobs field value
func (o *ContainerManifestResponse) GetBlobs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Blobs
}

// GetBlobsOk returns a tuple with the Blobs field value
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetBlobsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blobs, true
}

// SetBlobs sets field value
func (o *ContainerManifestResponse) SetBlobs(v []string) {
	o.Blobs = v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetAnnotations() map[string]interface{} {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]interface{}
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetAnnotationsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Annotations) {
		return map[string]interface{}{}, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]interface{} and assigns it to the Annotations field.
func (o *ContainerManifestResponse) SetAnnotations(v map[string]interface{}) {
	o.Annotations = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetLabels() map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *ContainerManifestResponse) SetLabels(v map[string]interface{}) {
	o.Labels = v
}

// GetIsBootable returns the IsBootable field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetIsBootable() bool {
	if o == nil || IsNil(o.IsBootable) {
		var ret bool
		return ret
	}
	return *o.IsBootable
}

// GetIsBootableOk returns a tuple with the IsBootable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetIsBootableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBootable) {
		return nil, false
	}
	return o.IsBootable, true
}

// HasIsBootable returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasIsBootable() bool {
	if o != nil && !IsNil(o.IsBootable) {
		return true
	}

	return false
}

// SetIsBootable gets a reference to the given bool and assigns it to the IsBootable field.
func (o *ContainerManifestResponse) SetIsBootable(v bool) {
	o.IsBootable = &v
}

// GetIsFlatpak returns the IsFlatpak field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetIsFlatpak() bool {
	if o == nil || IsNil(o.IsFlatpak) {
		var ret bool
		return ret
	}
	return *o.IsFlatpak
}

// GetIsFlatpakOk returns a tuple with the IsFlatpak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetIsFlatpakOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFlatpak) {
		return nil, false
	}
	return o.IsFlatpak, true
}

// HasIsFlatpak returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasIsFlatpak() bool {
	if o != nil && !IsNil(o.IsFlatpak) {
		return true
	}

	return false
}

// SetIsFlatpak gets a reference to the given bool and assigns it to the IsFlatpak field.
func (o *ContainerManifestResponse) SetIsFlatpak(v bool) {
	o.IsFlatpak = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ContainerManifestResponse) SetType(v string) {
	o.Type = &v
}

// GetArchitecture returns the Architecture field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetArchitecture() string {
	if o == nil || IsNil(o.Architecture) {
		var ret string
		return ret
	}
	return *o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetArchitectureOk() (*string, bool) {
	if o == nil || IsNil(o.Architecture) {
		return nil, false
	}
	return o.Architecture, true
}

// HasArchitecture returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasArchitecture() bool {
	if o != nil && !IsNil(o.Architecture) {
		return true
	}

	return false
}

// SetArchitecture gets a reference to the given string and assigns it to the Architecture field.
func (o *ContainerManifestResponse) SetArchitecture(v string) {
	o.Architecture = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetOs() string {
	if o == nil || IsNil(o.Os) {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetOsOk() (*string, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *ContainerManifestResponse) SetOs(v string) {
	o.Os = &v
}

// GetCompressedImageSize returns the CompressedImageSize field value if set, zero value otherwise.
func (o *ContainerManifestResponse) GetCompressedImageSize() int64 {
	if o == nil || IsNil(o.CompressedImageSize) {
		var ret int64
		return ret
	}
	return *o.CompressedImageSize
}

// GetCompressedImageSizeOk returns a tuple with the CompressedImageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerManifestResponse) GetCompressedImageSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.CompressedImageSize) {
		return nil, false
	}
	return o.CompressedImageSize, true
}

// HasCompressedImageSize returns a boolean if a field has been set.
func (o *ContainerManifestResponse) HasCompressedImageSize() bool {
	if o != nil && !IsNil(o.CompressedImageSize) {
		return true
	}

	return false
}

// SetCompressedImageSize gets a reference to the given int64 and assigns it to the CompressedImageSize field.
func (o *ContainerManifestResponse) SetCompressedImageSize(v int64) {
	o.CompressedImageSize = &v
}

func (o ContainerManifestResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerManifestResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PulpHref) {
		toSerialize["pulp_href"] = o.PulpHref
	}
	if !IsNil(o.Prn) {
		toSerialize["prn"] = o.Prn
	}
	if !IsNil(o.PulpCreated) {
		toSerialize["pulp_created"] = o.PulpCreated
	}
	if !IsNil(o.PulpLastUpdated) {
		toSerialize["pulp_last_updated"] = o.PulpLastUpdated
	}
	if !IsNil(o.PulpLabels) {
		toSerialize["pulp_labels"] = o.PulpLabels
	}
	toSerialize["digest"] = o.Digest
	toSerialize["schema_version"] = o.SchemaVersion
	toSerialize["media_type"] = o.MediaType
	toSerialize["listed_manifests"] = o.ListedManifests
	if !IsNil(o.ConfigBlob) {
		toSerialize["config_blob"] = o.ConfigBlob
	}
	toSerialize["blobs"] = o.Blobs
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.IsBootable) {
		toSerialize["is_bootable"] = o.IsBootable
	}
	if !IsNil(o.IsFlatpak) {
		toSerialize["is_flatpak"] = o.IsFlatpak
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Architecture) {
		toSerialize["architecture"] = o.Architecture
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.CompressedImageSize) {
		toSerialize["compressed_image_size"] = o.CompressedImageSize
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContainerManifestResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"digest",
		"schema_version",
		"media_type",
		"listed_manifests",
		"blobs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerManifestResponse := _ContainerManifestResponse{}

	err = json.Unmarshal(data, &varContainerManifestResponse)

	if err != nil {
		return err
	}

	*o = ContainerManifestResponse(varContainerManifestResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pulp_href")
		delete(additionalProperties, "prn")
		delete(additionalProperties, "pulp_created")
		delete(additionalProperties, "pulp_last_updated")
		delete(additionalProperties, "pulp_labels")
		delete(additionalProperties, "digest")
		delete(additionalProperties, "schema_version")
		delete(additionalProperties, "media_type")
		delete(additionalProperties, "listed_manifests")
		delete(additionalProperties, "config_blob")
		delete(additionalProperties, "blobs")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "is_bootable")
		delete(additionalProperties, "is_flatpak")
		delete(additionalProperties, "type")
		delete(additionalProperties, "architecture")
		delete(additionalProperties, "os")
		delete(additionalProperties, "compressed_image_size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainerManifestResponse struct {
	value *ContainerManifestResponse
	isSet bool
}

func (v NullableContainerManifestResponse) Get() *ContainerManifestResponse {
	return v.value
}

func (v *NullableContainerManifestResponse) Set(val *ContainerManifestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerManifestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerManifestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerManifestResponse(val *ContainerManifestResponse) *NullableContainerManifestResponse {
	return &NullableContainerManifestResponse{value: val, isSet: true}
}

func (v NullableContainerManifestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerManifestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


